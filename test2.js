{
 "result": "define('dartpad_main', ['dart_sdk', 'flutter_web'], (function load__dartpad_main(dart_sdk, flutter_web) {\n  'use strict';\n  const core = dart_sdk.core;\n  const ui = dart_sdk.ui;\n  const async = dart_sdk.async;\n  const _interceptors = dart_sdk._interceptors;\n  const js = dart_sdk.js;\n  const html = dart_sdk.html;\n  const _internal = dart_sdk._internal;\n  const typed_data = dart_sdk.typed_data;\n  const _js_helper = dart_sdk._js_helper;\n  const collection = dart_sdk.collection;\n  const math = dart_sdk.math;\n  const js_util = dart_sdk.js_util;\n  const convert = dart_sdk.convert;\n  const _native_typed_data = dart_sdk._native_typed_data;\n  const dart = dart_sdk.dart;\n  const dartx = dart_sdk.dartx;\n  const app = flutter_web.src__material__app;\n  const theme_data = flutter_web.src__material__theme_data;\n  const colors = flutter_web.src__material__colors;\n  const framework = flutter_web.src__widgets__framework;\n  const scaffold = flutter_web.src__material__scaffold;\n  const app_bar = flutter_web.src__material__app_bar;\n  const text = flutter_web.src__widgets__text;\n  const basic = flutter_web.src__widgets__basic;\n  const flex = flutter_web.src__rendering__flex;\n  const theme = flutter_web.src__material__theme;\n  const floating_action_button = flutter_web.src__material__floating_action_button;\n  const icon = flutter_web.src__widgets__icon;\n  const icon_data = flutter_web.src__widgets__icon_data;\n  const binding = flutter_web.src__widgets__binding;\n  const message_codecs = flutter_web.src__services__message_codecs;\n  const message_codec = flutter_web.src__services__message_codec;\n  const binary_messenger = flutter_web.src__services__binary_messenger;\n  const assertions = flutter_web.src__foundation__assertions;\n  const system_navigator = flutter_web.src__services__system_navigator;\n  const stack = flutter_web.src__rendering__stack;\n  const platform_view = flutter_web.src__widgets__platform_view;\n  const basic_types = flutter_web.src__foundation__basic_types;\n  const recognizer = flutter_web.src__gestures__recognizer;\n  const platform_view$ = flutter_web.src__rendering__platform_view;\n  const platform_views = flutter_web.src__services__platform_views;\n  const system_channels = flutter_web.src__services__system_channels;\n  const events = flutter_web.src__gestures__events;\n  const platform_channel = flutter_web.src__services__platform_channel;\n  const string_scanner = flutter_web.src__string_scanner;\n  const canonicalized_map = flutter_web.src__canonicalized_map;\n  const span_exception = flutter_web.src__span_exception;\n  const typed_buffer = flutter_web.src__typed_buffer;\n  const queue_list = flutter_web.src__queue_list;\n  var bootstrap = Object.create(dart.library);\n  var flutter_web_plugins = Object.create(dart.library);\n  var generated_plugin_registrant = Object.create(dart.library);\n  var main = Object.create(dart.library);\n  var js_url_strategy = Object.create(dart.library);\n  var url_strategy = Object.create(dart.library);\n  var utils = Object.create(dart.library);\n  var plugin_event_channel = Object.create(dart.library);\n  var plugin_registry = Object.create(dart.library);\n  var image_picker_for_web = Object.create(dart.library);\n  var url_launcher_web = Object.create(dart.library);\n  var js$ = Object.create(dart.library);\n  var image_resizer = Object.create(dart.library);\n  var image_picker_platform_interface = Object.create(dart.library);\n  var link = Object.create(dart.library);\n  var url_launcher_platform_interface = Object.create(dart.library);\n  var link$ = Object.create(dart.library);\n  var dart_ui = Object.create(dart.library);\n  var browser = Object.create(dart.library);\n  var image_resizer_utils = Object.create(dart.library);\n  var image_picker_platform = Object.create(dart.library);\n  var types = Object.create(dart.library);\n  var cross_file = Object.create(dart.library);\n  var plugin_platform_interface = Object.create(dart.library);\n  var method_channel_url_launcher = Object.create(dart.library);\n  var dart_ui_real = Object.create(dart.library);\n  var method_channel_image_picker = Object.create(dart.library);\n  var camera_device = Object.create(dart.library);\n  var image_source = Object.create(dart.library);\n  var retrieve_type = Object.create(dart.library);\n  var picked_file = Object.create(dart.library);\n  var lost_data_response = Object.create(dart.library);\n  var x_file = Object.create(dart.library);\n  var lost_data = Object.create(dart.library);\n  var html$ = Object.create(dart.library);\n  var html$0 = Object.create(dart.library);\n  var http = Object.create(dart.library);\n  var base = Object.create(dart.library);\n  var base$ = Object.create(dart.library);\n  var web_helpers = Object.create(dart.library);\n  var client$ = Object.create(dart.library);\n  var exception = Object.create(dart.library);\n  var request$ = Object.create(dart.library);\n  var response$ = Object.create(dart.library);\n  var streamed_request = Object.create(dart.library);\n  var base_client = Object.create(dart.library);\n  var base_request = Object.create(dart.library);\n  var base_response = Object.create(dart.library);\n  var byte_stream = Object.create(dart.library);\n  var multipart_file = Object.create(dart.library);\n  var multipart_request = Object.create(dart.library);\n  var streamed_response = Object.create(dart.library);\n  var browser_client = Object.create(dart.library);\n  var http_parser = Object.create(dart.library);\n  var utils$ = Object.create(dart.library);\n  var multipart_file_stub = Object.create(dart.library);\n  var boundary_characters = Object.create(dart.library);\n  var authentication_challenge = Object.create(dart.library);\n  var case_insensitive_map = Object.create(dart.library);\n  var chunked_coding = Object.create(dart.library);\n  var http_date = Object.create(dart.library);\n  var media_type = Object.create(dart.library);\n  var scan = Object.create(dart.library);\n  var utils$0 = Object.create(dart.library);\n  var decoder = Object.create(dart.library);\n  var encoder = Object.create(dart.library);\n  var typed_data$ = Object.create(dart.library);\n  var typed_queue = Object.create(dart.library);\n  var $isEmpty = dartx.isEmpty;\n  var $startsWith = dartx.startsWith;\n  var $substring = dartx.substring;\n  var $isNotEmpty = dartx.isNotEmpty;\n  var $location = dartx.location;\n  var $history = dartx.history;\n  var $addEventListener = dartx.addEventListener;\n  var $removeEventListener = dartx.removeEventListener;\n  var $hash = dartx.hash;\n  var $state = dartx.state;\n  var $pushState = dartx.pushState;\n  var $replaceState = dartx.replaceState;\n  var $_get = dartx._get;\n  var $getAttribute = dartx.getAttribute;\n  var $endsWith = dartx.endsWith;\n  var $remove = dartx.remove;\n  var $_set = dartx._set;\n  var $first = dartx.first;\n  var $map = dartx.map;\n  var $files = dartx.files;\n  var $target = dartx.target;\n  var $onChange = dartx.onChange;\n  var $onError = dartx.onError;\n  var $name = dartx.name;\n  var $size = dartx.size;\n  var $type = dartx.type;\n  var $toList = dartx.toList;\n  var $id = dartx.id;\n  var $children = dartx.children;\n  var $add = dartx.add;\n  var $accept = dartx.accept;\n  var $multiple = dartx.multiple;\n  var $setAttribute = dartx.setAttribute;\n  var $clear = dartx.clear;\n  var $navigator = dartx.navigator;\n  var $open = dartx.open;\n  var $onLoad = dartx.onLoad;\n  var $toDouble = dartx.toDouble;\n  var $toInt = dartx.toInt;\n  var $context2D = dartx.context2D;\n  var $drawImageScaled = dartx.drawImageScaled;\n  var $toBlob = dartx.toBlob;\n  var $_equals = dartx._equals;\n  var $onClick = dartx.onClick;\n  var $style = dartx.style;\n  var $opacity = dartx.opacity;\n  var $display = dartx.display;\n  var $width = dartx.width;\n  var $height = dartx.height;\n  var $cursor = dartx.cursor;\n  var $toString = dartx.toString;\n  var $removeAttribute = dartx.removeAttribute;\n  var $shadowRoot = dartx.shadowRoot;\n  var $tagName = dartx.tagName;\n  var $vendor = dartx.vendor;\n  var $appVersion = dartx.appVersion;\n  var $contains = dartx.contains;\n  var $containsKey = dartx.containsKey;\n  var $length = dartx.length;\n  var $sublist = dartx.sublist;\n  var $response = dartx.response;\n  var $slice = dartx.slice;\n  var $onLoadEnd = dartx.onLoadEnd;\n  var $result = dartx.result;\n  var $toLowerCase = dartx.toLowerCase;\n  var $hashCode = dartx.hashCode;\n  var $addAll = dartx.addAll;\n  var $cast = dartx.cast;\n  var $forEach = dartx.forEach;\n  var $entries = dartx.entries;\n  var $replaceAll = dartx.replaceAll;\n  var $responseType = dartx.responseType;\n  var $asUint8List = dartx.asUint8List;\n  var $responseHeaders = dartx.responseHeaders;\n  var $join = dartx.join;\n  var $buffer = dartx.buffer;\n  var $indexOf = dartx.indexOf;\n  var $split = dartx.split;\n  var $replaceAllMapped = dartx.replaceAllMapped;\n  var $toRadixString = dartx.toRadixString;\n  var $toUpperCase = dartx.toUpperCase;\n  var $codeUnits = dartx.codeUnits;\n  var $setRange = dartx.setRange;\n  var $fillRange = dartx.fillRange;\n  var $rightShift = dartx['>>'];\n  var $noSuchMethod = dartx.noSuchMethod;\n  dart._checkModuleNullSafetyMode(true);\n  var T$ = {\n    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),\n    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),\n    VoidToString: () => (T$.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),\n    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),\n    VoidToObjectN: () => (T$.VoidToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [])))(),\n    EventTodynamic: () => (T$.EventTodynamic = dart.constFn(dart.fnType(dart.dynamic, [html.Event])))(),\n    FnToFn: () => (T$.FnToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [T$.EventTodynamic()])))(),\n    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),\n    ObjectAndStringAndStringTovoid: () => (T$.ObjectAndStringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.String, core.String])))(),\n    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),\n    intToFutureOfvoid: () => (T$.intToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [core.int])))(),\n    CompleterOfvoid: () => (T$.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),\n    VoidToFn: () => (T$.VoidToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [])))(),\n    FnTodynamic: () => (T$.FnTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.VoidTovoid()])))(),\n    EventToNull: () => (T$.EventToNull = dart.constFn(dart.fnType(core.Null, [html.Event])))(),\n    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),\n    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),\n    ByteDataN: () => (T$.ByteDataN = dart.constFn(dart.nullable(typed_data.ByteData)))(),\n    FutureOfByteDataN: () => (T$.FutureOfByteDataN = dart.constFn(async.Future$(T$.ByteDataN())))(),\n    FutureNOfByteDataN: () => (T$.FutureNOfByteDataN = dart.constFn(dart.nullable(T$.FutureOfByteDataN())))(),\n    ByteDataNToFutureNOfByteDataN: () => (T$.ByteDataNToFutureNOfByteDataN = dart.constFn(dart.fnType(T$.FutureNOfByteDataN(), [T$.ByteDataN()])))(),\n    IdentityMapOfString$ByteDataNToFutureNOfByteDataN: () => (T$.IdentityMapOfString$ByteDataNToFutureNOfByteDataN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ByteDataNToFutureNOfByteDataN())))(),\n    CompleterOfByteDataN: () => (T$.CompleterOfByteDataN = dart.constFn(async.Completer$(T$.ByteDataN())))(),\n    ByteDataNTovoid: () => (T$.ByteDataNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ByteDataN()])))(),\n    FutureOfXFile: () => (T$.FutureOfXFile = dart.constFn(async.Future$(html$0.XFile)))(),\n    XFileToFutureOfXFile: () => (T$.XFileToFutureOfXFile = dart.constFn(dart.fnType(T$.FutureOfXFile(), [html$0.XFile])))(),\n    ListOfXFile: () => (T$.ListOfXFile = dart.constFn(core.List$(html$0.XFile)))(),\n    CompleterOfPickedFile: () => (T$.CompleterOfPickedFile = dart.constFn(async.Completer$(html$.PickedFile)))(),\n    CompleterOfListOfXFile: () => (T$.CompleterOfListOfXFile = dart.constFn(async.Completer$(T$.ListOfXFile())))(),\n    FileToXFile: () => (T$.FileToXFile = dart.constFn(dart.fnType(html$0.XFile, [html.File])))(),\n    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),\n    LinkInfoToWebLinkDelegate: () => (T$.LinkInfoToWebLinkDelegate = dart.constFn(dart.fnType(link$.WebLinkDelegate, [link.LinkInfo])))(),\n    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),\n    LinkedHashSetOfString: () => (T$.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),\n    CompleterOfImageElement: () => (T$.CompleterOfImageElement = dart.constFn(async.Completer$(html.ImageElement)))(),\n    EventTovoid: () => (T$.EventTovoid = dart.constFn(dart.fnType(dart.void, [html.Event])))(),\n    CompleterOfByteData: () => (T$.CompleterOfByteData = dart.constFn(async.Completer$(typed_data.ByteData)))(),\n    FutureOrOfByteData: () => (T$.FutureOrOfByteData = dart.constFn(async.FutureOr$(typed_data.ByteData)))(),\n    FutureOrNOfByteData: () => (T$.FutureOrNOfByteData = dart.constFn(dart.nullable(T$.FutureOrOfByteData())))(),\n    FutureOrNOfByteDataTovoid: () => (T$.FutureOrNOfByteDataTovoid = dart.constFn(dart.fnType(dart.void, [], [T$.FutureOrNOfByteData()])))(),\n    PlatformViewCreationParamsToLinkViewController: () => (T$.PlatformViewCreationParamsToLinkViewController = dart.constFn(dart.fnType(link$.LinkViewController, [platform_view.PlatformViewCreationParams])))(),\n    FactoryOfOneSequenceGestureRecognizer: () => (T$.FactoryOfOneSequenceGestureRecognizer = dart.constFn(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer)))(),\n    BuildContextAndPlatformViewControllerToPlatformViewSurface: () => (T$.BuildContextAndPlatformViewControllerToPlatformViewSurface = dart.constFn(dart.fnType(platform_view.PlatformViewSurface, [framework.BuildContext, platform_views.PlatformViewController])))(),\n    MouseEventTovoid: () => (T$.MouseEventTovoid = dart.constFn(dart.fnType(dart.void, [html.MouseEvent])))(),\n    voidToNull: () => (T$.voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))(),\n    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),\n    IdentityMapOfint$LinkViewController: () => (T$.IdentityMapOfint$LinkViewController = dart.constFn(_js_helper.IdentityMap$(core.int, link$.LinkViewController)))(),\n    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),\n    intToElement: () => (T$.intToElement = dart.constFn(dart.fnType(html.Element, [core.int])))(),\n    IdentityMapOfString$Object: () => (T$.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),\n    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),\n    boolNTobool: () => (T$.boolNTobool = dart.constFn(dart.fnType(core.bool, [T$.boolN()])))(),\n    PickedFileN: () => (T$.PickedFileN = dart.constFn(dart.nullable(html$.PickedFile)))(),\n    dynamicToPickedFile: () => (T$.dynamicToPickedFile = dart.constFn(dart.fnType(html$.PickedFile, [dart.dynamic])))(),\n    ListOfPickedFile: () => (T$.ListOfPickedFile = dart.constFn(core.List$(html$.PickedFile)))(),\n    ListNOfPickedFile: () => (T$.ListNOfPickedFile = dart.constFn(dart.nullable(T$.ListOfPickedFile())))(),\n    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),\n    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),\n    XFileN: () => (T$.XFileN = dart.constFn(dart.nullable(html$0.XFile)))(),\n    dynamicToXFile: () => (T$.dynamicToXFile = dart.constFn(dart.fnType(html$0.XFile, [dart.dynamic])))(),\n    ListNOfXFile: () => (T$.ListNOfXFile = dart.constFn(dart.nullable(T$.ListOfXFile())))(),\n    JSArrayOfXFile: () => (T$.JSArrayOfXFile = dart.constFn(_interceptors.JSArray$(html$0.XFile)))(),\n    FutureOfUint8List: () => (T$.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),\n    _AsyncStarImplOfUint8List: () => (T$._AsyncStarImplOfUint8List = dart.constFn(async._AsyncStarImpl$(typed_data.Uint8List)))(),\n    VoidToHttpRequest: () => (T$.VoidToHttpRequest = dart.constFn(dart.fnType(html.HttpRequest, [])))(),\n    HttpRequestTodynamic: () => (T$.HttpRequestTodynamic = dart.constFn(dart.fnType(dart.dynamic, [html.HttpRequest])))(),\n    BlobN: () => (T$.BlobN = dart.constFn(dart.nullable(html.Blob)))(),\n    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),\n    ListOfintToString: () => (T$.ListOfintToString = dart.constFn(dart.fnType(core.String, [T$.ListOfint()])))(),\n    Uint8ListN: () => (T$.Uint8ListN = dart.constFn(dart.nullable(typed_data.Uint8List)))(),\n    FutureOfResponse: () => (T$.FutureOfResponse = dart.constFn(async.Future$(response$.Response)))(),\n    ClientToFutureOfResponse: () => (T$.ClientToFutureOfResponse = dart.constFn(dart.fnType(T$.FutureOfResponse(), [client$.Client])))(),\n    FutureOfString: () => (T$.FutureOfString = dart.constFn(async.Future$(core.String)))(),\n    ClientToFutureOfString: () => (T$.ClientToFutureOfString = dart.constFn(dart.fnType(T$.FutureOfString(), [client$.Client])))(),\n    ClientToFutureOfUint8List: () => (T$.ClientToFutureOfUint8List = dart.constFn(dart.fnType(T$.FutureOfUint8List(), [client$.Client])))(),\n    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),\n    LinkedHashMapOfString$String: () => (T$.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(core.String, core.String)))(),\n    StringAndStringTobool: () => (T$.StringAndStringTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.String])))(),\n    StringToint: () => (T$.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),\n    _EmptyStreamOfListOfint: () => (T$._EmptyStreamOfListOfint = dart.constFn(async._EmptyStream$(T$.ListOfint())))(),\n    StreamControllerOfListOfint: () => (T$.StreamControllerOfListOfint = dart.constFn(async.StreamController$(T$.ListOfint())))(),\n    StreamOfListOfint: () => (T$.StreamOfListOfint = dart.constFn(async.Stream$(T$.ListOfint())))(),\n    CompleterOfUint8List: () => (T$.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),\n    ListOfintTovoid: () => (T$.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfint()])))(),\n    JSArrayOfMultipartFile: () => (T$.JSArrayOfMultipartFile = dart.constFn(_interceptors.JSArray$(multipart_file.MultipartFile)))(),\n    StringAndStringTovoid: () => (T$.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),\n    _AsyncStarImplOfListOfint: () => (T$._AsyncStarImplOfListOfint = dart.constFn(async._AsyncStarImpl$(T$.ListOfint())))(),\n    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),\n    LinkedHashSetOfHttpRequest: () => (T$.LinkedHashSetOfHttpRequest = dart.constFn(collection.LinkedHashSet$(html.HttpRequest)))(),\n    CompleterOfStreamedResponse: () => (T$.CompleterOfStreamedResponse = dart.constFn(async.Completer$(streamed_response.StreamedResponse)))(),\n    ProgressEventToNull: () => (T$.ProgressEventToNull = dart.constFn(dart.fnType(core.Null, [html.ProgressEvent])))(),\n    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),\n    JSArrayOfListOfString: () => (T$.JSArrayOfListOfString = dart.constFn(_interceptors.JSArray$(T$.ListOfString())))(),\n    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),\n    ListOfStringToString: () => (T$.ListOfStringToString = dart.constFn(dart.fnType(core.String, [T$.ListOfString()])))(),\n    UnmodifiableMapViewOfString$String: () => (T$.UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))(),\n    CaseInsensitiveMapOfString: () => (T$.CaseInsensitiveMapOfString = dart.constFn(case_insensitive_map.CaseInsensitiveMap$(core.String)))(),\n    ListOfAuthenticationChallenge: () => (T$.ListOfAuthenticationChallenge = dart.constFn(core.List$(authentication_challenge.AuthenticationChallenge)))(),\n    VoidToAuthenticationChallenge: () => (T$.VoidToAuthenticationChallenge = dart.constFn(dart.fnType(authentication_challenge.AuthenticationChallenge, [])))(),\n    VoidToListOfAuthenticationChallenge: () => (T$.VoidToListOfAuthenticationChallenge = dart.constFn(dart.fnType(T$.ListOfAuthenticationChallenge(), [])))(),\n    VoidToDateTime: () => (T$.VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))(),\n    VoidToMediaType: () => (T$.VoidToMediaType = dart.constFn(dart.fnType(media_type.MediaType, [])))(),\n    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),\n    SinkOfListOfint: () => (T$.SinkOfListOfint = dart.constFn(core.Sink$(T$.ListOfint())))(),\n    intAndStringTovoid: () => (T$.intAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.String])))(),\n    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),\n    ListOfintN: () => (T$.ListOfintN = dart.constFn(core.List$(T$.intN())))(),\n    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),\n    ListOfdoubleN: () => (T$.ListOfdoubleN = dart.constFn(core.List$(T$.doubleN())))(),\n    Int32x4N: () => (T$.Int32x4N = dart.constFn(dart.nullable(typed_data.Int32x4)))(),\n    ListOfInt32x4N: () => (T$.ListOfInt32x4N = dart.constFn(core.List$(T$.Int32x4N())))(),\n    Float32x4N: () => (T$.Float32x4N = dart.constFn(dart.nullable(typed_data.Float32x4)))(),\n    ListOfFloat32x4N: () => (T$.ListOfFloat32x4N = dart.constFn(core.List$(T$.Float32x4N())))()\n  };\n  const CT = Object.create({\n    _: () => (C, CT)\n  });\n  dart.defineLazy(CT, {\n    get C0() {\n      return C[0] = dart.const({\n        __proto__: main.MyHomePage.prototype,\n        [Widget_key]: null,\n        [MyHomePage_title]: \"Flutter Demo Home Page\"\n      });\n    },\n    get C1() {\n      return C[1] = dart.const({\n        __proto__: text.Text.prototype,\n        [Widget_key]: null,\n        [Text_textHeightBehavior]: null,\n        [Text_textWidthBasis]: null,\n        [Text_semanticsLabel]: null,\n        [Text_maxLines]: null,\n        [Text_textScaleFactor]: null,\n        [Text_overflow]: null,\n        [Text_softWrap]: null,\n        [Text_locale]: null,\n        [Text_textDirection]: null,\n        [Text_textAlign]: null,\n        [Text_strutStyle]: null,\n        [Text_style]: null,\n        [Text_textSpan]: null,\n        [Text_data]: \"You have pushed the button this many times:\"\n      });\n    },\n    get C3() {\n      return C[3] = dart.const({\n        __proto__: icon_data.IconData.prototype,\n        [IconData_matchTextDirection]: false,\n        [IconData_fontPackage]: null,\n        [IconData_fontFamily]: \"MaterialIcons\",\n        [IconData_codePoint]: 57415\n      });\n    },\n    get C2() {\n      return C[2] = dart.const({\n        __proto__: icon.Icon.prototype,\n        [Widget_key]: null,\n        [Icon_textDirection]: null,\n        [Icon_semanticLabel]: null,\n        [Icon_color]: null,\n        [Icon_size]: null,\n        [Icon_icon]: C[3] || CT.C3\n      });\n    },\n    get C4() {\n      return C[4] = dart.const({\n        __proto__: url_strategy.BrowserPlatformLocation.prototype\n      });\n    },\n    get C5() {\n      return C[5] = dart.const({\n        __proto__: url_strategy.HashUrlStrategy.prototype,\n        [_platformLocation$]: C[4] || CT.C4\n      });\n    },\n    get C7() {\n      return C[7] = dart.const({\n        __proto__: message_codecs.StandardMessageCodec.prototype\n      });\n    },\n    get C6() {\n      return C[6] = dart.const({\n        __proto__: message_codecs.StandardMethodCodec.prototype,\n        [StandardMethodCodec_messageCodec]: C[7] || CT.C7\n      });\n    },\n    get C8() {\n      return C[8] = dart.const({\n        __proto__: camera_device.CameraDevice.prototype,\n        [_Enum__name]: \"rear\",\n        [_Enum_index]: 0\n      });\n    },\n    get C9() {\n      return C[9] = dart.const({\n        __proto__: core.Object.prototype\n      });\n    },\n    get C10() {\n      return C[10] = dart.constMap(core.String, core.String, []);\n    },\n    get C11() {\n      return C[11] = dart.constSet(core.String, [\"mailto\", \"tel\", \"sms\"]);\n    },\n    get C12() {\n      return C[12] = dart.const({\n        __proto__: js$._Anonymous.prototype\n      });\n    },\n    get C13() {\n      return C[13] = dart.const({\n        __proto__: link.LinkTarget.prototype,\n        [debugLabel$]: \"defaultTarget\"\n      });\n    },\n    get C14() {\n      return C[14] = dart.const({\n        __proto__: link.LinkTarget.prototype,\n        [debugLabel$]: \"self\"\n      });\n    },\n    get C15() {\n      return C[15] = dart.const({\n        __proto__: link.LinkTarget.prototype,\n        [debugLabel$]: \"blank\"\n      });\n    },\n    get C16() {\n      return C[16] = dart.const({\n        __proto__: message_codecs.JSONMethodCodec.prototype\n      });\n    },\n    get C17() {\n      return C[17] = dart.constSet(T$.FactoryOfOneSequenceGestureRecognizer(), []);\n    },\n    get C18() {\n      return C[18] = dart.fn(link$.LinkViewController._onGlobalClick, T$.MouseEventTovoid());\n    },\n    get C19() {\n      return C[19] = dart.fn(link$.LinkViewController._viewFactory, T$.intToElement());\n    },\n    get C20() {\n      return C[20] = dart.const({\n        __proto__: platform_channel.MethodChannel.prototype,\n        [MethodChannel__binaryMessenger]: null,\n        [MethodChannel_codec]: C[6] || CT.C6,\n        [MethodChannel_name]: \"plugins.flutter.io/url_launcher\"\n      });\n    },\n    get C21() {\n      return C[21] = dart.const({\n        __proto__: camera_device.CameraDevice.prototype,\n        [_Enum__name]: \"front\",\n        [_Enum_index]: 1\n      });\n    },\n    get C22() {\n      return C[22] = dart.constList([C[8] || CT.C8, C[21] || CT.C21], camera_device.CameraDevice);\n    },\n    get C23() {\n      return C[23] = dart.const({\n        __proto__: image_source.ImageSource.prototype,\n        [_Enum__name]: \"camera\",\n        [_Enum_index]: 0\n      });\n    },\n    get C24() {\n      return C[24] = dart.const({\n        __proto__: image_source.ImageSource.prototype,\n        [_Enum__name]: \"gallery\",\n        [_Enum_index]: 1\n      });\n    },\n    get C25() {\n      return C[25] = dart.constList([C[23] || CT.C23, C[24] || CT.C24], image_source.ImageSource);\n    },\n    get C26() {\n      return C[26] = dart.const({\n        __proto__: retrieve_type.RetrieveType.prototype,\n        [_Enum__name]: \"image\",\n        [_Enum_index]: 0\n      });\n    },\n    get C27() {\n      return C[27] = dart.const({\n        __proto__: retrieve_type.RetrieveType.prototype,\n        [_Enum__name]: \"video\",\n        [_Enum_index]: 1\n      });\n    },\n    get C28() {\n      return C[28] = dart.constList([C[26] || CT.C26, C[27] || CT.C27], retrieve_type.RetrieveType);\n    },\n    get C29() {\n      return C[29] = dart.const({\n        __proto__: convert.Utf8Codec.prototype,\n        [Utf8Codec__allowMalformed]: false\n      });\n    },\n    get C31() {\n      return C[31] = dart.const({\n        __proto__: T$._EmptyStreamOfListOfint().prototype\n      });\n    },\n    get C30() {\n      return C[30] = dart.const({\n        __proto__: byte_stream.ByteStream.prototype,\n        [StreamView__stream]: C[31] || CT.C31\n      });\n    },\n    get C32() {\n      return C[32] = dart.constList([13, 10], core.int);\n    },\n    get C33() {\n      return C[33] = dart.const({\n        __proto__: convert.Latin1Codec.prototype,\n        [Latin1Codec__allowInvalid]: false\n      });\n    },\n    get C34() {\n      return C[34] = dart.constList([43, 95, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], core.int);\n    },\n    get C35() {\n      return C[35] = dart.const({\n        __proto__: chunked_coding.ChunkedCodingCodec.prototype\n      });\n    },\n    get C36() {\n      return C[36] = dart.constList([\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"], core.String);\n    },\n    get C37() {\n      return C[37] = dart.constList([\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], core.String);\n    },\n    get C38() {\n      return C[38] = dart.const({\n        __proto__: decoder._State.prototype,\n        [_State__name]: \"boundary\"\n      });\n    },\n    get C39() {\n      return C[39] = dart.const({\n        __proto__: decoder._State.prototype,\n        [_State__name]: \"size\"\n      });\n    },\n    get C40() {\n      return C[40] = dart.const({\n        __proto__: decoder._State.prototype,\n        [_State__name]: \"size before LF\"\n      });\n    },\n    get C41() {\n      return C[41] = dart.const({\n        __proto__: decoder._State.prototype,\n        [_State__name]: \"body\"\n      });\n    },\n    get C42() {\n      return C[42] = dart.const({\n        __proto__: decoder._State.prototype,\n        [_State__name]: \"body before CR\"\n      });\n    },\n    get C43() {\n      return C[43] = dart.const({\n        __proto__: decoder._State.prototype,\n        [_State__name]: \"body before LF\"\n      });\n    },\n    get C44() {\n      return C[44] = dart.const({\n        __proto__: decoder._State.prototype,\n        [_State__name]: \"end before CR\"\n      });\n    },\n    get C45() {\n      return C[45] = dart.const({\n        __proto__: decoder._State.prototype,\n        [_State__name]: \"end before LF\"\n      });\n    },\n    get C46() {\n      return C[46] = dart.const({\n        __proto__: decoder._State.prototype,\n        [_State__name]: \"end\"\n      });\n    },\n    get C47() {\n      return C[47] = dart.const({\n        __proto__: decoder.ChunkedCodingDecoder.prototype\n      });\n    },\n    get C48() {\n      return C[48] = dart.constList([], core.int);\n    },\n    get C49() {\n      return C[49] = dart.const({\n        __proto__: encoder.ChunkedCodingEncoder.prototype\n      });\n    },\n    get C50() {\n      return C[50] = dart.const(new _js_helper.PrivateSymbol.new('_head', _head$));\n    },\n    get C51() {\n      return C[51] = dart.const(new _js_helper.PrivateSymbol.new('_writeToList', _writeToList));\n    },\n    get C52() {\n      return C[52] = dart.const(new _js_helper.PrivateSymbol.new('_add', _add));\n    },\n    get C53() {\n      return C[53] = dart.const(new _js_helper.PrivateSymbol.new('_grow', _grow));\n    },\n    get C54() {\n      return C[54] = dart.const(new _js_helper.PrivateSymbol.new('_table', _table$));\n    },\n    get C55() {\n      return C[55] = dart.const(new _js_helper.PrivateSymbol.new('_tail', _tail$));\n    },\n    get C56() {\n      return C[56] = dart.const(new _js_helper.PrivateSymbol.new('_preGrow', _preGrow));\n    },\n    get C57() {\n      return C[57] = dart.const(new _js_helper.PrivateSymbol.new('_head=', _head_));\n    },\n    get C58() {\n      return C[58] = dart.const(new _js_helper.PrivateSymbol.new('_table=', _table_));\n    },\n    get C59() {\n      return C[59] = dart.const(new _js_helper.PrivateSymbol.new('_tail=', _tail_));\n    }\n  }, false);\n  var C = Array(60).fill(void 0);\n  var I = [\n    \"package:dartpad_sample/main.dart\",\n    \"package:flutter_web_plugins/src/navigation/url_strategy.dart\",\n    \"file:///app/flutter-sdks/stable/packages/flutter_web_plugins/lib/src/navigation/url_strategy.dart\",\n    \"file:///app/flutter-sdks/stable/packages/flutter_web_plugins/lib/src/plugin_event_channel.dart\",\n    \"package:flutter_web_plugins/src/plugin_event_channel.dart\",\n    \"package:flutter_web_plugins/src/plugin_registry.dart\",\n    \"file:///app/local_pub_cache/hosted/pub.dartlang.org/plugin_platform_interface-2.1.2/lib/plugin_platform_interface.dart\",\n    \"package:plugin_platform_interface/plugin_platform_interface.dart\",\n    \"package:image_picker_platform_interface/src/platform_interface/image_picker_platform.dart\",\n    \"package:image_picker_for_web/image_picker_for_web.dart\",\n    \"package:url_launcher_platform_interface/url_launcher_platform_interface.dart\",\n    \"package:url_launcher_web/url_launcher_web.dart\",\n    \"package:js/js.dart\",\n    \"package:image_picker_for_web/src/image_resizer.dart\",\n    \"package:url_launcher_platform_interface/link.dart\",\n    \"package:url_launcher_web/src/link.dart\",\n    \"file:///app/local_pub_cache/hosted/pub.dartlang.org/url_launcher_web-2.0.5/lib/src/link.dart\",\n    \"package:url_launcher_platform_interface/method_channel_url_launcher.dart\",\n    \"file:///app/local_pub_cache/hosted/pub.dartlang.org/image_picker_platform_interface-2.4.2/lib/src/method_channel/method_channel_image_picker.dart\",\n    \"package:image_picker_platform_interface/src/method_channel/method_channel_image_picker.dart\",\n    \"package:image_picker_platform_interface/src/types/camera_device.dart\",\n    \"package:image_picker_platform_interface/src/types/image_source.dart\",\n    \"package:image_picker_platform_interface/src/types/retrieve_type.dart\",\n    \"package:image_picker_platform_interface/src/types/lost_data_response.dart\",\n    \"package:image_picker_platform_interface/src/types/picked_file/lost_data.dart\",\n    \"package:image_picker_platform_interface/src/types/picked_file/base.dart\",\n    \"package:image_picker_platform_interface/src/types/picked_file/html.dart\",\n    \"file:///app/local_pub_cache/hosted/pub.dartlang.org/cross_file-0.3.2/lib/src/types/html.dart\",\n    \"package:cross_file/src/types/base.dart\",\n    \"package:cross_file/src/types/html.dart\",\n    \"package:http/src/client.dart\",\n    \"package:http/src/exception.dart\",\n    \"package:http/src/base_request.dart\",\n    \"package:http/src/request.dart\",\n    \"package:http/src/base_response.dart\",\n    \"package:http/src/response.dart\",\n    \"package:http/src/streamed_request.dart\",\n    \"package:http/src/base_client.dart\",\n    \"package:http/src/byte_stream.dart\",\n    \"package:http/src/multipart_file.dart\",\n    \"package:http/src/multipart_request.dart\",\n    \"package:http/src/streamed_response.dart\",\n    \"package:http/src/browser_client.dart\",\n    \"package:http_parser/src/authentication_challenge.dart\",\n    \"package:http_parser/src/case_insensitive_map.dart\",\n    \"package:http_parser/src/chunked_coding.dart\",\n    \"package:http_parser/src/media_type.dart\",\n    \"package:http_parser/src/chunked_coding/decoder.dart\",\n    \"package:http_parser/src/chunked_coding/encoder.dart\",\n    \"file:///app/local_pub_cache/hosted/pub.dartlang.org/typed_data-1.3.0/lib/src/typed_queue.dart\",\n    \"package:typed_data/src/typed_queue.dart\"\n  ];\n  bootstrap.main = function main$() {\n    return async.async(dart.void, function* main$() {\n      generated_plugin_registrant.registerPlugins(plugin_registry.webPluginRegistrar);\n      yield ui.webOnlyInitializePlatform();\n      main.main();\n    });\n  };\n  generated_plugin_registrant.registerPlugins = function registerPlugins(registrar) {\n    image_picker_for_web.ImagePickerPlugin.registerWith(registrar);\n    url_launcher_web.UrlLauncherPlugin.registerWith(registrar);\n    registrar.registerMessageHandler();\n  };\n  var Widget_key = dart.privateName(framework, \"Widget.key\");\n  var MyHomePage_title = dart.privateName(main, \"MyHomePage.title\");\n  main.MyApp = class MyApp extends framework.StatelessWidget {\n    build(context) {\n      return new app.MaterialApp.new({title: \"Flutter Demo\", debugShowCheckedModeBanner: false, theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.blue}), home: C[0] || CT.C0});\n    }\n    static ['_#new#tearOff']() {\n      return new main.MyApp.new();\n    }\n  };\n  (main.MyApp.new = function() {\n    main.MyApp.__proto__.new.call(this);\n    ;\n  }).prototype = main.MyApp.prototype;\n  dart.addTypeTests(main.MyApp);\n  dart.addTypeCaches(main.MyApp);\n  dart.setMethodSignature(main.MyApp, () => ({\n    __proto__: dart.getMethods(main.MyApp.__proto__),\n    build: dart.fnType(framework.Widget, [framework.BuildContext])\n  }));\n  dart.setLibraryUri(main.MyApp, I[0]);\n  const title$ = MyHomePage_title;\n  main.MyHomePage = class MyHomePage extends framework.StatefulWidget {\n    get title() {\n      return this[title$];\n    }\n    set title(value) {\n      super.title = value;\n    }\n    static ['_#new#tearOff'](opts) {\n      let key = opts && 'key' in opts ? opts.key : null;\n      let title = opts && 'title' in opts ? opts.title : null;\n      return new main.MyHomePage.new({key: key, title: title});\n    }\n    createState() {\n      return new main._MyHomePageState.new();\n    }\n  };\n  (main.MyHomePage.new = function(opts) {\n    let key = opts && 'key' in opts ? opts.key : null;\n    let title = opts && 'title' in opts ? opts.title : null;\n    this[title$] = title;\n    main.MyHomePage.__proto__.new.call(this, {key: key});\n    ;\n  }).prototype = main.MyHomePage.prototype;\n  dart.addTypeTests(main.MyHomePage);\n  dart.addTypeCaches(main.MyHomePage);\n  dart.setMethodSignature(main.MyHomePage, () => ({\n    __proto__: dart.getMethods(main.MyHomePage.__proto__),\n    createState: dart.fnType(main._MyHomePageState, [])\n  }));\n  dart.setLibraryUri(main.MyHomePage, I[0]);\n  dart.setFieldSignature(main.MyHomePage, () => ({\n    __proto__: dart.getFields(main.MyHomePage.__proto__),\n    title: dart.finalFieldType(core.String)\n  }));\n  var _counter = dart.privateName(main, \"_counter\");\n  var _incrementCounter = dart.privateName(main, \"_incrementCounter\");\n  var Text_textHeightBehavior = dart.privateName(text, \"Text.textHeightBehavior\");\n  var Text_textWidthBasis = dart.privateName(text, \"Text.textWidthBasis\");\n  var Text_semanticsLabel = dart.privateName(text, \"Text.semanticsLabel\");\n  var Text_maxLines = dart.privateName(text, \"Text.maxLines\");\n  var Text_textScaleFactor = dart.privateName(text, \"Text.textScaleFactor\");\n  var Text_overflow = dart.privateName(text, \"Text.overflow\");\n  var Text_softWrap = dart.privateName(text, \"Text.softWrap\");\n  var Text_locale = dart.privateName(text, \"Text.locale\");\n  var Text_textDirection = dart.privateName(text, \"Text.textDirection\");\n  var Text_textAlign = dart.privateName(text, \"Text.textAlign\");\n  var Text_strutStyle = dart.privateName(text, \"Text.strutStyle\");\n  var Text_style = dart.privateName(text, \"Text.style\");\n  var Text_textSpan = dart.privateName(text, \"Text.textSpan\");\n  var Text_data = dart.privateName(text, \"Text.data\");\n  var Icon_textDirection = dart.privateName(icon, \"Icon.textDirection\");\n  var Icon_semanticLabel = dart.privateName(icon, \"Icon.semanticLabel\");\n  var Icon_color = dart.privateName(icon, \"Icon.color\");\n  var Icon_size = dart.privateName(icon, \"Icon.size\");\n  var IconData_matchTextDirection = dart.privateName(icon_data, \"IconData.matchTextDirection\");\n  var IconData_fontPackage = dart.privateName(icon_data, \"IconData.fontPackage\");\n  var IconData_fontFamily = dart.privateName(icon_data, \"IconData.fontFamily\");\n  var IconData_codePoint = dart.privateName(icon_data, \"IconData.codePoint\");\n  var Icon_icon = dart.privateName(icon, \"Icon.icon\");\n  main._MyHomePageState = class _MyHomePageState extends framework.State$(main.MyHomePage) {\n    [_incrementCounter]() {\n      this.setState(dart.fn(() => {\n        this[_counter] = this[_counter] + 1;\n      }, T$.VoidTovoid()));\n    }\n    build(context) {\n      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new(this.widget.title)}), body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T$.JSArrayOfWidget().of([C[1] || CT.C1, new text.Text.new(dart.str(this[_counter]), {style: theme.Theme.of(context).textTheme.headline4})])})}), floatingActionButton: new floating_action_button.FloatingActionButton.new({onPressed: dart.bind(this, _incrementCounter), tooltip: \"Increment\", child: C[2] || CT.C2})});\n    }\n    static ['_#new#tearOff']() {\n      return new main._MyHomePageState.new();\n    }\n  };\n  (main._MyHomePageState.new = function() {\n    this[_counter] = 0;\n    main._MyHomePageState.__proto__.new.call(this);\n    ;\n  }).prototype = main._MyHomePageState.prototype;\n  dart.addTypeTests(main._MyHomePageState);\n  dart.addTypeCaches(main._MyHomePageState);\n  dart.setMethodSignature(main._MyHomePageState, () => ({\n    __proto__: dart.getMethods(main._MyHomePageState.__proto__),\n    [_incrementCounter]: dart.fnType(dart.void, []),\n    build: dart.fnType(framework.Widget, [framework.BuildContext])\n  }));\n  dart.setLibraryUri(main._MyHomePageState, I[0]);\n  dart.setFieldSignature(main._MyHomePageState, () => ({\n    __proto__: dart.getFields(main._MyHomePageState.__proto__),\n    [_counter]: dart.fieldType(core.int)\n  }));\n  main.main = function main$0() {\n    return binding.runApp(new main.MyApp.new());\n  };\n  js_url_strategy.convertToJsUrlStrategy = function convertToJsUrlStrategy(strategy) {\n    return {getPath: js.allowInterop(T$.VoidToString(), dart.bind(strategy, 'getPath')), getState: js.allowInterop(T$.VoidToObjectN(), dart.bind(strategy, 'getState')), addPopStateListener: js.allowInterop(T$.FnToFn(), dart.bind(strategy, 'addPopStateListener')), prepareExternalUrl: js.allowInterop(T$.StringToString(), dart.bind(strategy, 'prepareExternalUrl')), pushState: js.allowInterop(T$.ObjectAndStringAndStringTovoid(), dart.bind(strategy, 'pushState')), replaceState: js.allowInterop(T$.ObjectAndStringAndStringTovoid(), dart.bind(strategy, 'replaceState')), go: js.allowInterop(T$.intToFutureOfvoid(), dart.bind(strategy, 'go'))};\n  };\n  url_strategy.UrlStrategy = class UrlStrategy extends core.Object {};\n  (url_strategy.UrlStrategy.new = function() {\n    ;\n  }).prototype = url_strategy.UrlStrategy.prototype;\n  dart.addTypeTests(url_strategy.UrlStrategy);\n  dart.addTypeCaches(url_strategy.UrlStrategy);\n  dart.setLibraryUri(url_strategy.UrlStrategy, I[1]);\n  var _platformLocation$ = dart.privateName(url_strategy, \"HashUrlStrategy._platformLocation\");\n  var _platformLocation = dart.privateName(url_strategy, \"_platformLocation\");\n  var _waitForPopState = dart.privateName(url_strategy, \"_waitForPopState\");\n  url_strategy.HashUrlStrategy = class HashUrlStrategy extends url_strategy.UrlStrategy {\n    get [_platformLocation]() {\n      return this[_platformLocation$];\n    }\n    set [_platformLocation](value) {\n      super[_platformLocation] = value;\n    }\n    static ['_#new#tearOff'](_platformLocation = C[4] || CT.C4) {\n      return new url_strategy.HashUrlStrategy.new(_platformLocation);\n    }\n    addPopStateListener(fn) {\n      this[_platformLocation].addPopStateListener(fn);\n      return dart.fn(() => this[_platformLocation].removePopStateListener(fn), T$.VoidTovoid());\n    }\n    getPath() {\n      let path = this[_platformLocation].hash;\n      if (!(path[$isEmpty] || path[$startsWith](\"#\"))) dart.assertFailed(null, I[2], 127, 12, \"path.isEmpty || path.startsWith('#')\");\n      if (path[$isEmpty] || path === \"#\") {\n        return \"/\";\n      }\n      return path[$substring](1);\n    }\n    getState() {\n      return this[_platformLocation].state;\n    }\n    prepareExternalUrl(internalUrl) {\n      return internalUrl[$isEmpty] ? this[_platformLocation].pathname + this[_platformLocation].search : \"#\" + internalUrl;\n    }\n    pushState(state, title, url) {\n      this[_platformLocation].pushState(state, title, this.prepareExternalUrl(url));\n    }\n    replaceState(state, title, url) {\n      this[_platformLocation].replaceState(state, title, this.prepareExternalUrl(url));\n    }\n    go(count) {\n      this[_platformLocation].go(count);\n      return this[_waitForPopState]();\n    }\n    [_waitForPopState]() {\n      let completer = T$.CompleterOfvoid().new();\n      let unsubscribe = null;\n      function unsubscribe$35get() {\n        let t1;\n        t1 = unsubscribe;\n        return t1 == null ? dart.throw(new _internal.LateError.localNI(\"unsubscribe\")) : t1;\n      }\n      dart.fn(unsubscribe$35get, T$.VoidToFn());\n      function unsubscribe$35set(t2) {\n        return unsubscribe = t2;\n      }\n      dart.fn(unsubscribe$35set, T$.FnTodynamic());\n      unsubscribe$35set(this.addPopStateListener(dart.fn(_ => {\n        unsubscribe$35get()();\n        completer.complete();\n      }, T$.EventToNull())));\n      return completer.future;\n    }\n  };\n  (url_strategy.HashUrlStrategy.new = function(_platformLocation = C[4] || CT.C4) {\n    this[_platformLocation$] = _platformLocation;\n    url_strategy.HashUrlStrategy.__proto__.new.call(this);\n    ;\n  }).prototype = url_strategy.HashUrlStrategy.prototype;\n  dart.addTypeTests(url_strategy.HashUrlStrategy);\n  dart.addTypeCaches(url_strategy.HashUrlStrategy);\n  dart.setMethodSignature(url_strategy.HashUrlStrategy, () => ({\n    __proto__: dart.getMethods(url_strategy.HashUrlStrategy.__proto__),\n    addPopStateListener: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.dynamic, [html.Event])]),\n    getPath: dart.fnType(core.String, []),\n    getState: dart.fnType(dart.nullable(core.Object), []),\n    prepareExternalUrl: dart.fnType(core.String, [core.String]),\n    pushState: dart.fnType(dart.void, [dart.nullable(core.Object), core.String, core.String]),\n    replaceState: dart.fnType(dart.void, [dart.nullable(core.Object), core.String, core.String]),\n    go: dart.fnType(async.Future$(dart.void), [core.int]),\n    [_waitForPopState]: dart.fnType(async.Future$(dart.void), [])\n  }));\n  dart.setLibraryUri(url_strategy.HashUrlStrategy, I[1]);\n  dart.setFieldSignature(url_strategy.HashUrlStrategy, () => ({\n    __proto__: dart.getFields(url_strategy.HashUrlStrategy.__proto__),\n    [_platformLocation]: dart.finalFieldType(url_strategy.PlatformLocation)\n  }));\n  var _basePath = dart.privateName(url_strategy, \"_basePath\");\n  url_strategy.PathUrlStrategy = class PathUrlStrategy extends url_strategy.HashUrlStrategy {\n    static ['_#new#tearOff'](_platformLocation = C[4] || CT.C4) {\n      return new url_strategy.PathUrlStrategy.new(_platformLocation);\n    }\n    getPath() {\n      let path = this[_platformLocation].pathname + this[_platformLocation].search;\n      if (this[_basePath][$isNotEmpty] && path[$startsWith](this[_basePath])) {\n        return utils.ensureLeadingSlash(path[$substring](this[_basePath].length));\n      }\n      return utils.ensureLeadingSlash(path);\n    }\n    prepareExternalUrl(internalUrl) {\n      if (internalUrl[$isNotEmpty] && !internalUrl[$startsWith](\"/\")) {\n        internalUrl = \"/\" + internalUrl;\n      }\n      return this[_basePath] + internalUrl;\n    }\n  };\n  (url_strategy.PathUrlStrategy.new = function(_platformLocation = C[4] || CT.C4) {\n    this[_basePath] = utils.stripTrailingSlash(utils.extractPathname(utils.checkBaseHref(_platformLocation.getBaseHref())));\n    url_strategy.PathUrlStrategy.__proto__.new.call(this, _platformLocation);\n    ;\n  }).prototype = url_strategy.PathUrlStrategy.prototype;\n  dart.addTypeTests(url_strategy.PathUrlStrategy);\n  dart.addTypeCaches(url_strategy.PathUrlStrategy);\n  dart.setLibraryUri(url_strategy.PathUrlStrategy, I[1]);\n  dart.setFieldSignature(url_strategy.PathUrlStrategy, () => ({\n    __proto__: dart.getFields(url_strategy.PathUrlStrategy.__proto__),\n    [_basePath]: dart.finalFieldType(core.String)\n  }));\n  url_strategy.PlatformLocation = class PlatformLocation extends core.Object {};\n  (url_strategy.PlatformLocation.new = function() {\n    ;\n  }).prototype = url_strategy.PlatformLocation.prototype;\n  dart.addTypeTests(url_strategy.PlatformLocation);\n  dart.addTypeCaches(url_strategy.PlatformLocation);\n  dart.setLibraryUri(url_strategy.PlatformLocation, I[1]);\n  var _location = dart.privateName(url_strategy, \"_location\");\n  var _history = dart.privateName(url_strategy, \"_history\");\n  url_strategy.BrowserPlatformLocation = class BrowserPlatformLocation extends url_strategy.PlatformLocation {\n    static ['_#new#tearOff']() {\n      return new url_strategy.BrowserPlatformLocation.new();\n    }\n    get [_location]() {\n      return html.window[$location];\n    }\n    get [_history]() {\n      return html.window[$history];\n    }\n    addPopStateListener(fn) {\n      html.window[$addEventListener](\"popstate\", fn);\n    }\n    removePopStateListener(fn) {\n      html.window[$removeEventListener](\"popstate\", fn);\n    }\n    get pathname() {\n      let t4;\n      t4 = this[_location].pathname;\n      return t4 == null ? \"\" : t4;\n    }\n    get search() {\n      let t4;\n      t4 = this[_location].search;\n      return t4 == null ? \"\" : t4;\n    }\n    get hash() {\n      return this[_location][$hash];\n    }\n    get state() {\n      return this[_history][$state];\n    }\n    pushState(state, title, url) {\n      this[_history][$pushState](state, title, url);\n    }\n    replaceState(state, title, url) {\n      this[_history][$replaceState](state, title, url);\n    }\n    go(count) {\n      this[_history].go(count);\n    }\n    getBaseHref() {\n      return utils.getBaseElementHrefFromDom();\n    }\n  };\n  (url_strategy.BrowserPlatformLocation.new = function() {\n    url_strategy.BrowserPlatformLocation.__proto__.new.call(this);\n    ;\n  }).prototype = url_strategy.BrowserPlatformLocation.prototype;\n  dart.addTypeTests(url_strategy.BrowserPlatformLocation);\n  dart.addTypeCaches(url_strategy.BrowserPlatformLocation);\n  dart.setMethodSignature(url_strategy.BrowserPlatformLocation, () => ({\n    __proto__: dart.getMethods(url_strategy.BrowserPlatformLocation.__proto__),\n    addPopStateListener: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [html.Event])]),\n    removePopStateListener: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [html.Event])]),\n    pushState: dart.fnType(dart.void, [dart.nullable(core.Object), core.String, core.String]),\n    replaceState: dart.fnType(dart.void, [dart.nullable(core.Object), core.String, core.String]),\n    go: dart.fnType(dart.void, [core.int]),\n    getBaseHref: dart.fnType(dart.nullable(core.String), [])\n  }));\n  dart.setGetterSignature(url_strategy.BrowserPlatformLocation, () => ({\n    __proto__: dart.getGetters(url_strategy.BrowserPlatformLocation.__proto__),\n    [_location]: html.Location,\n    [_history]: html.History,\n    pathname: core.String,\n    search: core.String,\n    hash: core.String,\n    state: dart.nullable(core.Object)\n  }));\n  dart.setLibraryUri(url_strategy.BrowserPlatformLocation, I[1]);\n  dart.setStaticFieldSignature(url_strategy.BrowserPlatformLocation, () => ['_defaultPathname', '_defaultSearch']);\n  dart.defineLazy(url_strategy.BrowserPlatformLocation, {\n    /*url_strategy.BrowserPlatformLocation._defaultPathname*/get _defaultPathname() {\n      return \"\";\n    },\n    /*url_strategy.BrowserPlatformLocation._defaultSearch*/get _defaultSearch() {\n      return \"\";\n    }\n  }, false);\n  url_strategy.setUrlStrategy = function setUrlStrategy(strategy) {\n    url_strategy._urlStrategy = strategy;\n    let jsUrlStrategy = null;\n    if (strategy != null) {\n      jsUrlStrategy = js_url_strategy.convertToJsUrlStrategy(strategy);\n    }\n    dart.global._flutter_web_set_location_strategy(jsUrlStrategy);\n  };\n  dart.copyProperties(url_strategy, {\n    get urlStrategy() {\n      return url_strategy._urlStrategy;\n    }\n  });\n  dart.defineLazy(url_strategy, {\n    /*url_strategy._urlStrategy*/get _urlStrategy() {\n      return C[5] || CT.C5;\n    },\n    set _urlStrategy(_) {}\n  }, false);\n  utils.extractPathname = function extractPathname(url) {\n    let t4;\n    utils._urlParsingNode.href = url;\n    let pathname = (t4 = utils._urlParsingNode.pathname, t4 == null ? \"\" : t4);\n    return pathname[$isEmpty] || pathname[$_get](0) === \"/\" ? pathname : \"/\" + pathname;\n  };\n  utils.getBaseElementHrefFromDom = function getBaseElementHrefFromDom() {\n    let t4;\n    t4 = utils._baseElement;\n    return t4 == null ? null : t4[$getAttribute](\"href\");\n  };\n  utils.checkBaseHref = function checkBaseHref(baseHref) {\n    if (baseHref == null) {\n      dart.throw(core.Exception.new(\"Please add a <base> element to your index.html\"));\n    }\n    if (!baseHref[$endsWith](\"/\")) {\n      dart.throw(core.Exception.new(\"The base href has to end with a \\\"/\\\" to work correctly\"));\n    }\n    return baseHref;\n  };\n  utils.ensureLeadingSlash = function ensureLeadingSlash(path) {\n    if (!path[$startsWith](\"/\")) {\n      return \"/\" + path;\n    }\n    return path;\n  };\n  utils.stripTrailingSlash = function stripTrailingSlash(path) {\n    if (path[$endsWith](\"/\")) {\n      return path[$substring](0, path.length - 1);\n    }\n    return path;\n  };\n  dart.defineLazy(utils, {\n    /*utils._urlParsingNode*/get _urlParsingNode() {\n      return html.AnchorElement.new();\n    },\n    /*utils._baseElement*/get _baseElement() {\n      return html.document.querySelector(\"base\");\n    }\n  }, false);\n  var name$ = dart.privateName(plugin_event_channel, \"PluginEventChannel.name\");\n  var codec$ = dart.privateName(plugin_event_channel, \"PluginEventChannel.codec\");\n  var binaryMessenger$ = dart.privateName(plugin_event_channel, \"PluginEventChannel.binaryMessenger\");\n  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, \"StandardMethodCodec.messageCodec\");\n  const _is_PluginEventChannel_default = Symbol('_is_PluginEventChannel_default');\n  plugin_event_channel.PluginEventChannel$ = dart.generic(T => {\n    var __t$StreamControllerOfT = () => (__t$StreamControllerOfT = dart.constFn(async.StreamController$(T)))();\n    var __t$StreamControllerNOfT = () => (__t$StreamControllerNOfT = dart.constFn(dart.nullable(__t$StreamControllerOfT())))();\n    var __t$_EventChannelHandlerOfT = () => (__t$_EventChannelHandlerOfT = dart.constFn(plugin_event_channel._EventChannelHandler$(T)))();\n    class PluginEventChannel extends core.Object {\n      get name() {\n        return this[name$];\n      }\n      set name(value) {\n        super.name = value;\n      }\n      get codec() {\n        return this[codec$];\n      }\n      set codec(value) {\n        super.codec = value;\n      }\n      get binaryMessenger() {\n        return this[binaryMessenger$];\n      }\n      set binaryMessenger(value) {\n        super.binaryMessenger = value;\n      }\n      static ['_#new#tearOff'](T, name, codec = C[6] || CT.C6, binaryMessenger = null) {\n        return new (plugin_event_channel.PluginEventChannel$(T)).new(name, codec, binaryMessenger);\n      }\n      set controller(controller) {\n        __t$StreamControllerOfT().as(controller);\n        this.setController(controller);\n      }\n      setController(controller) {\n        let t4;\n        __t$StreamControllerNOfT().as(controller);\n        let messenger = (t4 = this.binaryMessenger, t4 == null ? plugin_registry.pluginBinaryMessenger : t4);\n        if (controller == null) {\n          messenger.setMessageHandler(this.name, null);\n        } else {\n          let handler = new (__t$_EventChannelHandlerOfT()).new(this.name, this.codec, controller, messenger);\n          messenger.setMessageHandler(this.name, dart.bind(handler, 'handle'));\n        }\n      }\n    }\n    (PluginEventChannel.new = function(name, codec = C[6] || CT.C6, binaryMessenger = null) {\n      this[name$] = name;\n      this[codec$] = codec;\n      this[binaryMessenger$] = binaryMessenger;\n      if (!(name !== null)) dart.assertFailed(null, I[3], 46, 15, \"name != null\");\n      if (!(codec !== null)) dart.assertFailed(null, I[3], 47, 15, \"codec != null\");\n      ;\n    }).prototype = PluginEventChannel.prototype;\n    dart.addTypeTests(PluginEventChannel);\n    PluginEventChannel.prototype[_is_PluginEventChannel_default] = true;\n    dart.addTypeCaches(PluginEventChannel);\n    dart.setMethodSignature(PluginEventChannel, () => ({\n      __proto__: dart.getMethods(PluginEventChannel.__proto__),\n      setController: dart.fnType(dart.void, [dart.nullable(core.Object)])\n    }));\n    dart.setSetterSignature(PluginEventChannel, () => ({\n      __proto__: dart.getSetters(PluginEventChannel.__proto__),\n      controller: dart.nullable(core.Object)\n    }));\n    dart.setLibraryUri(PluginEventChannel, I[4]);\n    dart.setFieldSignature(PluginEventChannel, () => ({\n      __proto__: dart.getFields(PluginEventChannel.__proto__),\n      name: dart.finalFieldType(core.String),\n      codec: dart.finalFieldType(message_codec.MethodCodec),\n      binaryMessenger: dart.finalFieldType(dart.nullable(binary_messenger.BinaryMessenger))\n    }));\n    return PluginEventChannel;\n  });\n  plugin_event_channel.PluginEventChannel = plugin_event_channel.PluginEventChannel$();\n  dart.addTypeTests(plugin_event_channel.PluginEventChannel, _is_PluginEventChannel_default);\n  var subscription = dart.privateName(plugin_event_channel, \"_EventChannelHandler.subscription\");\n  var _listen = dart.privateName(plugin_event_channel, \"_listen\");\n  var _cancel = dart.privateName(plugin_event_channel, \"_cancel\");\n  const _is__EventChannelHandler_default = Symbol('_is__EventChannelHandler_default');\n  plugin_event_channel._EventChannelHandler$ = dart.generic(T => {\n    var __t$StreamSubscriptionOfT = () => (__t$StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();\n    var __t$StreamSubscriptionNOfT = () => (__t$StreamSubscriptionNOfT = dart.constFn(dart.nullable(__t$StreamSubscriptionOfT())))();\n    class _EventChannelHandler extends core.Object {\n      get subscription() {\n        return this[subscription];\n      }\n      set subscription(value) {\n        this[subscription] = __t$StreamSubscriptionNOfT().as(value);\n      }\n      static ['_#new#tearOff'](T, name, codec, controller, messenger) {\n        return new (plugin_event_channel._EventChannelHandler$(T)).new(name, codec, controller, messenger);\n      }\n      handle(message) {\n        let call = this.codec.decodeMethodCall(message);\n        switch (call.method) {\n          case \"listen\":\n          {\n            if (!(call.arguments == null)) dart.assertFailed(null, I[3], 124, 16, \"call.arguments == null\");\n            return this[_listen]();\n          }\n          case \"cancel\":\n          {\n            if (!(call.arguments == null)) dart.assertFailed(null, I[3], 127, 16, \"call.arguments == null\");\n            return this[_cancel]();\n          }\n        }\n        return null;\n      }\n      [_listen]() {\n        return async.async(typed_data.ByteData, (function* _listen() {\n          let t4;\n          yield (t4 = this.subscription, t4 == null ? null : t4.cancel());\n          this.subscription = this.controller.stream.listen(dart.fn(event => {\n            this.messenger.send(this.name, this.codec.encodeSuccessEnvelope(event));\n          }, T$.dynamicTovoid()), {onError: dart.fn(error => {\n              this.messenger.send(this.name, this.codec.encodeErrorEnvelope({code: \"error\", message: dart.str(error)}));\n            }, T$.dynamicToNull())});\n          return this.codec.encodeSuccessEnvelope(null);\n        }).bind(this));\n      }\n      [_cancel]() {\n        return async.async(typed_data.ByteData, (function* _cancel() {\n          if (this.subscription == null) {\n            return this.codec.encodeErrorEnvelope({code: \"error\", message: \"No active subscription to cancel.\"});\n          }\n          yield dart.nullCheck(this.subscription).cancel();\n          this.subscription = null;\n          return this.codec.encodeSuccessEnvelope(null);\n        }).bind(this));\n      }\n    }\n    (_EventChannelHandler.new = function(name, codec, controller, messenger) {\n      this[subscription] = null;\n      this.name = name;\n      this.codec = codec;\n      this.controller = controller;\n      this.messenger = messenger;\n      if (!(messenger !== null)) dart.assertFailed(null, I[3], 111, 14, \"messenger != null\");\n      ;\n    }).prototype = _EventChannelHandler.prototype;\n    dart.addTypeTests(_EventChannelHandler);\n    _EventChannelHandler.prototype[_is__EventChannelHandler_default] = true;\n    dart.addTypeCaches(_EventChannelHandler);\n    dart.setMethodSignature(_EventChannelHandler, () => ({\n      __proto__: dart.getMethods(_EventChannelHandler.__proto__),\n      handle: dart.fnType(dart.nullable(async.Future$(typed_data.ByteData)), [dart.nullable(typed_data.ByteData)]),\n      [_listen]: dart.fnType(async.Future$(typed_data.ByteData), []),\n      [_cancel]: dart.fnType(async.Future$(typed_data.ByteData), [])\n    }));\n    dart.setLibraryUri(_EventChannelHandler, I[4]);\n    dart.setFieldSignature(_EventChannelHandler, () => ({\n      __proto__: dart.getFields(_EventChannelHandler.__proto__),\n      name: dart.finalFieldType(core.String),\n      codec: dart.finalFieldType(message_codec.MethodCodec),\n      controller: dart.finalFieldType(async.StreamController$(T)),\n      messenger: dart.finalFieldType(binary_messenger.BinaryMessenger),\n      subscription: dart.fieldType(dart.nullable(async.StreamSubscription$(T)))\n    }));\n    return _EventChannelHandler;\n  });\n  plugin_event_channel._EventChannelHandler = plugin_event_channel._EventChannelHandler$();\n  dart.addTypeTests(plugin_event_channel._EventChannelHandler, _is__EventChannelHandler_default);\n  var _handlers = dart.privateName(plugin_registry, \"_handlers\");\n  plugin_registry.Registrar = class Registrar extends binary_messenger.BinaryMessenger {\n    static ['_#new#tearOff'](binaryMessenger = null) {\n      return new plugin_registry.Registrar.new(binaryMessenger);\n    }\n    registerMessageHandler() {\n      ui.webOnlySetPluginHandler(dart.bind(this, 'handleFrameworkMessage'));\n    }\n    handlePlatformMessage(channel, data, callback) {\n      return this.handleFrameworkMessage(channel, data, callback);\n    }\n    handleFrameworkMessage(channel, data, callback) {\n      return async.async(dart.void, (function* handleFrameworkMessage() {\n        let response = null;\n        try {\n          let handler = this[_handlers][$_get](channel);\n          if (handler != null) {\n            response = (yield handler(data));\n          }\n        } catch (e) {\n          let exception = dart.getThrown(e);\n          let stack = dart.stackTrace(e);\n          if (core.Object.is(exception)) {\n            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: \"flutter web plugins\", context: new assertions.ErrorDescription.new(\"during a framework-to-plugin message\")}));\n          } else\n            throw e;\n        } finally {\n          if (callback != null) {\n            callback(response);\n          }\n        }\n      }).bind(this));\n    }\n    get messenger() {\n      return this;\n    }\n    send(channel, message) {\n      let completer = T$.CompleterOfByteDataN().new();\n      ui.channelBuffers.push(channel, message, dart.fn(reply => {\n        try {\n          completer.complete(reply);\n        } catch (e) {\n          let exception = dart.getThrown(e);\n          let stack = dart.stackTrace(e);\n          if (core.Object.is(exception)) {\n            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: \"flutter web plugins\", context: new assertions.ErrorDescription.new(\"during a plugin-to-framework message\")}));\n          } else\n            throw e;\n        }\n      }, T$.ByteDataNTovoid()));\n      return completer.future;\n    }\n    setMessageHandler(channel, handler) {\n      if (handler == null)\n        this[_handlers][$remove](channel);\n      else\n        this[_handlers][$_set](channel, handler);\n    }\n  };\n  (plugin_registry.Registrar.new = function(binaryMessenger = null) {\n    this[_handlers] = new (T$.IdentityMapOfString$ByteDataNToFutureNOfByteDataN()).new();\n    plugin_registry.Registrar.__proto__.new.call(this);\n    ;\n  }).prototype = plugin_registry.Registrar.prototype;\n  dart.addTypeTests(plugin_registry.Registrar);\n  dart.addTypeCaches(plugin_registry.Registrar);\n  dart.setMethodSignature(plugin_registry.Registrar, () => ({\n    __proto__: dart.getMethods(plugin_registry.Registrar.__proto__),\n    registerMessageHandler: dart.fnType(dart.void, []),\n    handlePlatformMessage: dart.fnType(async.Future$(dart.void), [core.String, dart.nullable(typed_data.ByteData), dart.nullable(dart.fnType(dart.void, [dart.nullable(typed_data.ByteData)]))]),\n    handleFrameworkMessage: dart.fnType(async.Future$(dart.void), [core.String, dart.nullable(typed_data.ByteData), dart.nullable(dart.fnType(dart.void, [dart.nullable(typed_data.ByteData)]))]),\n    send: dart.fnType(async.Future$(dart.nullable(typed_data.ByteData)), [core.String, dart.nullable(typed_data.ByteData)]),\n    setMessageHandler: dart.fnType(dart.void, [core.String, dart.nullable(dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [dart.nullable(typed_data.ByteData)]))])\n  }));\n  dart.setGetterSignature(plugin_registry.Registrar, () => ({\n    __proto__: dart.getGetters(plugin_registry.Registrar.__proto__),\n    messenger: binary_messenger.BinaryMessenger\n  }));\n  dart.setLibraryUri(plugin_registry.Registrar, I[5]);\n  dart.setFieldSignature(plugin_registry.Registrar, () => ({\n    __proto__: dart.getFields(plugin_registry.Registrar.__proto__),\n    [_handlers]: dart.finalFieldType(core.Map$(core.String, dart.fnType(dart.nullable(async.Future$(dart.nullable(typed_data.ByteData))), [dart.nullable(typed_data.ByteData)])))\n  }));\n  plugin_registry.PluginRegistry = class PluginRegistry extends plugin_registry.Registrar {\n    static ['_#new#tearOff'](binaryMessenger = null) {\n      return new plugin_registry.PluginRegistry.new(binaryMessenger);\n    }\n    registrarFor(key) {\n      return this;\n    }\n  };\n  (plugin_registry.PluginRegistry.new = function(binaryMessenger = null) {\n    plugin_registry.PluginRegistry.__proto__.new.call(this);\n    ;\n  }).prototype = plugin_registry.PluginRegistry.prototype;\n  dart.addTypeTests(plugin_registry.PluginRegistry);\n  dart.addTypeCaches(plugin_registry.PluginRegistry);\n  dart.setMethodSignature(plugin_registry.PluginRegistry, () => ({\n    __proto__: dart.getMethods(plugin_registry.PluginRegistry.__proto__),\n    registrarFor: dart.fnType(plugin_registry.Registrar, [core.Type])\n  }));\n  dart.setLibraryUri(plugin_registry.PluginRegistry, I[5]);\n  dart.copyProperties(plugin_registry, {\n    get webPluginRegistry() {\n      return plugin_registry.PluginRegistry.as(plugin_registry.webPluginRegistrar);\n    },\n    get pluginBinaryMessenger() {\n      return plugin_registry.webPluginRegistrar;\n    }\n  });\n  dart.defineLazy(plugin_registry, {\n    /*plugin_registry.webPluginRegistrar*/get webPluginRegistrar() {\n      return new plugin_registry.PluginRegistry.new();\n    }\n  }, false);\n  var __ImagePickerPlugin__target = dart.privateName(image_picker_for_web, \"_#ImagePickerPlugin#_target\");\n  var __ImagePickerPlugin__imageResizer = dart.privateName(image_picker_for_web, \"_#ImagePickerPlugin#_imageResizer\");\n  var _overrides = dart.privateName(image_picker_for_web, \"_overrides\");\n  var _imageResizer = dart.privateName(image_picker_for_web, \"_imageResizer\");\n  var _target = dart.privateName(image_picker_for_web, \"_target\");\n  var _ensureInitialized = dart.privateName(image_picker_for_web, \"_ensureInitialized\");\n  var _hasOverrides = dart.privateName(image_picker_for_web, \"_hasOverrides\");\n  var _Enum__name = dart.privateName(core, \"_Enum._name\");\n  var _Enum_index = dart.privateName(core, \"_Enum.index\");\n  var _injectAndActivate = dart.privateName(image_picker_for_web, \"_injectAndActivate\");\n  var _getSelectedFile = dart.privateName(image_picker_for_web, \"_getSelectedFile\");\n  var _getSelectedXFiles = dart.privateName(image_picker_for_web, \"_getSelectedXFiles\");\n  var _getFilesFromInput = dart.privateName(image_picker_for_web, \"_getFilesFromInput\");\n  var _handleOnChangeEvent = dart.privateName(image_picker_for_web, \"_handleOnChangeEvent\");\n  var _instanceToken = dart.privateName(plugin_platform_interface, \"_instanceToken\");\n  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {\n    static verify(instance, token) {\n      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});\n    }\n    static verifyToken(instance, token) {\n      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});\n    }\n    static _verify(instance, token, opts) {\n      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;\n      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {\n        let assertionsEnabled = false;\n        if (!dart.fn(() => {\n          assertionsEnabled = true;\n          return true;\n        }, T$.VoidTobool())()) dart.assertFailed(null, I[6], 81, 14, \"() {\\n        assertionsEnabled = true;\\n        return true;\\n      }()\");\n        if (!assertionsEnabled) {\n          dart.throw(new core.AssertionError.new(\"`MockPlatformInterfaceMixin` is not intended for use in release builds.\"));\n        }\n        return;\n      }\n      if (preventConstObject && instance[_instanceToken] === (C[9] || CT.C9)) {\n        dart.throw(new core.AssertionError.new(\"`const Object()` cannot be used as the token.\"));\n      }\n      if (token !== instance[_instanceToken]) {\n        dart.throw(new core.AssertionError.new(\"Platform interfaces must not be implemented with `implements`\"));\n      }\n    }\n  };\n  (plugin_platform_interface.PlatformInterface.new = function(opts) {\n    let token = opts && 'token' in opts ? opts.token : null;\n    this[_instanceToken] = token;\n    ;\n  }).prototype = plugin_platform_interface.PlatformInterface.prototype;\n  dart.addTypeTests(plugin_platform_interface.PlatformInterface);\n  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);\n  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);\n  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[7]);\n  dart.setFieldSignature(plugin_platform_interface.PlatformInterface, () => ({\n    __proto__: dart.getFields(plugin_platform_interface.PlatformInterface.__proto__),\n    [_instanceToken]: dart.finalFieldType(dart.nullable(core.Object))\n  }));\n  image_picker_platform.ImagePickerPlatform = class ImagePickerPlatform extends plugin_platform_interface.PlatformInterface {\n    static get instance() {\n      return image_picker_platform.ImagePickerPlatform._instance;\n    }\n    static set instance(instance) {\n      plugin_platform_interface.PlatformInterface.verify(instance, image_picker_platform.ImagePickerPlatform._token);\n      image_picker_platform.ImagePickerPlatform._instance = instance;\n    }\n    pickImage(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      dart.throw(new core.UnimplementedError.new(\"pickImage() has not been implemented.\"));\n    }\n    pickMultiImage(opts) {\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      dart.throw(new core.UnimplementedError.new(\"pickMultiImage() has not been implemented.\"));\n    }\n    pickVideo(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;\n      dart.throw(new core.UnimplementedError.new(\"pickVideo() has not been implemented.\"));\n    }\n    retrieveLostData() {\n      dart.throw(new core.UnimplementedError.new(\"retrieveLostData() has not been implemented.\"));\n    }\n    getImage(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      dart.throw(new core.UnimplementedError.new(\"getImage() has not been implemented.\"));\n    }\n    getMultiImage(opts) {\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      dart.throw(new core.UnimplementedError.new(\"getMultiImage() has not been implemented.\"));\n    }\n    getVideo(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;\n      dart.throw(new core.UnimplementedError.new(\"getVideo() has not been implemented.\"));\n    }\n    getLostData() {\n      dart.throw(new core.UnimplementedError.new(\"getLostData() has not been implemented.\"));\n    }\n  };\n  (image_picker_platform.ImagePickerPlatform.new = function() {\n    image_picker_platform.ImagePickerPlatform.__proto__.new.call(this, {token: image_picker_platform.ImagePickerPlatform._token});\n    ;\n  }).prototype = image_picker_platform.ImagePickerPlatform.prototype;\n  dart.addTypeTests(image_picker_platform.ImagePickerPlatform);\n  dart.addTypeCaches(image_picker_platform.ImagePickerPlatform);\n  dart.setMethodSignature(image_picker_platform.ImagePickerPlatform, () => ({\n    __proto__: dart.getMethods(image_picker_platform.ImagePickerPlatform.__proto__),\n    pickImage: dart.fnType(async.Future$(dart.nullable(html$.PickedFile)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),\n    pickMultiImage: dart.fnType(async.Future$(dart.nullable(core.List$(html$.PickedFile))), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double)}, {}),\n    pickVideo: dart.fnType(async.Future$(dart.nullable(html$.PickedFile)), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),\n    retrieveLostData: dart.fnType(async.Future$(lost_data.LostData), []),\n    getImage: dart.fnType(async.Future$(dart.nullable(html$0.XFile)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),\n    getMultiImage: dart.fnType(async.Future$(dart.nullable(core.List$(html$0.XFile))), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double)}, {}),\n    getVideo: dart.fnType(async.Future$(dart.nullable(html$0.XFile)), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),\n    getLostData: dart.fnType(async.Future$(lost_data_response.LostDataResponse), [])\n  }));\n  dart.setStaticGetterSignature(image_picker_platform.ImagePickerPlatform, () => ['instance']);\n  dart.setStaticSetterSignature(image_picker_platform.ImagePickerPlatform, () => ['instance']);\n  dart.setLibraryUri(image_picker_platform.ImagePickerPlatform, I[8]);\n  dart.setStaticFieldSignature(image_picker_platform.ImagePickerPlatform, () => ['_token', '_instance']);\n  dart.defineLazy(image_picker_platform.ImagePickerPlatform, {\n    /*image_picker_platform.ImagePickerPlatform._token*/get _token() {\n      return new core.Object.new();\n    },\n    /*image_picker_platform.ImagePickerPlatform._instance*/get _instance() {\n      return new method_channel_image_picker.MethodChannelImagePicker.new();\n    },\n    set _instance(_) {}\n  }, false);\n  image_picker_for_web.ImagePickerPlugin = class ImagePickerPlugin extends image_picker_platform.ImagePickerPlatform {\n    get [_hasOverrides]() {\n      return this[_overrides] != null;\n    }\n    get [_target]() {\n      let t6;\n      t6 = this[__ImagePickerPlugin__target];\n      return t6 == null ? dart.throw(new _internal.LateError.fieldNI(\"_target\")) : t6;\n    }\n    set [_target](t6) {\n      this[__ImagePickerPlugin__target] = t6;\n    }\n    get [_imageResizer]() {\n      let t7;\n      t7 = this[__ImagePickerPlugin__imageResizer];\n      return t7 == null ? dart.throw(new _internal.LateError.fieldNI(\"_imageResizer\")) : t7;\n    }\n    set [_imageResizer](t7) {\n      this[__ImagePickerPlugin__imageResizer] = t7;\n    }\n    static ['_#new#tearOff'](opts) {\n      let overrides = opts && 'overrides' in opts ? opts.overrides : null;\n      let imageResizer = opts && 'imageResizer' in opts ? opts.imageResizer : null;\n      return new image_picker_for_web.ImagePickerPlugin.new({overrides: overrides, imageResizer: imageResizer});\n    }\n    static registerWith(registrar) {\n      image_picker_platform.ImagePickerPlatform.instance = new image_picker_for_web.ImagePickerPlugin.new();\n    }\n    pickImage(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      let capture = this.computeCaptureAttribute(source, preferredCameraDevice);\n      return this.pickFile({accept: image_picker_for_web._kAcceptImageMimeType, capture: capture});\n    }\n    pickVideo(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;\n      let capture = this.computeCaptureAttribute(source, preferredCameraDevice);\n      return this.pickFile({accept: image_picker_for_web._kAcceptVideoMimeType, capture: capture});\n    }\n    pickFile(opts) {\n      let accept = opts && 'accept' in opts ? opts.accept : null;\n      let capture = opts && 'capture' in opts ? opts.capture : null;\n      let input = html.FileUploadInputElement.as(this.createInputElement(accept, capture));\n      this[_injectAndActivate](input);\n      return this[_getSelectedFile](input);\n    }\n    getImage(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      return async.async(html$0.XFile, (function* getImage() {\n        let capture = this.computeCaptureAttribute(source, preferredCameraDevice);\n        let files = (yield this.getFiles({accept: image_picker_for_web._kAcceptImageMimeType, capture: capture}));\n        return this[_imageResizer].resizeImageIfNeeded(files[$first], maxWidth, maxHeight, imageQuality);\n      }).bind(this));\n    }\n    getVideo(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;\n      return async.async(html$0.XFile, (function* getVideo() {\n        let capture = this.computeCaptureAttribute(source, preferredCameraDevice);\n        let files = (yield this.getFiles({accept: image_picker_for_web._kAcceptVideoMimeType, capture: capture}));\n        return files[$first];\n      }).bind(this));\n    }\n    getMultiImage(opts) {\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      return async.async(T$.ListOfXFile(), (function* getMultiImage() {\n        let images = (yield this.getFiles({accept: image_picker_for_web._kAcceptImageMimeType, multiple: true}));\n        let resized = images[$map](T$.FutureOfXFile(), dart.fn(image => this[_imageResizer].resizeImageIfNeeded(image, maxWidth, maxHeight, imageQuality), T$.XFileToFutureOfXFile()));\n        return async.Future.wait(html$0.XFile, resized);\n      }).bind(this));\n    }\n    getFiles(opts) {\n      let accept = opts && 'accept' in opts ? opts.accept : null;\n      let capture = opts && 'capture' in opts ? opts.capture : null;\n      let multiple = opts && 'multiple' in opts ? opts.multiple : false;\n      let input = html.FileUploadInputElement.as(this.createInputElement(accept, capture, {multiple: multiple}));\n      this[_injectAndActivate](input);\n      return this[_getSelectedXFiles](input);\n    }\n    computeCaptureAttribute(source, device) {\n      if (source === image_source.ImageSource.camera) {\n        return device === camera_device.CameraDevice.front ? \"user\" : \"environment\";\n      }\n      return null;\n    }\n    [_getFilesFromInput](input) {\n      let t9, t8;\n      if (this[_hasOverrides]) {\n        t8 = dart.nullCheck(this[_overrides]);\n        t9 = input;\n        return t8.getMultipleFilesFromInput(t9);\n      }\n      return input[$files];\n    }\n    [_handleOnChangeEvent](event) {\n      let input = html.FileUploadInputElement.as(event[$target]);\n      return this[_getFilesFromInput](input);\n    }\n    [_getSelectedFile](input) {\n      let _completer = T$.CompleterOfPickedFile().new();\n      input[$onChange].first.then(core.Null, dart.fn(event => {\n        let files = this[_handleOnChangeEvent](event);\n        if (!_completer.isCompleted && files != null) {\n          _completer.complete(new html$.PickedFile.new(html.Url.createObjectUrl(files[$first])));\n        }\n      }, T$.EventToNull()));\n      input[$onError].first.then(core.Null, dart.fn(event => {\n        if (!_completer.isCompleted) {\n          _completer.completeError(event);\n        }\n      }, T$.EventToNull()));\n      return _completer.future;\n    }\n    [_getSelectedXFiles](input) {\n      let _completer = T$.CompleterOfListOfXFile().new();\n      input[$onChange].first.then(core.Null, dart.fn(event => {\n        let files = this[_handleOnChangeEvent](event);\n        if (!_completer.isCompleted && files != null) {\n          _completer.complete(files[$map](html$0.XFile, dart.fn(file => {\n            let t8;\n            return new html$0.XFile.new(html.Url.createObjectUrl(file), {name: file[$name], length: file[$size], lastModified: new core.DateTime.fromMillisecondsSinceEpoch((t8 = file.lastModified, t8 == null ? new core.DateTime.now().millisecondsSinceEpoch : t8)), mimeType: file[$type]});\n          }, T$.FileToXFile()))[$toList]());\n        }\n      }, T$.EventToNull()));\n      input[$onError].first.then(core.Null, dart.fn(event => {\n        if (!_completer.isCompleted) {\n          _completer.completeError(event);\n        }\n      }, T$.EventToNull()));\n      return _completer.future;\n    }\n    [_ensureInitialized](id) {\n      let t8;\n      let target = html.querySelector(\"#\" + id);\n      if (target == null) {\n        let targetElement = (t8 = html.Element.tag(\"flt-image-picker-inputs\"), (() => {\n          t8[$id] = id;\n          return t8;\n        })());\n        dart.nullCheck(html.querySelector(\"body\"))[$children][$add](targetElement);\n        target = targetElement;\n      }\n      return target;\n    }\n    createInputElement(accept, capture, opts) {\n      let t10, t9, t8, t8$;\n      let multiple = opts && 'multiple' in opts ? opts.multiple : false;\n      if (this[_hasOverrides]) {\n        t8 = dart.nullCheck(this[_overrides]);\n        t9 = accept;\n        t10 = capture;\n        return t8.createInputElement(t9, t10);\n      }\n      let element = (t8$ = html.FileUploadInputElement.new(), (() => {\n        t8$[$accept] = accept;\n        t8$[$multiple] = multiple;\n        return t8$;\n      })());\n      if (capture != null) {\n        element[$setAttribute](\"capture\", capture);\n      }\n      return element;\n    }\n    [_injectAndActivate](element) {\n      this[_target][$children][$clear]();\n      this[_target][$children][$add](element);\n      element.click();\n    }\n  };\n  (image_picker_for_web.ImagePickerPlugin.new = function(opts) {\n    let t6;\n    let overrides = opts && 'overrides' in opts ? opts.overrides : null;\n    let imageResizer = opts && 'imageResizer' in opts ? opts.imageResizer : null;\n    this[__ImagePickerPlugin__target] = null;\n    this[__ImagePickerPlugin__imageResizer] = null;\n    this[_overrides] = overrides;\n    image_picker_for_web.ImagePickerPlugin.__proto__.new.call(this);\n    this[_imageResizer] = (t6 = imageResizer, t6 == null ? new image_resizer.ImageResizer.new() : t6);\n    this[_target] = this[_ensureInitialized](image_picker_for_web._kImagePickerInputsDomId);\n  }).prototype = image_picker_for_web.ImagePickerPlugin.prototype;\n  dart.addTypeTests(image_picker_for_web.ImagePickerPlugin);\n  dart.addTypeCaches(image_picker_for_web.ImagePickerPlugin);\n  dart.setMethodSignature(image_picker_for_web.ImagePickerPlugin, () => ({\n    __proto__: dart.getMethods(image_picker_for_web.ImagePickerPlugin.__proto__),\n    pickImage: dart.fnType(async.Future$(html$.PickedFile), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),\n    pickVideo: dart.fnType(async.Future$(html$.PickedFile), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),\n    pickFile: dart.fnType(async.Future$(html$.PickedFile), [], {accept: dart.nullable(core.String), capture: dart.nullable(core.String)}, {}),\n    getImage: dart.fnType(async.Future$(html$0.XFile), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),\n    getVideo: dart.fnType(async.Future$(html$0.XFile), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),\n    getMultiImage: dart.fnType(async.Future$(core.List$(html$0.XFile)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double)}, {}),\n    getFiles: dart.fnType(async.Future$(core.List$(html$0.XFile)), [], {accept: dart.nullable(core.String), capture: dart.nullable(core.String), multiple: core.bool}, {}),\n    computeCaptureAttribute: dart.fnType(dart.nullable(core.String), [image_source.ImageSource, camera_device.CameraDevice]),\n    [_getFilesFromInput]: dart.fnType(dart.nullable(core.List$(html.File)), [html.FileUploadInputElement]),\n    [_handleOnChangeEvent]: dart.fnType(dart.nullable(core.List$(html.File)), [html.Event]),\n    [_getSelectedFile]: dart.fnType(async.Future$(html$.PickedFile), [html.FileUploadInputElement]),\n    [_getSelectedXFiles]: dart.fnType(async.Future$(core.List$(html$0.XFile)), [html.FileUploadInputElement]),\n    [_ensureInitialized]: dart.fnType(html.Element, [core.String]),\n    createInputElement: dart.fnType(html.Element, [dart.nullable(core.String), dart.nullable(core.String)], {multiple: core.bool}, {}),\n    [_injectAndActivate]: dart.fnType(dart.void, [html.Element])\n  }));\n  dart.setStaticMethodSignature(image_picker_for_web.ImagePickerPlugin, () => ['registerWith']);\n  dart.setGetterSignature(image_picker_for_web.ImagePickerPlugin, () => ({\n    __proto__: dart.getGetters(image_picker_for_web.ImagePickerPlugin.__proto__),\n    [_hasOverrides]: core.bool,\n    [_target]: html.Element,\n    [_imageResizer]: image_resizer.ImageResizer\n  }));\n  dart.setSetterSignature(image_picker_for_web.ImagePickerPlugin, () => ({\n    __proto__: dart.getSetters(image_picker_for_web.ImagePickerPlugin.__proto__),\n    [_target]: html.Element,\n    [_imageResizer]: image_resizer.ImageResizer\n  }));\n  dart.setLibraryUri(image_picker_for_web.ImagePickerPlugin, I[9]);\n  dart.setFieldSignature(image_picker_for_web.ImagePickerPlugin, () => ({\n    __proto__: dart.getFields(image_picker_for_web.ImagePickerPlugin.__proto__),\n    [_overrides]: dart.finalFieldType(dart.nullable(image_picker_for_web.ImagePickerPluginTestOverrides)),\n    [__ImagePickerPlugin__target]: dart.fieldType(dart.nullable(html.Element)),\n    [__ImagePickerPlugin__imageResizer]: dart.fieldType(dart.nullable(image_resizer.ImageResizer))\n  }));\n  var __ImagePickerPluginTestOverrides_createInputElement = dart.privateName(image_picker_for_web, \"_#ImagePickerPluginTestOverrides#createInputElement\");\n  var __ImagePickerPluginTestOverrides_getMultipleFilesFromInput = dart.privateName(image_picker_for_web, \"_#ImagePickerPluginTestOverrides#getMultipleFilesFromInput\");\n  image_picker_for_web.ImagePickerPluginTestOverrides = class ImagePickerPluginTestOverrides extends core.Object {\n    get createInputElement() {\n      let t8;\n      t8 = this[__ImagePickerPluginTestOverrides_createInputElement];\n      return t8 == null ? dart.throw(new _internal.LateError.fieldNI(\"createInputElement\")) : t8;\n    }\n    set createInputElement(t8) {\n      this[__ImagePickerPluginTestOverrides_createInputElement] = t8;\n    }\n    get getMultipleFilesFromInput() {\n      let t9;\n      t9 = this[__ImagePickerPluginTestOverrides_getMultipleFilesFromInput];\n      return t9 == null ? dart.throw(new _internal.LateError.fieldNI(\"getMultipleFilesFromInput\")) : t9;\n    }\n    set getMultipleFilesFromInput(t9) {\n      this[__ImagePickerPluginTestOverrides_getMultipleFilesFromInput] = t9;\n    }\n    static ['_#new#tearOff']() {\n      return new image_picker_for_web.ImagePickerPluginTestOverrides.new();\n    }\n  };\n  (image_picker_for_web.ImagePickerPluginTestOverrides.new = function() {\n    this[__ImagePickerPluginTestOverrides_createInputElement] = null;\n    this[__ImagePickerPluginTestOverrides_getMultipleFilesFromInput] = null;\n    ;\n  }).prototype = image_picker_for_web.ImagePickerPluginTestOverrides.prototype;\n  dart.addTypeTests(image_picker_for_web.ImagePickerPluginTestOverrides);\n  dart.addTypeCaches(image_picker_for_web.ImagePickerPluginTestOverrides);\n  dart.setGetterSignature(image_picker_for_web.ImagePickerPluginTestOverrides, () => ({\n    __proto__: dart.getGetters(image_picker_for_web.ImagePickerPluginTestOverrides.__proto__),\n    createInputElement: dart.fnType(html.Element, [dart.nullable(core.String), dart.nullable(core.String)]),\n    getMultipleFilesFromInput: dart.fnType(core.List$(html.File), [dart.nullable(html.Element)])\n  }));\n  dart.setSetterSignature(image_picker_for_web.ImagePickerPluginTestOverrides, () => ({\n    __proto__: dart.getSetters(image_picker_for_web.ImagePickerPluginTestOverrides.__proto__),\n    createInputElement: dart.fnType(html.Element, [dart.nullable(core.String), dart.nullable(core.String)]),\n    getMultipleFilesFromInput: dart.fnType(core.List$(html.File), [dart.nullable(html.Element)])\n  }));\n  dart.setLibraryUri(image_picker_for_web.ImagePickerPluginTestOverrides, I[9]);\n  dart.setFieldSignature(image_picker_for_web.ImagePickerPluginTestOverrides, () => ({\n    __proto__: dart.getFields(image_picker_for_web.ImagePickerPluginTestOverrides.__proto__),\n    [__ImagePickerPluginTestOverrides_createInputElement]: dart.fieldType(dart.nullable(dart.fnType(html.Element, [dart.nullable(core.String), dart.nullable(core.String)]))),\n    [__ImagePickerPluginTestOverrides_getMultipleFilesFromInput]: dart.fieldType(dart.nullable(dart.fnType(core.List$(html.File), [dart.nullable(html.Element)])))\n  }));\n  dart.defineLazy(image_picker_for_web, {\n    /*image_picker_for_web._kImagePickerInputsDomId*/get _kImagePickerInputsDomId() {\n      return \"__image_picker_web-file-input\";\n    },\n    /*image_picker_for_web._kAcceptImageMimeType*/get _kAcceptImageMimeType() {\n      return \"image/*\";\n    },\n    /*image_picker_for_web._kAcceptVideoMimeType*/get _kAcceptVideoMimeType() {\n      return \"video/3gpp,video/x-m4v,video/mp4,video/*\";\n    }\n  }, false);\n  var _isSafari = dart.privateName(url_launcher_web, \"_isSafari\");\n  var _window = dart.privateName(url_launcher_web, \"_window\");\n  url_launcher_platform_interface.UrlLauncherPlatform = class UrlLauncherPlatform extends plugin_platform_interface.PlatformInterface {\n    static get instance() {\n      return url_launcher_platform_interface.UrlLauncherPlatform._instance;\n    }\n    static set instance(instance) {\n      plugin_platform_interface.PlatformInterface.verify(instance, url_launcher_platform_interface.UrlLauncherPlatform._token);\n      url_launcher_platform_interface.UrlLauncherPlatform._instance = instance;\n    }\n    canLaunch(url) {\n      dart.throw(new core.UnimplementedError.new(\"canLaunch() has not been implemented.\"));\n    }\n    launch(url, opts) {\n      let useSafariVC = opts && 'useSafariVC' in opts ? opts.useSafariVC : null;\n      let useWebView = opts && 'useWebView' in opts ? opts.useWebView : null;\n      let enableJavaScript = opts && 'enableJavaScript' in opts ? opts.enableJavaScript : null;\n      let enableDomStorage = opts && 'enableDomStorage' in opts ? opts.enableDomStorage : null;\n      let universalLinksOnly = opts && 'universalLinksOnly' in opts ? opts.universalLinksOnly : null;\n      let headers = opts && 'headers' in opts ? opts.headers : null;\n      let webOnlyWindowName = opts && 'webOnlyWindowName' in opts ? opts.webOnlyWindowName : null;\n      dart.throw(new core.UnimplementedError.new(\"launch() has not been implemented.\"));\n    }\n    closeWebView() {\n      dart.throw(new core.UnimplementedError.new(\"closeWebView() has not been implemented.\"));\n    }\n  };\n  (url_launcher_platform_interface.UrlLauncherPlatform.new = function() {\n    url_launcher_platform_interface.UrlLauncherPlatform.__proto__.new.call(this, {token: url_launcher_platform_interface.UrlLauncherPlatform._token});\n    ;\n  }).prototype = url_launcher_platform_interface.UrlLauncherPlatform.prototype;\n  dart.addTypeTests(url_launcher_platform_interface.UrlLauncherPlatform);\n  dart.addTypeCaches(url_launcher_platform_interface.UrlLauncherPlatform);\n  dart.setMethodSignature(url_launcher_platform_interface.UrlLauncherPlatform, () => ({\n    __proto__: dart.getMethods(url_launcher_platform_interface.UrlLauncherPlatform.__proto__),\n    canLaunch: dart.fnType(async.Future$(core.bool), [core.String]),\n    launch: dart.fnType(async.Future$(core.bool), [core.String], {webOnlyWindowName: dart.nullable(core.String)}, {enableDomStorage: core.bool, enableJavaScript: core.bool, headers: core.Map$(core.String, core.String), universalLinksOnly: core.bool, useSafariVC: core.bool, useWebView: core.bool}),\n    closeWebView: dart.fnType(async.Future$(dart.void), [])\n  }));\n  dart.setStaticGetterSignature(url_launcher_platform_interface.UrlLauncherPlatform, () => ['instance']);\n  dart.setStaticSetterSignature(url_launcher_platform_interface.UrlLauncherPlatform, () => ['instance']);\n  dart.setLibraryUri(url_launcher_platform_interface.UrlLauncherPlatform, I[10]);\n  dart.setStaticFieldSignature(url_launcher_platform_interface.UrlLauncherPlatform, () => ['_token', '_instance']);\n  dart.defineLazy(url_launcher_platform_interface.UrlLauncherPlatform, {\n    /*url_launcher_platform_interface.UrlLauncherPlatform._token*/get _token() {\n      return new core.Object.new();\n    },\n    /*url_launcher_platform_interface.UrlLauncherPlatform._instance*/get _instance() {\n      return new method_channel_url_launcher.MethodChannelUrlLauncher.new();\n    },\n    set _instance(_) {}\n  }, false);\n  url_launcher_web.UrlLauncherPlugin = class UrlLauncherPlugin extends url_launcher_platform_interface.UrlLauncherPlatform {\n    static ['_#new#tearOff'](opts) {\n      let debugWindow = opts && 'debugWindow' in opts ? opts.debugWindow : null;\n      return new url_launcher_web.UrlLauncherPlugin.new({debugWindow: debugWindow});\n    }\n    static registerWith(registrar) {\n      url_launcher_platform_interface.UrlLauncherPlatform.instance = new url_launcher_web.UrlLauncherPlugin.new();\n      ui.platformViewRegistry.registerViewFactory(\"__url_launcher::link\", link$.linkViewFactory);\n    }\n    get linkDelegate() {\n      return dart.fn(linkInfo => new link$.WebLinkDelegate.new(linkInfo), T$.LinkInfoToWebLinkDelegate());\n    }\n    openNewWindow(url, opts) {\n      let t10;\n      let webOnlyWindowName = opts && 'webOnlyWindowName' in opts ? opts.webOnlyWindowName : null;\n      let target = (t10 = webOnlyWindowName, t10 == null ? this[_isSafari] && url_launcher_web._isSafariTargetTopScheme(url) ? \"_top\" : \"\" : t10);\n      return this[_window][$open](url, target);\n    }\n    canLaunch(url) {\n      return T$.FutureOfbool().value(url_launcher_web.UrlLauncherPlugin._supportedSchemes.contains(url_launcher_web._getUrlScheme(url)));\n    }\n    launch(url, opts) {\n      let useSafariVC = opts && 'useSafariVC' in opts ? opts.useSafariVC : false;\n      let useWebView = opts && 'useWebView' in opts ? opts.useWebView : false;\n      let enableJavaScript = opts && 'enableJavaScript' in opts ? opts.enableJavaScript : false;\n      let enableDomStorage = opts && 'enableDomStorage' in opts ? opts.enableDomStorage : false;\n      let universalLinksOnly = opts && 'universalLinksOnly' in opts ? opts.universalLinksOnly : false;\n      let headers = opts && 'headers' in opts ? opts.headers : C[10] || CT.C10;\n      let webOnlyWindowName = opts && 'webOnlyWindowName' in opts ? opts.webOnlyWindowName : null;\n      return T$.FutureOfbool().value(this.openNewWindow(url, {webOnlyWindowName: webOnlyWindowName}) !== null);\n    }\n  };\n  (url_launcher_web.UrlLauncherPlugin.new = function(opts) {\n    let t10;\n    let debugWindow = opts && 'debugWindow' in opts ? opts.debugWindow : null;\n    this[_isSafari] = false;\n    this[_window] = (t10 = debugWindow, t10 == null ? html.window : t10);\n    url_launcher_web.UrlLauncherPlugin.__proto__.new.call(this);\n    this[_isSafari] = browser.navigatorIsSafari(this[_window][$navigator]);\n  }).prototype = url_launcher_web.UrlLauncherPlugin.prototype;\n  dart.addTypeTests(url_launcher_web.UrlLauncherPlugin);\n  dart.addTypeCaches(url_launcher_web.UrlLauncherPlugin);\n  dart.setMethodSignature(url_launcher_web.UrlLauncherPlugin, () => ({\n    __proto__: dart.getMethods(url_launcher_web.UrlLauncherPlugin.__proto__),\n    openNewWindow: dart.fnType(html.WindowBase, [core.String], {webOnlyWindowName: dart.nullable(core.String)}, {}),\n    launch: dart.fnType(async.Future$(core.bool), [core.String], {enableDomStorage: core.bool, enableJavaScript: core.bool, headers: core.Map$(core.String, core.String), universalLinksOnly: core.bool, useSafariVC: core.bool, useWebView: core.bool, webOnlyWindowName: dart.nullable(core.String)}, {})\n  }));\n  dart.setStaticMethodSignature(url_launcher_web.UrlLauncherPlugin, () => ['registerWith']);\n  dart.setGetterSignature(url_launcher_web.UrlLauncherPlugin, () => ({\n    __proto__: dart.getGetters(url_launcher_web.UrlLauncherPlugin.__proto__),\n    linkDelegate: dart.fnType(framework.Widget, [link.LinkInfo])\n  }));\n  dart.setLibraryUri(url_launcher_web.UrlLauncherPlugin, I[11]);\n  dart.setFieldSignature(url_launcher_web.UrlLauncherPlugin, () => ({\n    __proto__: dart.getFields(url_launcher_web.UrlLauncherPlugin.__proto__),\n    [_window]: dart.finalFieldType(html.Window),\n    [_isSafari]: dart.fieldType(core.bool)\n  }));\n  dart.setStaticFieldSignature(url_launcher_web.UrlLauncherPlugin, () => ['_supportedSchemes']);\n  dart.defineLazy(url_launcher_web.UrlLauncherPlugin, {\n    /*url_launcher_web.UrlLauncherPlugin._supportedSchemes*/get _supportedSchemes() {\n      return T$.LinkedHashSetOfString().from([\"http\", \"https\"]).union(url_launcher_web._safariTargetTopSchemes);\n    }\n  }, false);\n  url_launcher_web._getUrlScheme = function _getUrlScheme(url) {\n    let t10;\n    t10 = core.Uri.tryParse(url);\n    return t10 == null ? null : t10.scheme;\n  };\n  url_launcher_web._isSafariTargetTopScheme = function _isSafariTargetTopScheme(url) {\n    return url_launcher_web._safariTargetTopSchemes.contains(url_launcher_web._getUrlScheme(url));\n  };\n  dart.defineLazy(url_launcher_web, {\n    /*url_launcher_web._safariTargetTopSchemes*/get _safariTargetTopSchemes() {\n      return C[11] || CT.C11;\n    }\n  }, false);\n  var name$0 = dart.privateName(js$, \"JS.name\");\n  js$.JS = class JS extends core.Object {\n    get name() {\n      return this[name$0];\n    }\n    set name(value) {\n      super.name = value;\n    }\n    static ['_#new#tearOff'](name = null) {\n      return new js$.JS.new(name);\n    }\n  };\n  (js$.JS.new = function(name = null) {\n    this[name$0] = name;\n    ;\n  }).prototype = js$.JS.prototype;\n  dart.addTypeTests(js$.JS);\n  dart.addTypeCaches(js$.JS);\n  dart.setLibraryUri(js$.JS, I[12]);\n  dart.setFieldSignature(js$.JS, () => ({\n    __proto__: dart.getFields(js$.JS.__proto__),\n    name: dart.finalFieldType(dart.nullable(core.String))\n  }));\n  js$._Anonymous = class _Anonymous extends core.Object {\n    static ['_#new#tearOff']() {\n      return new js$._Anonymous.new();\n    }\n  };\n  (js$._Anonymous.new = function() {\n    ;\n  }).prototype = js$._Anonymous.prototype;\n  dart.addTypeTests(js$._Anonymous);\n  dart.addTypeCaches(js$._Anonymous);\n  dart.setLibraryUri(js$._Anonymous, I[12]);\n  dart.defineLazy(js$, {\n    /*js$.anonymous*/get anonymous() {\n      return C[12] || CT.C12;\n    }\n  }, false);\n  image_resizer.ImageResizer = class ImageResizer extends core.Object {\n    resizeImageIfNeeded(file, maxWidth, maxHeight, imageQuality) {\n      return async.async(html$0.XFile, (function* resizeImageIfNeeded() {\n        if (!image_resizer_utils.imageResizeNeeded(maxWidth, maxHeight, imageQuality) || file.mimeType === \"image/gif\") {\n          return file;\n        }\n        try {\n          let imageElement = (yield this.loadImage(file.path));\n          let canvas = this.resizeImageElement(imageElement, maxWidth, maxHeight);\n          let resizedImage = (yield this.writeCanvasToFile(file, canvas, imageQuality));\n          html.Url.revokeObjectUrl(file.path);\n          return resizedImage;\n        } catch (e$) {\n          let e = dart.getThrown(e$);\n          if (core.Object.is(e)) {\n            return file;\n          } else\n            throw e$;\n        }\n      }).bind(this));\n    }\n    loadImage(blobUrl) {\n      let imageLoadCompleter = T$.CompleterOfImageElement().new();\n      let imageElement = html.ImageElement.new();\n      imageElement.src = blobUrl;\n      imageElement[$onLoad].listen(dart.fn(event => {\n        imageLoadCompleter.complete(imageElement);\n      }, T$.EventTovoid()));\n      imageElement[$onError].listen(dart.fn(event => {\n        let exception = \"Error while loading image.\";\n        imageElement[$remove]();\n        imageLoadCompleter.completeError(exception);\n      }, T$.EventTovoid()));\n      return imageLoadCompleter.future;\n    }\n    resizeImageElement(source, maxWidth, maxHeight) {\n      let newImageSize = image_resizer_utils.calculateSizeOfDownScaledImage(new ui.Size.new(dart.nullCheck(source.width)[$toDouble](), dart.nullCheck(source.height)[$toDouble]()), maxWidth, maxHeight);\n      let canvas = html.CanvasElement.new();\n      canvas.width = newImageSize.width[$toInt]();\n      canvas.height = newImageSize.height[$toInt]();\n      let context = canvas[$context2D];\n      if (maxHeight == null && maxWidth == null) {\n        context.drawImage(source, 0, 0);\n      } else {\n        context[$drawImageScaled](source, 0, 0, dart.nullCheck(canvas.width), dart.nullCheck(canvas.height));\n      }\n      return canvas;\n    }\n    writeCanvasToFile(originalFile, canvas, imageQuality) {\n      return async.async(html$0.XFile, function* writeCanvasToFile() {\n        let t11;\n        let calculatedImageQuality = math.min(core.int, (t11 = imageQuality, t11 == null ? 100 : t11), 100) / 100.0;\n        let blob = (yield canvas[$toBlob](originalFile.mimeType, calculatedImageQuality));\n        return new html$0.XFile.new(html.Url.createObjectUrlFromBlob(blob), {mimeType: originalFile.mimeType, name: \"scaled_\" + originalFile.name, lastModified: new core.DateTime.now(), length: blob[$size]});\n      });\n    }\n    static ['_#new#tearOff']() {\n      return new image_resizer.ImageResizer.new();\n    }\n  };\n  (image_resizer.ImageResizer.new = function() {\n    ;\n  }).prototype = image_resizer.ImageResizer.prototype;\n  dart.addTypeTests(image_resizer.ImageResizer);\n  dart.addTypeCaches(image_resizer.ImageResizer);\n  dart.setMethodSignature(image_resizer.ImageResizer, () => ({\n    __proto__: dart.getMethods(image_resizer.ImageResizer.__proto__),\n    resizeImageIfNeeded: dart.fnType(async.Future$(html$0.XFile), [html$0.XFile, dart.nullable(core.double), dart.nullable(core.double), dart.nullable(core.int)]),\n    loadImage: dart.fnType(async.Future$(html.ImageElement), [core.String]),\n    resizeImageElement: dart.fnType(html.CanvasElement, [html.ImageElement, dart.nullable(core.double), dart.nullable(core.double)]),\n    writeCanvasToFile: dart.fnType(async.Future$(html$0.XFile), [html$0.XFile, html.CanvasElement, dart.nullable(core.int)])\n  }));\n  dart.setLibraryUri(image_resizer.ImageResizer, I[13]);\n  var debugLabel$ = dart.privateName(link, \"LinkTarget.debugLabel\");\n  link.LinkTarget = class LinkTarget extends core.Object {\n    get debugLabel() {\n      return this[debugLabel$];\n    }\n    set debugLabel(value) {\n      super.debugLabel = value;\n    }\n    static ['_#_#tearOff'](opts) {\n      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;\n      return new link.LinkTarget.__({debugLabel: debugLabel});\n    }\n  };\n  (link.LinkTarget.__ = function(opts) {\n    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;\n    this[debugLabel$] = debugLabel;\n    ;\n  }).prototype = link.LinkTarget.prototype;\n  dart.addTypeTests(link.LinkTarget);\n  dart.addTypeCaches(link.LinkTarget);\n  dart.setLibraryUri(link.LinkTarget, I[14]);\n  dart.setFieldSignature(link.LinkTarget, () => ({\n    __proto__: dart.getFields(link.LinkTarget.__proto__),\n    debugLabel: dart.finalFieldType(core.String)\n  }));\n  dart.setStaticFieldSignature(link.LinkTarget, () => ['defaultTarget', 'self', 'blank']);\n  dart.defineLazy(link.LinkTarget, {\n    /*link.LinkTarget.defaultTarget*/get defaultTarget() {\n      return C[13] || CT.C13;\n    },\n    /*link.LinkTarget.self*/get self() {\n      return C[14] || CT.C14;\n    },\n    /*link.LinkTarget.blank*/get blank() {\n      return C[15] || CT.C15;\n    }\n  }, false);\n  link.LinkInfo = class LinkInfo extends core.Object {};\n  (link.LinkInfo.new = function() {\n    ;\n  }).prototype = link.LinkInfo.prototype;\n  dart.addTypeTests(link.LinkInfo);\n  dart.addTypeCaches(link.LinkInfo);\n  dart.setLibraryUri(link.LinkInfo, I[14]);\n  link.pushRouteNameToFramework = function pushRouteNameToFramework(_, routeName) {\n    let t11, t11$;\n    let completer = T$.CompleterOfByteData().new();\n    system_navigator.SystemNavigator.routeInformationUpdated({location: routeName});\n    let sendMessage = (t11$ = (t11 = link._ambiguate(binding.WidgetsBinding, binding.WidgetsBinding.instance), t11 == null ? null : t11.platformDispatcher.onPlatformMessage), t11$ == null ? dart.bind(ui.channelBuffers, 'push') : t11$);\n    sendMessage(\"flutter/navigation\", link._codec.encodeMethodCall(new message_codec.MethodCall.new(\"pushRouteInformation\", new _js_helper.LinkedMap.from([\"location\", routeName, \"state\", null]))), T$.FutureOrNOfByteDataTovoid().as(dart.bind(completer, 'complete')));\n    return completer.future;\n  };\n  link._ambiguate = function _ambiguate(T, value) {\n    return value;\n  };\n  dart.defineLazy(link, {\n    /*link._codec*/get _codec() {\n      return C[16] || CT.C16;\n    }\n  }, false);\n  var link$0 = dart.privateName(link$, \"WebLinkDelegate.link\");\n  link$.WebLinkDelegate = class WebLinkDelegate extends framework.StatefulWidget {\n    get link() {\n      return this[link$0];\n    }\n    set link(value) {\n      super.link = value;\n    }\n    static ['_#new#tearOff'](link) {\n      return new link$.WebLinkDelegate.new(link);\n    }\n    createState() {\n      return new link$.WebLinkDelegateState.new();\n    }\n  };\n  (link$.WebLinkDelegate.new = function(link) {\n    this[link$0] = link;\n    link$.WebLinkDelegate.__proto__.new.call(this);\n    ;\n  }).prototype = link$.WebLinkDelegate.prototype;\n  dart.addTypeTests(link$.WebLinkDelegate);\n  dart.addTypeCaches(link$.WebLinkDelegate);\n  dart.setMethodSignature(link$.WebLinkDelegate, () => ({\n    __proto__: dart.getMethods(link$.WebLinkDelegate.__proto__),\n    createState: dart.fnType(link$.WebLinkDelegateState, [])\n  }));\n  dart.setLibraryUri(link$.WebLinkDelegate, I[15]);\n  dart.setFieldSignature(link$.WebLinkDelegate, () => ({\n    __proto__: dart.getFields(link$.WebLinkDelegate.__proto__),\n    link: dart.finalFieldType(link.LinkInfo)\n  }));\n  var __WebLinkDelegateState__controller = dart.privateName(link$, \"_#WebLinkDelegateState#_controller\");\n  var _controller = dart.privateName(link$, \"_controller\");\n  var _followLink = dart.privateName(link$, \"_followLink\");\n  link$.WebLinkDelegateState = class WebLinkDelegateState extends framework.State$(link$.WebLinkDelegate) {\n    get [_controller]() {\n      let t11;\n      t11 = this[__WebLinkDelegateState__controller];\n      return t11 == null ? dart.throw(new _internal.LateError.fieldNI(\"_controller\")) : t11;\n    }\n    set [_controller](t11) {\n      this[__WebLinkDelegateState__controller] = t11;\n    }\n    didUpdateWidget(oldWidget) {\n      link$.WebLinkDelegate.as(oldWidget);\n      super.didUpdateWidget(oldWidget);\n      if (!dart.equals(this.widget.link.uri, oldWidget.link.uri)) {\n        this[_controller].setUri(this.widget.link.uri);\n      }\n      if (!this.widget.link.target[$_equals](oldWidget.link.target)) {\n        this[_controller].setTarget(this.widget.link.target);\n      }\n    }\n    [_followLink]() {\n      link$.LinkViewController.registerHitTest(this[_controller]);\n      return T$.FutureOfvoid().value();\n    }\n    build(context) {\n      let t14, t13, t12;\n      return new basic.Stack.new({fit: stack.StackFit.passthrough, children: T$.JSArrayOfWidget().of([(t12 = this.widget.link, t13 = context, t14 = this.widget.link.isDisabled ? null : dart.bind(this, _followLink), t12.builder(t13, t14)), new basic.Positioned.fill({child: new platform_view.PlatformViewLink.new({viewType: \"__url_launcher::link\", onCreatePlatformView: dart.fn(params => {\n                let t12;\n                this[_controller] = link$.LinkViewController.fromParams(params, context);\n                t12 = this[_controller];\n                return (() => {\n                  t12.setUri(this.widget.link.uri);\n                  t12.setTarget(this.widget.link.target);\n                  return t12;\n                })();\n              }, T$.PlatformViewCreationParamsToLinkViewController()), surfaceFactory: dart.fn((context, controller) => new platform_view.PlatformViewSurface.new({controller: controller, gestureRecognizers: C[17] || CT.C17, hitTestBehavior: platform_view$.PlatformViewHitTestBehavior.transparent}), T$.BuildContextAndPlatformViewControllerToPlatformViewSurface())})})])});\n    }\n    static ['_#new#tearOff']() {\n      return new link$.WebLinkDelegateState.new();\n    }\n  };\n  (link$.WebLinkDelegateState.new = function() {\n    this[__WebLinkDelegateState__controller] = null;\n    link$.WebLinkDelegateState.__proto__.new.call(this);\n    ;\n  }).prototype = link$.WebLinkDelegateState.prototype;\n  dart.addTypeTests(link$.WebLinkDelegateState);\n  dart.addTypeCaches(link$.WebLinkDelegateState);\n  dart.setMethodSignature(link$.WebLinkDelegateState, () => ({\n    __proto__: dart.getMethods(link$.WebLinkDelegateState.__proto__),\n    [_followLink]: dart.fnType(async.Future$(dart.void), []),\n    build: dart.fnType(framework.Widget, [framework.BuildContext])\n  }));\n  dart.setGetterSignature(link$.WebLinkDelegateState, () => ({\n    __proto__: dart.getGetters(link$.WebLinkDelegateState.__proto__),\n    [_controller]: link$.LinkViewController\n  }));\n  dart.setSetterSignature(link$.WebLinkDelegateState, () => ({\n    __proto__: dart.getSetters(link$.WebLinkDelegateState.__proto__),\n    [_controller]: link$.LinkViewController\n  }));\n  dart.setLibraryUri(link$.WebLinkDelegateState, I[15]);\n  dart.setFieldSignature(link$.WebLinkDelegateState, () => ({\n    __proto__: dart.getFields(link$.WebLinkDelegateState.__proto__),\n    [__WebLinkDelegateState__controller]: dart.fieldType(dart.nullable(link$.LinkViewController))\n  }));\n  var viewId$ = dart.privateName(link$, \"LinkViewController.viewId\");\n  var context$ = dart.privateName(link$, \"LinkViewController.context\");\n  var __LinkViewController__element = dart.privateName(link$, \"_#LinkViewController#_element\");\n  var _uri = dart.privateName(link$, \"_uri\");\n  var _initialize = dart.privateName(link$, \"_initialize\");\n  var _element = dart.privateName(link$, \"_element\");\n  var _onDomClick = dart.privateName(link$, \"_onDomClick\");\n  var _isInitialized = dart.privateName(link$, \"_isInitialized\");\n  var _getHtmlTarget = dart.privateName(link$, \"_getHtmlTarget\");\n  link$.LinkViewController = class LinkViewController extends platform_views.PlatformViewController {\n    get viewId() {\n      return this[viewId$];\n    }\n    set viewId(value) {\n      super.viewId = value;\n    }\n    get context() {\n      return this[context$];\n    }\n    set context(value) {\n      super.context = value;\n    }\n    static ['_#new#tearOff'](viewId, context) {\n      return new link$.LinkViewController.new(viewId, context);\n    }\n    static fromParams(params, context) {\n      let viewId = params.id;\n      let controller = new link$.LinkViewController.new(viewId, context);\n      controller[_initialize]().then(core.Null, dart.fn(_ => {\n        let t13, t12;\n        t12 = params;\n        t13 = viewId;\n        t12.onPlatformViewCreated(t13);\n      }, T$.voidToNull()));\n      return controller;\n    }\n    static ['_#fromParams#tearOff'](params, context) {\n      return link$.LinkViewController.fromParams(params, context);\n    }\n    static _viewFactory(viewId) {\n      return dart.nullCheck(link$.LinkViewController._instances[$_get](viewId))[_element];\n    }\n    static get _clickSubscription() {\n      let t12;\n      t12 = link$.LinkViewController['_#_clickSubscription'];\n      return t12 == null ? dart.throw(new _internal.LateError.fieldNI(\"_clickSubscription\")) : t12;\n    }\n    static set _clickSubscription(t12) {\n      link$.LinkViewController['_#_clickSubscription'] = t12;\n    }\n    static _onGlobalClick(event) {\n      let t13;\n      let viewId = link$.getViewIdFromTarget(event);\n      t13 = link$.LinkViewController._instances[$_get](viewId);\n      t13 == null ? null : t13[_onDomClick](event);\n      link$.LinkViewController.unregisterHitTest();\n    }\n    static registerHitTest(controller) {\n      link$.LinkViewController._hitTestedViewId = controller.viewId;\n    }\n    static unregisterHitTest() {\n      link$.LinkViewController._hitTestedViewId = null;\n    }\n    get [_element]() {\n      let t13;\n      t13 = this[__LinkViewController__element];\n      return t13 == null ? dart.throw(new _internal.LateError.fieldNI(\"_element\")) : t13;\n    }\n    set [_element](t13) {\n      this[__LinkViewController__element] = t13;\n    }\n    get [_isInitialized]() {\n      return this[_element] !== null;\n    }\n    [_initialize]() {\n      return async.async(dart.void, (function* _initialize() {\n        let t14;\n        this[_element] = html.Element.tag(\"a\");\n        js_util._setPropertyUnchecked(core.int, this[_element], \"__url_launcher::link::viewId\", this.viewId);\n        t14 = this[_element][$style];\n        (() => {\n          t14[$opacity] = \"0\";\n          t14[$display] = \"block\";\n          t14[$width] = \"100%\";\n          t14[$height] = \"100%\";\n          t14[$cursor] = \"unset\";\n          return t14;\n        })();\n        this[_element][$setAttribute](\"rel\", \"noreferrer noopener\");\n        let args = new (T$.IdentityMapOfString$dynamic()).from([\"id\", this.viewId, \"viewType\", \"__url_launcher::link\"]);\n        yield system_channels.SystemChannels.platform_views.invokeMethod(dart.void, \"create\", args);\n      }).bind(this));\n    }\n    [_onDomClick](event) {\n      let isHitTested = link$.LinkViewController._hitTestedViewId === this.viewId;\n      if (!isHitTested) {\n        event.preventDefault();\n        return;\n      }\n      if (this[_uri] != null && dart.nullCheck(this[_uri]).hasScheme) {\n        return;\n      }\n      event.preventDefault();\n      let routeName = dart.toString(this[_uri]);\n      link.pushRouteNameToFramework(this.context, routeName);\n    }\n    setUri(uri) {\n      if (!this[_isInitialized]) dart.assertFailed(null, I[16], 219, 12, \"_isInitialized\");\n      this[_uri] = uri;\n      if (uri == null) {\n        this[_element][$removeAttribute](\"href\");\n      } else {\n        this[_element][$setAttribute](\"href\", dart.toString(uri));\n      }\n    }\n    setTarget(target) {\n      if (!this[_isInitialized]) dart.assertFailed(null, I[16], 230, 12, \"_isInitialized\");\n      this[_element][$setAttribute](\"target\", this[_getHtmlTarget](target));\n    }\n    [_getHtmlTarget](target) {\n      switch (target) {\n        case C[13] || CT.C13:\n        case C[14] || CT.C14:\n        {\n          return \"_self\";\n        }\n        case C[15] || CT.C15:\n        {\n          return \"_blank\";\n        }\n        default:\n        {\n          dart.throw(core.Exception.new(\"Unknown LinkTarget value \" + dart.str(target) + \".\"));\n        }\n      }\n    }\n    clearFocus() {\n      return async.async(dart.void, function* clearFocus() {\n      });\n    }\n    dispatchPointerEvent(event) {\n      return async.async(dart.void, function* dispatchPointerEvent() {\n      });\n    }\n    dispose() {\n      return async.async(dart.void, (function* dispose() {\n        if (this[_isInitialized]) {\n          if (!dart.equals(link$.LinkViewController._instances[$_get](this.viewId), this)) dart.assertFailed(null, I[16], 261, 14, \"_instances[viewId] == this\");\n          link$.LinkViewController._instances[$remove](this.viewId);\n          if (link$.LinkViewController._instances[$isEmpty]) {\n            yield link$.LinkViewController._clickSubscription.cancel();\n          }\n          yield system_channels.SystemChannels.platform_views.invokeMethod(dart.void, \"dispose\", this.viewId);\n        }\n      }).bind(this));\n    }\n  };\n  (link$.LinkViewController.new = function(viewId, context) {\n    this[__LinkViewController__element] = null;\n    this[_uri] = null;\n    this[viewId$] = viewId;\n    this[context$] = context;\n    if (link$.LinkViewController._instances[$isEmpty]) {\n      link$.LinkViewController._clickSubscription = html.window[$onClick].listen(C[18] || CT.C18);\n    }\n    link$.LinkViewController._instances[$_set](this.viewId, this);\n  }).prototype = link$.LinkViewController.prototype;\n  dart.addTypeTests(link$.LinkViewController);\n  dart.addTypeCaches(link$.LinkViewController);\n  dart.setMethodSignature(link$.LinkViewController, () => ({\n    __proto__: dart.getMethods(link$.LinkViewController.__proto__),\n    [_initialize]: dart.fnType(async.Future$(dart.void), []),\n    [_onDomClick]: dart.fnType(dart.void, [html.MouseEvent]),\n    setUri: dart.fnType(dart.void, [dart.nullable(core.Uri)]),\n    setTarget: dart.fnType(dart.void, [link.LinkTarget]),\n    [_getHtmlTarget]: dart.fnType(core.String, [link.LinkTarget]),\n    clearFocus: dart.fnType(async.Future$(dart.void), []),\n    dispatchPointerEvent: dart.fnType(async.Future$(dart.void), [events.PointerEvent]),\n    dispose: dart.fnType(async.Future$(dart.void), [])\n  }));\n  dart.setStaticMethodSignature(link$.LinkViewController, () => ['fromParams', '_viewFactory', '_onGlobalClick', 'registerHitTest', 'unregisterHitTest']);\n  dart.setGetterSignature(link$.LinkViewController, () => ({\n    __proto__: dart.getGetters(link$.LinkViewController.__proto__),\n    [_element]: html.Element,\n    [_isInitialized]: core.bool\n  }));\n  dart.setSetterSignature(link$.LinkViewController, () => ({\n    __proto__: dart.getSetters(link$.LinkViewController.__proto__),\n    [_element]: html.Element\n  }));\n  dart.setStaticGetterSignature(link$.LinkViewController, () => ['_clickSubscription']);\n  dart.setStaticSetterSignature(link$.LinkViewController, () => ['_clickSubscription']);\n  dart.setLibraryUri(link$.LinkViewController, I[15]);\n  dart.setFieldSignature(link$.LinkViewController, () => ({\n    __proto__: dart.getFields(link$.LinkViewController.__proto__),\n    viewId: dart.finalFieldType(core.int),\n    context: dart.finalFieldType(framework.BuildContext),\n    [__LinkViewController__element]: dart.fieldType(dart.nullable(html.Element)),\n    [_uri]: dart.fieldType(dart.nullable(core.Uri))\n  }));\n  dart.setStaticFieldSignature(link$.LinkViewController, () => ['_instances', '_hitTestedViewId', '_#_clickSubscription']);\n  dart.defineLazy(link$.LinkViewController, {\n    /*link$.LinkViewController._instances*/get _instances() {\n      return new (T$.IdentityMapOfint$LinkViewController()).new();\n    },\n    /*link$.LinkViewController._hitTestedViewId*/get _hitTestedViewId() {\n      return null;\n    },\n    set _hitTestedViewId(_) {},\n    /*link$.LinkViewController['_#_clickSubscription']*/get ['_#_clickSubscription']() {\n      return null;\n    },\n    set ['_#_clickSubscription'](_) {}\n  }, false);\n  link$.getViewIdFromTarget = function getViewIdFromTarget(event) {\n    let linkElement = link$.getLinkElementFromTarget(event);\n    if (linkElement != null) {\n      return js_util.getProperty(T$.intN(), linkElement, \"__url_launcher::link::viewId\");\n    }\n    return null;\n  };\n  link$.getLinkElementFromTarget = function getLinkElementFromTarget(event) {\n    let target = event[$target];\n    if (target != null && html.Element.is(target)) {\n      if (link$.isLinkElement(target)) {\n        return target;\n      }\n      if (target[$shadowRoot] != null) {\n        let child = dart.nullCheck(target[$shadowRoot]).lastChild;\n        if (child != null && html.Element.is(child) && link$.isLinkElement(child)) {\n          return child;\n        }\n      }\n    }\n    return null;\n  };\n  link$.isLinkElement = function isLinkElement(element) {\n    return element != null && element[$tagName] === \"A\" && js_util.hasProperty(element, \"__url_launcher::link::viewId\");\n  };\n  dart.copyProperties(link$, {\n    get linkViewFactory() {\n      return C[19] || CT.C19;\n    }\n  });\n  dart.defineLazy(link$, {\n    /*link$.linkViewType*/get linkViewType() {\n      return \"__url_launcher::link\";\n    },\n    /*link$.linkViewIdProperty*/get linkViewIdProperty() {\n      return \"__url_launcher::link::viewId\";\n    }\n  }, false);\n  browser.navigatorIsSafari = function navigatorIsSafari(navigator) {\n    let vendor = navigator[$vendor];\n    let appVersion = navigator[$appVersion];\n    return vendor !== null && vendor[$contains](\"Apple\") && appVersion !== null && appVersion[$contains](\"Version\");\n  };\n  image_resizer_utils.imageResizeNeeded = function imageResizeNeeded(maxWidth, maxHeight, imageQuality) {\n    return imageQuality != null ? image_resizer_utils.isImageQualityValid(imageQuality) : maxWidth != null || maxHeight != null;\n  };\n  image_resizer_utils.isImageQualityValid = function isImageQualityValid(imageQuality) {\n    return imageQuality >= 0 && imageQuality <= 100;\n  };\n  image_resizer_utils.calculateSizeOfDownScaledImage = function calculateSizeOfDownScaledImage(imageSize, maxWidth, maxHeight) {\n    let widthFactor = maxWidth != null ? imageSize.width / dart.notNull(maxWidth) : 1.0;\n    let heightFactor = maxHeight != null ? imageSize.height / dart.notNull(maxHeight) : 1.0;\n    let resizeFactor = math.max(core.double, widthFactor, heightFactor);\n    return resizeFactor > 1 ? imageSize['~/'](resizeFactor) : imageSize;\n  };\n  dart.defineLazy(types, {\n    /*types.kTypeImage*/get kTypeImage() {\n      return \"image\";\n    },\n    /*types.kTypeVideo*/get kTypeVideo() {\n      return \"video\";\n    }\n  }, false);\n  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};\n  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {\n    ;\n  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;\n  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);\n  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);\n  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];\n  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[7]);\n  var linkDelegate = dart.privateName(method_channel_url_launcher, \"MethodChannelUrlLauncher.linkDelegate\");\n  method_channel_url_launcher.MethodChannelUrlLauncher = class MethodChannelUrlLauncher extends url_launcher_platform_interface.UrlLauncherPlatform {\n    get linkDelegate() {\n      return this[linkDelegate];\n    }\n    set linkDelegate(value) {\n      super.linkDelegate = value;\n    }\n    canLaunch(url) {\n      return method_channel_url_launcher._channel.invokeMethod(core.bool, \"canLaunch\", new (T$.IdentityMapOfString$Object()).from([\"url\", url])).then(core.bool, dart.fn(value => {\n        let t14;\n        t14 = value;\n        return t14 == null ? false : t14;\n      }, T$.boolNTobool()));\n    }\n    closeWebView() {\n      return method_channel_url_launcher._channel.invokeMethod(dart.void, \"closeWebView\");\n    }\n    launch(url, opts) {\n      let useSafariVC = opts && 'useSafariVC' in opts ? opts.useSafariVC : null;\n      let useWebView = opts && 'useWebView' in opts ? opts.useWebView : null;\n      let enableJavaScript = opts && 'enableJavaScript' in opts ? opts.enableJavaScript : null;\n      let enableDomStorage = opts && 'enableDomStorage' in opts ? opts.enableDomStorage : null;\n      let universalLinksOnly = opts && 'universalLinksOnly' in opts ? opts.universalLinksOnly : null;\n      let headers = opts && 'headers' in opts ? opts.headers : null;\n      let webOnlyWindowName = opts && 'webOnlyWindowName' in opts ? opts.webOnlyWindowName : null;\n      return method_channel_url_launcher._channel.invokeMethod(core.bool, \"launch\", new (T$.IdentityMapOfString$Object()).from([\"url\", url, \"useSafariVC\", useSafariVC, \"useWebView\", useWebView, \"enableJavaScript\", enableJavaScript, \"enableDomStorage\", enableDomStorage, \"universalLinksOnly\", universalLinksOnly, \"headers\", headers])).then(core.bool, dart.fn(value => {\n        let t14;\n        t14 = value;\n        return t14 == null ? false : t14;\n      }, T$.boolNTobool()));\n    }\n    static ['_#new#tearOff']() {\n      return new method_channel_url_launcher.MethodChannelUrlLauncher.new();\n    }\n  };\n  (method_channel_url_launcher.MethodChannelUrlLauncher.new = function() {\n    this[linkDelegate] = null;\n    method_channel_url_launcher.MethodChannelUrlLauncher.__proto__.new.call(this);\n    ;\n  }).prototype = method_channel_url_launcher.MethodChannelUrlLauncher.prototype;\n  dart.addTypeTests(method_channel_url_launcher.MethodChannelUrlLauncher);\n  dart.addTypeCaches(method_channel_url_launcher.MethodChannelUrlLauncher);\n  dart.setLibraryUri(method_channel_url_launcher.MethodChannelUrlLauncher, I[17]);\n  dart.setFieldSignature(method_channel_url_launcher.MethodChannelUrlLauncher, () => ({\n    __proto__: dart.getFields(method_channel_url_launcher.MethodChannelUrlLauncher.__proto__),\n    linkDelegate: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [link.LinkInfo])))\n  }));\n  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, \"MethodChannel._binaryMessenger\");\n  var MethodChannel_codec = dart.privateName(platform_channel, \"MethodChannel.codec\");\n  var MethodChannel_name = dart.privateName(platform_channel, \"MethodChannel.name\");\n  dart.defineLazy(method_channel_url_launcher, {\n    /*method_channel_url_launcher._channel*/get _channel() {\n      return C[20] || CT.C20;\n    }\n  }, false);\n  var _getImagePath = dart.privateName(method_channel_image_picker, \"_getImagePath\");\n  var _getMultiImagePath = dart.privateName(method_channel_image_picker, \"_getMultiImagePath\");\n  var _getVideoPath = dart.privateName(method_channel_image_picker, \"_getVideoPath\");\n  method_channel_image_picker.MethodChannelImagePicker = class MethodChannelImagePicker extends image_picker_platform.ImagePickerPlatform {\n    get channel() {\n      return method_channel_image_picker._channel;\n    }\n    pickImage(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      return async.async(T$.PickedFileN(), (function* pickImage() {\n        let path = (yield this[_getImagePath]({source: source, maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality, preferredCameraDevice: preferredCameraDevice}));\n        return path != null ? new html$.PickedFile.new(path) : null;\n      }).bind(this));\n    }\n    pickMultiImage(opts) {\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      return async.async(T$.ListNOfPickedFile(), (function* pickMultiImage() {\n        let paths = (yield this[_getMultiImagePath]({maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality}));\n        if (paths == null) return null;\n        return paths[$map](html$.PickedFile, dart.fn(path => new html$.PickedFile.new(core.String.as(path)), T$.dynamicToPickedFile()))[$toList]();\n      }).bind(this));\n    }\n    [_getMultiImagePath](opts) {\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      if (imageQuality != null && (dart.notNull(imageQuality) < 0 || dart.notNull(imageQuality) > 100)) {\n        dart.throw(new core.ArgumentError.value(imageQuality, \"imageQuality\", \"must be between 0 and 100\"));\n      }\n      if (maxWidth != null && dart.notNull(maxWidth) < 0) {\n        dart.throw(new core.ArgumentError.value(maxWidth, \"maxWidth\", \"cannot be negative\"));\n      }\n      if (maxHeight != null && dart.notNull(maxHeight) < 0) {\n        dart.throw(new core.ArgumentError.value(maxHeight, \"maxHeight\", \"cannot be negative\"));\n      }\n      return method_channel_image_picker._channel.invokeMethod(T$.ListN(), \"pickMultiImage\", new (T$.IdentityMapOfString$dynamic()).from([\"maxWidth\", maxWidth, \"maxHeight\", maxHeight, \"imageQuality\", imageQuality]));\n    }\n    [_getImagePath](opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      if (imageQuality != null && (dart.notNull(imageQuality) < 0 || dart.notNull(imageQuality) > 100)) {\n        dart.throw(new core.ArgumentError.value(imageQuality, \"imageQuality\", \"must be between 0 and 100\"));\n      }\n      if (maxWidth != null && dart.notNull(maxWidth) < 0) {\n        dart.throw(new core.ArgumentError.value(maxWidth, \"maxWidth\", \"cannot be negative\"));\n      }\n      if (maxHeight != null && dart.notNull(maxHeight) < 0) {\n        dart.throw(new core.ArgumentError.value(maxHeight, \"maxHeight\", \"cannot be negative\"));\n      }\n      return method_channel_image_picker._channel.invokeMethod(core.String, \"pickImage\", new (T$.IdentityMapOfString$dynamic()).from([\"source\", source.index, \"maxWidth\", maxWidth, \"maxHeight\", maxHeight, \"imageQuality\", imageQuality, \"cameraDevice\", preferredCameraDevice.index]));\n    }\n    pickVideo(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;\n      return async.async(T$.PickedFileN(), (function* pickVideo() {\n        let path = (yield this[_getVideoPath]({source: source, maxDuration: maxDuration, preferredCameraDevice: preferredCameraDevice}));\n        return path != null ? new html$.PickedFile.new(path) : null;\n      }).bind(this));\n    }\n    [_getVideoPath](opts) {\n      let t14;\n      let source = opts && 'source' in opts ? opts.source : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;\n      return method_channel_image_picker._channel.invokeMethod(core.String, \"pickVideo\", new (T$.IdentityMapOfString$dynamic()).from([\"source\", source.index, \"maxDuration\", (t14 = maxDuration, t14 == null ? null : t14.inSeconds), \"cameraDevice\", preferredCameraDevice.index]));\n    }\n    retrieveLostData() {\n      return async.async(lost_data.LostData, function* retrieveLostData() {\n        let result = (yield method_channel_image_picker._channel.invokeMapMethod(core.String, dart.dynamic, \"retrieve\"));\n        if (result == null) {\n          return new lost_data.LostData.empty();\n        }\n        if (!(result[$containsKey](\"path\") !== result[$containsKey](\"errorCode\"))) dart.assertFailed(null, I[18], 153, 12, \"result.containsKey('path') != result.containsKey('errorCode')\");\n        let type = T$.StringN().as(result[$_get](\"type\"));\n        if (!(type === \"image\" || type === \"video\")) dart.assertFailed(null, I[18], 156, 12, \"type == kTypeImage || type == kTypeVideo\");\n        let retrieveType = null;\n        if (type === \"image\") {\n          retrieveType = retrieve_type.RetrieveType.image;\n        } else if (type === \"video\") {\n          retrieveType = retrieve_type.RetrieveType.video;\n        }\n        let exception = null;\n        if (result[$containsKey](\"errorCode\")) {\n          exception = new message_codec.PlatformException.new({code: core.String.as(result[$_get](\"errorCode\")), message: T$.StringN().as(result[$_get](\"errorMessage\"))});\n        }\n        let path = T$.StringN().as(result[$_get](\"path\"));\n        return new lost_data.LostData.new({file: path != null ? new html$.PickedFile.new(path) : null, exception: exception, type: retrieveType});\n      });\n    }\n    getImage(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      return async.async(T$.XFileN(), (function* getImage() {\n        let path = (yield this[_getImagePath]({source: source, maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality, preferredCameraDevice: preferredCameraDevice}));\n        return path != null ? new html$0.XFile.new(path) : null;\n      }).bind(this));\n    }\n    getMultiImage(opts) {\n      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;\n      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;\n      let imageQuality = opts && 'imageQuality' in opts ? opts.imageQuality : null;\n      return async.async(T$.ListNOfXFile(), (function* getMultiImage() {\n        let paths = (yield this[_getMultiImagePath]({maxWidth: maxWidth, maxHeight: maxHeight, imageQuality: imageQuality}));\n        if (paths == null) return null;\n        return paths[$map](html$0.XFile, dart.fn(path => new html$0.XFile.new(core.String.as(path)), T$.dynamicToXFile()))[$toList]();\n      }).bind(this));\n    }\n    getVideo(opts) {\n      let source = opts && 'source' in opts ? opts.source : null;\n      let preferredCameraDevice = opts && 'preferredCameraDevice' in opts ? opts.preferredCameraDevice : C[8] || CT.C8;\n      let maxDuration = opts && 'maxDuration' in opts ? opts.maxDuration : null;\n      return async.async(T$.XFileN(), (function* getVideo() {\n        let path = (yield this[_getVideoPath]({source: source, maxDuration: maxDuration, preferredCameraDevice: preferredCameraDevice}));\n        return path != null ? new html$0.XFile.new(path) : null;\n      }).bind(this));\n    }\n    getLostData() {\n      return async.async(lost_data_response.LostDataResponse, function* getLostData() {\n        let pickedFileList = null;\n        let result = (yield method_channel_image_picker._channel.invokeMapMethod(core.String, dart.dynamic, \"retrieve\"));\n        if (result == null) {\n          return new lost_data_response.LostDataResponse.empty();\n        }\n        if (!(result[$containsKey](\"path\") !== result[$containsKey](\"errorCode\"))) dart.assertFailed(null, I[18], 239, 12, \"result.containsKey('path') != result.containsKey('errorCode')\");\n        let type = T$.StringN().as(result[$_get](\"type\"));\n        if (!(type === \"image\" || type === \"video\")) dart.assertFailed(null, I[18], 242, 12, \"type == kTypeImage || type == kTypeVideo\");\n        let retrieveType = null;\n        if (type === \"image\") {\n          retrieveType = retrieve_type.RetrieveType.image;\n        } else if (type === \"video\") {\n          retrieveType = retrieve_type.RetrieveType.video;\n        }\n        let exception = null;\n        if (result[$containsKey](\"errorCode\")) {\n          exception = new message_codec.PlatformException.new({code: core.String.as(result[$_get](\"errorCode\")), message: T$.StringN().as(result[$_get](\"errorMessage\"))});\n        }\n        let path = T$.StringN().as(result[$_get](\"path\"));\n        let pathList = result[$_get](\"pathList\");\n        if (pathList != null) {\n          pickedFileList = T$.JSArrayOfXFile().of([]);\n          for (let t14 of core.Iterable.as(pathList)) {\n            let path = core.String.as(t14);\n            pickedFileList[$add](new html$0.XFile.new(path));\n          }\n        }\n        return new lost_data_response.LostDataResponse.new({file: path != null ? new html$0.XFile.new(path) : null, exception: exception, type: retrieveType, files: pickedFileList});\n      });\n    }\n    static ['_#new#tearOff']() {\n      return new method_channel_image_picker.MethodChannelImagePicker.new();\n    }\n  };\n  (method_channel_image_picker.MethodChannelImagePicker.new = function() {\n    method_channel_image_picker.MethodChannelImagePicker.__proto__.new.call(this);\n    ;\n  }).prototype = method_channel_image_picker.MethodChannelImagePicker.prototype;\n  dart.addTypeTests(method_channel_image_picker.MethodChannelImagePicker);\n  dart.addTypeCaches(method_channel_image_picker.MethodChannelImagePicker);\n  dart.setMethodSignature(method_channel_image_picker.MethodChannelImagePicker, () => ({\n    __proto__: dart.getMethods(method_channel_image_picker.MethodChannelImagePicker.__proto__),\n    [_getMultiImagePath]: dart.fnType(async.Future$(dart.nullable(core.List)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double)}, {}),\n    [_getImagePath]: dart.fnType(async.Future$(dart.nullable(core.String)), [], {imageQuality: dart.nullable(core.int), maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource}),\n    [_getVideoPath]: dart.fnType(async.Future$(dart.nullable(core.String)), [], {maxDuration: dart.nullable(core.Duration), preferredCameraDevice: camera_device.CameraDevice}, {source: image_source.ImageSource})\n  }));\n  dart.setGetterSignature(method_channel_image_picker.MethodChannelImagePicker, () => ({\n    __proto__: dart.getGetters(method_channel_image_picker.MethodChannelImagePicker.__proto__),\n    channel: platform_channel.MethodChannel\n  }));\n  dart.setLibraryUri(method_channel_image_picker.MethodChannelImagePicker, I[19]);\n  dart.defineLazy(method_channel_image_picker, {\n    /*method_channel_image_picker._channel*/get _channel() {\n      return new platform_channel.MethodChannel.new(\"plugins.flutter.io/image_picker\");\n    }\n  }, false);\n  var _name = dart.privateName(core, \"_name\");\n  camera_device.CameraDevice = class CameraDevice extends core._Enum {\n    toString() {\n      return \"CameraDevice.\" + this[_name];\n    }\n  };\n  (camera_device.CameraDevice.new = function(index, name) {\n    camera_device.CameraDevice.__proto__.new.call(this, index, name);\n    ;\n  }).prototype = camera_device.CameraDevice.prototype;\n  dart.addTypeTests(camera_device.CameraDevice);\n  dart.addTypeCaches(camera_device.CameraDevice);\n  dart.setLibraryUri(camera_device.CameraDevice, I[20]);\n  dart.setStaticFieldSignature(camera_device.CameraDevice, () => ['values', 'rear', 'front']);\n  dart.defineExtensionMethods(camera_device.CameraDevice, ['toString']);\n  camera_device.CameraDevice.rear = C[8] || CT.C8;\n  camera_device.CameraDevice.front = C[21] || CT.C21;\n  camera_device.CameraDevice.values = C[22] || CT.C22;\n  image_source.ImageSource = class ImageSource extends core._Enum {\n    toString() {\n      return \"ImageSource.\" + this[_name];\n    }\n  };\n  (image_source.ImageSource.new = function(index, name) {\n    image_source.ImageSource.__proto__.new.call(this, index, name);\n    ;\n  }).prototype = image_source.ImageSource.prototype;\n  dart.addTypeTests(image_source.ImageSource);\n  dart.addTypeCaches(image_source.ImageSource);\n  dart.setLibraryUri(image_source.ImageSource, I[21]);\n  dart.setStaticFieldSignature(image_source.ImageSource, () => ['values', 'camera', 'gallery']);\n  dart.defineExtensionMethods(image_source.ImageSource, ['toString']);\n  image_source.ImageSource.camera = C[23] || CT.C23;\n  image_source.ImageSource.gallery = C[24] || CT.C24;\n  image_source.ImageSource.values = C[25] || CT.C25;\n  retrieve_type.RetrieveType = class RetrieveType extends core._Enum {\n    toString() {\n      return \"RetrieveType.\" + this[_name];\n    }\n  };\n  (retrieve_type.RetrieveType.new = function(index, name) {\n    retrieve_type.RetrieveType.__proto__.new.call(this, index, name);\n    ;\n  }).prototype = retrieve_type.RetrieveType.prototype;\n  dart.addTypeTests(retrieve_type.RetrieveType);\n  dart.addTypeCaches(retrieve_type.RetrieveType);\n  dart.setLibraryUri(retrieve_type.RetrieveType, I[22]);\n  dart.setStaticFieldSignature(retrieve_type.RetrieveType, () => ['values', 'image', 'video']);\n  dart.defineExtensionMethods(retrieve_type.RetrieveType, ['toString']);\n  retrieve_type.RetrieveType.image = C[26] || CT.C26;\n  retrieve_type.RetrieveType.video = C[27] || CT.C27;\n  retrieve_type.RetrieveType.values = C[28] || CT.C28;\n  var file$ = dart.privateName(lost_data_response, \"LostDataResponse.file\");\n  var exception$ = dart.privateName(lost_data_response, \"LostDataResponse.exception\");\n  var type$ = dart.privateName(lost_data_response, \"LostDataResponse.type\");\n  var files$ = dart.privateName(lost_data_response, \"LostDataResponse.files\");\n  var _empty = dart.privateName(lost_data_response, \"_empty\");\n  lost_data_response.LostDataResponse = class LostDataResponse extends core.Object {\n    get file() {\n      return this[file$];\n    }\n    set file(value) {\n      super.file = value;\n    }\n    get exception() {\n      return this[exception$];\n    }\n    set exception(value) {\n      super.exception = value;\n    }\n    get type() {\n      return this[type$];\n    }\n    set type(value) {\n      super.type = value;\n    }\n    get files() {\n      return this[files$];\n    }\n    set files(value) {\n      super.files = value;\n    }\n    static ['_#new#tearOff'](opts) {\n      let file = opts && 'file' in opts ? opts.file : null;\n      let exception = opts && 'exception' in opts ? opts.exception : null;\n      let type = opts && 'type' in opts ? opts.type : null;\n      let files = opts && 'files' in opts ? opts.files : null;\n      return new lost_data_response.LostDataResponse.new({file: file, exception: exception, type: type, files: files});\n    }\n    static ['_#empty#tearOff']() {\n      return new lost_data_response.LostDataResponse.empty();\n    }\n    get isEmpty() {\n      return this[_empty];\n    }\n  };\n  (lost_data_response.LostDataResponse.new = function(opts) {\n    let file = opts && 'file' in opts ? opts.file : null;\n    let exception = opts && 'exception' in opts ? opts.exception : null;\n    let type = opts && 'type' in opts ? opts.type : null;\n    let files = opts && 'files' in opts ? opts.files : null;\n    this[_empty] = false;\n    this[file$] = file;\n    this[exception$] = exception;\n    this[type$] = type;\n    this[files$] = files;\n    ;\n  }).prototype = lost_data_response.LostDataResponse.prototype;\n  (lost_data_response.LostDataResponse.empty = function() {\n    this[_empty] = false;\n    this[file$] = null;\n    this[exception$] = null;\n    this[type$] = null;\n    this[_empty] = true;\n    this[files$] = null;\n    ;\n  }).prototype = lost_data_response.LostDataResponse.prototype;\n  dart.addTypeTests(lost_data_response.LostDataResponse);\n  dart.addTypeCaches(lost_data_response.LostDataResponse);\n  dart.setGetterSignature(lost_data_response.LostDataResponse, () => ({\n    __proto__: dart.getGetters(lost_data_response.LostDataResponse.__proto__),\n    isEmpty: core.bool\n  }));\n  dart.setLibraryUri(lost_data_response.LostDataResponse, I[23]);\n  dart.setFieldSignature(lost_data_response.LostDataResponse, () => ({\n    __proto__: dart.getFields(lost_data_response.LostDataResponse.__proto__),\n    file: dart.finalFieldType(dart.nullable(html$0.XFile)),\n    exception: dart.finalFieldType(dart.nullable(message_codec.PlatformException)),\n    type: dart.finalFieldType(dart.nullable(retrieve_type.RetrieveType)),\n    [_empty]: dart.fieldType(core.bool),\n    files: dart.finalFieldType(dart.nullable(core.List$(html$0.XFile)))\n  }));\n  var file$0 = dart.privateName(lost_data, \"LostData.file\");\n  var exception$0 = dart.privateName(lost_data, \"LostData.exception\");\n  var type$0 = dart.privateName(lost_data, \"LostData.type\");\n  var _empty$ = dart.privateName(lost_data, \"_empty\");\n  lost_data.LostData = class LostData extends core.Object {\n    get file() {\n      return this[file$0];\n    }\n    set file(value) {\n      super.file = value;\n    }\n    get exception() {\n      return this[exception$0];\n    }\n    set exception(value) {\n      super.exception = value;\n    }\n    get type() {\n      return this[type$0];\n    }\n    set type(value) {\n      super.type = value;\n    }\n    static ['_#new#tearOff'](opts) {\n      let file = opts && 'file' in opts ? opts.file : null;\n      let exception = opts && 'exception' in opts ? opts.exception : null;\n      let type = opts && 'type' in opts ? opts.type : null;\n      return new lost_data.LostData.new({file: file, exception: exception, type: type});\n    }\n    static ['_#empty#tearOff']() {\n      return new lost_data.LostData.empty();\n    }\n    get isEmpty() {\n      return this[_empty$];\n    }\n  };\n  (lost_data.LostData.new = function(opts) {\n    let file = opts && 'file' in opts ? opts.file : null;\n    let exception = opts && 'exception' in opts ? opts.exception : null;\n    let type = opts && 'type' in opts ? opts.type : null;\n    this[_empty$] = false;\n    this[file$0] = file;\n    this[exception$0] = exception;\n    this[type$0] = type;\n    ;\n  }).prototype = lost_data.LostData.prototype;\n  (lost_data.LostData.empty = function() {\n    this[_empty$] = false;\n    this[file$0] = null;\n    this[exception$0] = null;\n    this[type$0] = null;\n    this[_empty$] = true;\n    ;\n  }).prototype = lost_data.LostData.prototype;\n  dart.addTypeTests(lost_data.LostData);\n  dart.addTypeCaches(lost_data.LostData);\n  dart.setGetterSignature(lost_data.LostData, () => ({\n    __proto__: dart.getGetters(lost_data.LostData.__proto__),\n    isEmpty: core.bool\n  }));\n  dart.setLibraryUri(lost_data.LostData, I[24]);\n  dart.setFieldSignature(lost_data.LostData, () => ({\n    __proto__: dart.getFields(lost_data.LostData.__proto__),\n    file: dart.finalFieldType(dart.nullable(html$.PickedFile)),\n    exception: dart.finalFieldType(dart.nullable(message_codec.PlatformException)),\n    type: dart.finalFieldType(dart.nullable(retrieve_type.RetrieveType)),\n    [_empty$]: dart.fieldType(core.bool)\n  }));\n  var path$ = dart.privateName(html$, \"PickedFile.path\");\n  var _initBytes = dart.privateName(html$, \"_initBytes\");\n  var _bytes = dart.privateName(html$, \"_bytes\");\n  var Utf8Codec__allowMalformed = dart.privateName(convert, \"Utf8Codec._allowMalformed\");\n  base.PickedFileBase = class PickedFileBase extends core.Object {\n    get path() {\n      dart.throw(new core.UnimplementedError.new(\".path has not been implemented.\"));\n    }\n    readAsString(opts) {\n      let encoding = opts && 'encoding' in opts ? opts.encoding : C[29] || CT.C29;\n      dart.throw(new core.UnimplementedError.new(\"readAsString() has not been implemented.\"));\n    }\n    readAsBytes() {\n      dart.throw(new core.UnimplementedError.new(\"readAsBytes() has not been implemented.\"));\n    }\n    openRead(start = null, end = null) {\n      dart.throw(new core.UnimplementedError.new(\"openRead() has not been implemented.\"));\n    }\n  };\n  (base.PickedFileBase.new = function(path) {\n    ;\n  }).prototype = base.PickedFileBase.prototype;\n  dart.addTypeTests(base.PickedFileBase);\n  dart.addTypeCaches(base.PickedFileBase);\n  dart.setMethodSignature(base.PickedFileBase, () => ({\n    __proto__: dart.getMethods(base.PickedFileBase.__proto__),\n    readAsString: dart.fnType(async.Future$(core.String), [], {encoding: convert.Encoding}, {}),\n    readAsBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),\n    openRead: dart.fnType(async.Stream$(typed_data.Uint8List), [], [dart.nullable(core.int), dart.nullable(core.int)])\n  }));\n  dart.setGetterSignature(base.PickedFileBase, () => ({\n    __proto__: dart.getGetters(base.PickedFileBase.__proto__),\n    path: core.String\n  }));\n  dart.setLibraryUri(base.PickedFileBase, I[25]);\n  html$.PickedFile = class PickedFile extends base.PickedFileBase {\n    get path() {\n      return this[path$];\n    }\n    set path(value) {\n      super.path = value;\n    }\n    static ['_#new#tearOff'](path, opts) {\n      let bytes = opts && 'bytes' in opts ? opts.bytes : null;\n      return new html$.PickedFile.new(path, {bytes: bytes});\n    }\n    get [_bytes]() {\n      return async.async(typed_data.Uint8List, (function* _bytes() {\n        if (this[_initBytes] != null) {\n          return T$.FutureOfUint8List().value(new typed_data.UnmodifiableUint8ListView.new(dart.nullCheck(this[_initBytes])));\n        }\n        return http.readBytes(core.Uri.parse(this.path));\n      }).bind(this));\n    }\n    readAsString(opts) {\n      let encoding = opts && 'encoding' in opts ? opts.encoding : C[29] || CT.C29;\n      return async.async(core.String, (function* readAsString() {\n        return encoding.decode(yield this[_bytes]);\n      }).bind(this));\n    }\n    readAsBytes() {\n      return async.async(typed_data.Uint8List, (function* readAsBytes() {\n        return T$.FutureOfUint8List().value(yield this[_bytes]);\n      }).bind(this));\n    }\n    openRead(start = null, end = null) {\n      return new (T$._AsyncStarImplOfUint8List()).new((function* openRead(stream) {\n        let t15, t15$;\n        let bytes = (yield this[_bytes]);\n        if (stream.add(bytes[$sublist]((t15 = start, t15 == null ? 0 : t15), (t15$ = end, t15$ == null ? bytes[$length] : t15$)))) return;\n        yield;\n      }).bind(this)).stream;\n    }\n  };\n  (html$.PickedFile.new = function(path, opts) {\n    let bytes = opts && 'bytes' in opts ? opts.bytes : null;\n    this[path$] = path;\n    this[_initBytes] = bytes;\n    html$.PickedFile.__proto__.new.call(this, path);\n    ;\n  }).prototype = html$.PickedFile.prototype;\n  dart.addTypeTests(html$.PickedFile);\n  dart.addTypeCaches(html$.PickedFile);\n  dart.setGetterSignature(html$.PickedFile, () => ({\n    __proto__: dart.getGetters(html$.PickedFile.__proto__),\n    [_bytes]: async.Future$(typed_data.Uint8List)\n  }));\n  dart.setLibraryUri(html$.PickedFile, I[26]);\n  dart.setFieldSignature(html$.PickedFile, () => ({\n    __proto__: dart.getFields(html$.PickedFile.__proto__),\n    path: dart.finalFieldType(core.String),\n    [_initBytes]: dart.finalFieldType(dart.nullable(typed_data.Uint8List))\n  }));\n  var __XFile__path = dart.privateName(html$0, \"_#XFile#_path\");\n  var _browserBlob = dart.privateName(html$0, \"_browserBlob\");\n  var __XFile__target = dart.privateName(html$0, \"_#XFile#_target\");\n  var _mimeType = dart.privateName(html$0, \"_mimeType\");\n  var _length = dart.privateName(html$0, \"_length\");\n  var _overrides$ = dart.privateName(html$0, \"_overrides\");\n  var _lastModified = dart.privateName(html$0, \"_lastModified\");\n  var _name$ = dart.privateName(html$0, \"_name\");\n  var _createBlobFromBytes = dart.privateName(html$0, \"_createBlobFromBytes\");\n  var _path = dart.privateName(html$0, \"_path\");\n  var _target$ = dart.privateName(html$0, \"_target\");\n  var _hasTestOverrides = dart.privateName(html$0, \"_hasTestOverrides\");\n  var _blob = dart.privateName(html$0, \"_blob\");\n  var _blobToByteBuffer = dart.privateName(html$0, \"_blobToByteBuffer\");\n  base$.XFileBase = class XFileBase extends core.Object {\n    saveTo(path) {\n      dart.throw(new core.UnimplementedError.new(\"saveTo has not been implemented.\"));\n    }\n    get path() {\n      dart.throw(new core.UnimplementedError.new(\".path has not been implemented.\"));\n    }\n    get name() {\n      dart.throw(new core.UnimplementedError.new(\".name has not been implemented.\"));\n    }\n    get mimeType() {\n      dart.throw(new core.UnimplementedError.new(\".mimeType has not been implemented.\"));\n    }\n    length() {\n      dart.throw(new core.UnimplementedError.new(\".length() has not been implemented.\"));\n    }\n    readAsString(opts) {\n      let encoding = opts && 'encoding' in opts ? opts.encoding : C[29] || CT.C29;\n      dart.throw(new core.UnimplementedError.new(\"readAsString() has not been implemented.\"));\n    }\n    readAsBytes() {\n      dart.throw(new core.UnimplementedError.new(\"readAsBytes() has not been implemented.\"));\n    }\n    openRead(start = null, end = null) {\n      dart.throw(new core.UnimplementedError.new(\"openRead() has not been implemented.\"));\n    }\n    lastModified() {\n      dart.throw(new core.UnimplementedError.new(\"openRead() has not been implemented.\"));\n    }\n  };\n  (base$.XFileBase.new = function(path) {\n    ;\n  }).prototype = base$.XFileBase.prototype;\n  dart.addTypeTests(base$.XFileBase);\n  dart.addTypeCaches(base$.XFileBase);\n  dart.setMethodSignature(base$.XFileBase, () => ({\n    __proto__: dart.getMethods(base$.XFileBase.__proto__),\n    saveTo: dart.fnType(async.Future$(dart.void), [core.String]),\n    length: dart.fnType(async.Future$(core.int), []),\n    readAsString: dart.fnType(async.Future$(core.String), [], {encoding: convert.Encoding}, {}),\n    readAsBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),\n    openRead: dart.fnType(async.Stream$(typed_data.Uint8List), [], [dart.nullable(core.int), dart.nullable(core.int)]),\n    lastModified: dart.fnType(async.Future$(core.DateTime), [])\n  }));\n  dart.setGetterSignature(base$.XFileBase, () => ({\n    __proto__: dart.getGetters(base$.XFileBase.__proto__),\n    path: core.String,\n    name: core.String,\n    mimeType: dart.nullable(core.String)\n  }));\n  dart.setLibraryUri(base$.XFileBase, I[28]);\n  html$0.XFile = class XFile extends base$.XFileBase {\n    static ['_#new#tearOff'](path, opts) {\n      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;\n      let name = opts && 'name' in opts ? opts.name : null;\n      let length = opts && 'length' in opts ? opts.length : null;\n      let bytes = opts && 'bytes' in opts ? opts.bytes : null;\n      let lastModified = opts && 'lastModified' in opts ? opts.lastModified : null;\n      let overrides = opts && 'overrides' in opts ? opts.overrides : null;\n      return new html$0.XFile.new(path, {mimeType: mimeType, name: name, length: length, bytes: bytes, lastModified: lastModified, overrides: overrides});\n    }\n    static ['_#fromData#tearOff'](bytes, opts) {\n      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;\n      let name = opts && 'name' in opts ? opts.name : null;\n      let length = opts && 'length' in opts ? opts.length : null;\n      let lastModified = opts && 'lastModified' in opts ? opts.lastModified : null;\n      let path = opts && 'path' in opts ? opts.path : null;\n      let overrides = opts && 'overrides' in opts ? opts.overrides : null;\n      return new html$0.XFile.fromData(bytes, {mimeType: mimeType, name: name, length: length, lastModified: lastModified, path: path, overrides: overrides});\n    }\n    [_createBlobFromBytes](bytes, mimeType) {\n      return mimeType == null ? html.Blob.new([bytes]) : html.Blob.new([bytes], mimeType);\n    }\n    get [_path]() {\n      let t15;\n      t15 = this[__XFile__path];\n      return t15 == null ? dart.throw(new _internal.LateError.fieldNI(\"_path\")) : t15;\n    }\n    set [_path](t15) {\n      this[__XFile__path] = t15;\n    }\n    get [_target$]() {\n      let t16;\n      t16 = this[__XFile__target];\n      return t16 == null ? dart.throw(new _internal.LateError.fieldNI(\"_target\")) : t16;\n    }\n    set [_target$](t16) {\n      this[__XFile__target] = t16;\n    }\n    get [_hasTestOverrides]() {\n      return this[_overrides$] != null;\n    }\n    get mimeType() {\n      return this[_mimeType];\n    }\n    get name() {\n      return this[_name$];\n    }\n    get path() {\n      return this[_path];\n    }\n    lastModified() {\n      return async.async(core.DateTime, (function* lastModified() {\n        return this[_lastModified];\n      }).bind(this));\n    }\n    get [_blob]() {\n      return async.async(html.Blob, (function* _blob() {\n        if (this[_browserBlob] != null) {\n          return dart.nullCheck(this[_browserBlob]);\n        }\n        if (web_helpers.isSafari() && this[_length] != null && dart.nullCheck(this[_length]) >= 4294967296.0) {\n          dart.throw(core.Exception.new(\"Safari cannot handle XFiles larger than 4GB.\"));\n        }\n        let request = null;\n        function request$35get() {\n          let t18;\n          t18 = request;\n          return t18 == null ? dart.throw(new _internal.LateError.localNI(\"request\")) : t18;\n        }\n        dart.fn(request$35get, T$.VoidToHttpRequest());\n        function request$35set(t19) {\n          return request = t19;\n        }\n        dart.fn(request$35set, T$.HttpRequestTodynamic());\n        try {\n          request$35set(yield html.HttpRequest.request(this.path, {responseType: \"blob\"}));\n        } catch (e$) {\n          let e = dart.getThrown(e$);\n          if (html.ProgressEvent.is(e)) {\n            if (e[$type] === \"error\") {\n              dart.throw(core.Exception.new(\"Could not load Blob from its URL. Has it been revoked?\"));\n            }\n            dart.rethrow(e$);\n          } else\n            throw e$;\n        }\n        this[_browserBlob] = T$.BlobN().as(request$35get()[$response]);\n        if (!(this[_browserBlob] != null)) dart.assertFailed(\"The Blob backing this XFile cannot be null!\", I[27], 146, 12, \"_browserBlob != null\");\n        return dart.nullCheck(this[_browserBlob]);\n      }).bind(this));\n    }\n    readAsBytes() {\n      return async.async(typed_data.Uint8List, (function* readAsBytes() {\n        return this[_blob].then(typed_data.Uint8List, dart.bind(this, _blobToByteBuffer));\n      }).bind(this));\n    }\n    length() {\n      return async.async(core.int, (function* length() {\n        let t22;\n        t22 = this[_length];\n        return t22 == null ? (yield this[_blob])[$size] : t22;\n      }).bind(this));\n    }\n    readAsString(opts) {\n      let encoding = opts && 'encoding' in opts ? opts.encoding : C[29] || CT.C29;\n      return async.async(core.String, (function* readAsString() {\n        return this.readAsBytes().then(core.String, T$.ListOfintToString().as(dart.bind(encoding, 'decode')));\n      }).bind(this));\n    }\n    openRead(start = null, end = null) {\n      return new (T$._AsyncStarImplOfUint8List()).new((function* openRead(stream) {\n        let t22, t22$;\n        let blob = (yield this[_blob]);\n        let slice = blob[$slice]((t22 = start, t22 == null ? 0 : t22), (t22$ = end, t22$ == null ? blob[$size] : t22$), blob[$type]);\n        let convertedSlice = (yield this[_blobToByteBuffer](slice));\n        if (stream.add(convertedSlice)) return;\n        yield;\n      }).bind(this)).stream;\n    }\n    [_blobToByteBuffer](blob) {\n      return async.async(typed_data.Uint8List, function* _blobToByteBuffer() {\n        let reader = html.FileReader.new();\n        reader.readAsArrayBuffer(blob);\n        yield reader[$onLoadEnd].first;\n        let result = T$.Uint8ListN().as(reader[$result]);\n        if (result == null) {\n          dart.throw(core.Exception.new(\"Cannot read bytes from Blob. Is it still available?\"));\n        }\n        return result;\n      });\n    }\n    saveTo(path) {\n      return async.async(dart.void, (function* saveTo() {\n        let t24, t23, t22;\n        this[_target$] = web_helpers.ensureInitialized(\"__x_file_dom_element\");\n        let element = this[_hasTestOverrides] ? html.AnchorElement.as((t22 = dart.nullCheck(this[_overrides$]), t23 = this.path, t24 = this.name, t22.createAnchorElement(t23, t24))) : web_helpers.createAnchorElement(this.path, this.name);\n        this[_target$][$children][$clear]();\n        web_helpers.addElementToContainerAndClick(this[_target$], element);\n      }).bind(this));\n    }\n  };\n  (html$0.XFile.new = function(path, opts) {\n    let t15, t15$;\n    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;\n    let name = opts && 'name' in opts ? opts.name : null;\n    let length = opts && 'length' in opts ? opts.length : null;\n    let bytes = opts && 'bytes' in opts ? opts.bytes : null;\n    let lastModified = opts && 'lastModified' in opts ? opts.lastModified : null;\n    let overrides = opts && 'overrides' in opts ? opts.overrides : null;\n    this[__XFile__path] = null;\n    this[_browserBlob] = null;\n    this[__XFile__target] = null;\n    this[_mimeType] = mimeType;\n    this[__XFile__path] = path;\n    this[_length] = length;\n    this[_overrides$] = overrides;\n    this[_lastModified] = (t15 = lastModified, t15 == null ? new core.DateTime.fromMillisecondsSinceEpoch(0) : t15);\n    this[_name$] = (t15$ = name, t15$ == null ? \"\" : t15$);\n    html$0.XFile.__proto__.new.call(this, path);\n    if (bytes != null) {\n      this[_browserBlob] = this[_createBlobFromBytes](bytes, mimeType);\n    }\n  }).prototype = html$0.XFile.prototype;\n  (html$0.XFile.fromData = function(bytes, opts) {\n    let t15, t15$;\n    let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;\n    let name = opts && 'name' in opts ? opts.name : null;\n    let length = opts && 'length' in opts ? opts.length : null;\n    let lastModified = opts && 'lastModified' in opts ? opts.lastModified : null;\n    let path = opts && 'path' in opts ? opts.path : null;\n    let overrides = opts && 'overrides' in opts ? opts.overrides : null;\n    this[__XFile__path] = null;\n    this[_browserBlob] = null;\n    this[__XFile__target] = null;\n    this[_mimeType] = mimeType;\n    this[_length] = length;\n    this[_overrides$] = overrides;\n    this[_lastModified] = (t15 = lastModified, t15 == null ? new core.DateTime.fromMillisecondsSinceEpoch(0) : t15);\n    this[_name$] = (t15$ = name, t15$ == null ? \"\" : t15$);\n    html$0.XFile.__proto__.new.call(this, path);\n    if (path == null) {\n      this[_browserBlob] = this[_createBlobFromBytes](bytes, mimeType);\n      this[_path] = html.Url.createObjectUrl(this[_browserBlob]);\n    } else {\n      this[_path] = path;\n    }\n  }).prototype = html$0.XFile.prototype;\n  dart.addTypeTests(html$0.XFile);\n  dart.addTypeCaches(html$0.XFile);\n  dart.setMethodSignature(html$0.XFile, () => ({\n    __proto__: dart.getMethods(html$0.XFile.__proto__),\n    [_createBlobFromBytes]: dart.fnType(html.Blob, [typed_data.Uint8List, dart.nullable(core.String)]),\n    [_blobToByteBuffer]: dart.fnType(async.Future$(typed_data.Uint8List), [html.Blob])\n  }));\n  dart.setGetterSignature(html$0.XFile, () => ({\n    __proto__: dart.getGetters(html$0.XFile.__proto__),\n    [_path]: core.String,\n    [_target$]: html.Element,\n    [_hasTestOverrides]: core.bool,\n    [_blob]: async.Future$(html.Blob)\n  }));\n  dart.setSetterSignature(html$0.XFile, () => ({\n    __proto__: dart.getSetters(html$0.XFile.__proto__),\n    [_path]: core.String,\n    [_target$]: html.Element\n  }));\n  dart.setLibraryUri(html$0.XFile, I[29]);\n  dart.setFieldSignature(html$0.XFile, () => ({\n    __proto__: dart.getFields(html$0.XFile.__proto__),\n    [_mimeType]: dart.finalFieldType(dart.nullable(core.String)),\n    [_name$]: dart.finalFieldType(core.String),\n    [__XFile__path]: dart.fieldType(dart.nullable(core.String)),\n    [_length]: dart.finalFieldType(dart.nullable(core.int)),\n    [_lastModified]: dart.finalFieldType(core.DateTime),\n    [_browserBlob]: dart.fieldType(dart.nullable(html.Blob)),\n    [__XFile__target]: dart.fieldType(dart.nullable(html.Element)),\n    [_overrides$]: dart.finalFieldType(dart.nullable(html$0.CrossFileTestOverrides))\n  }));\n  var createAnchorElement$ = dart.privateName(html$0, \"CrossFileTestOverrides.createAnchorElement\");\n  html$0.CrossFileTestOverrides = class CrossFileTestOverrides extends core.Object {\n    get createAnchorElement() {\n      return this[createAnchorElement$];\n    }\n    set createAnchorElement(value) {\n      this[createAnchorElement$] = value;\n    }\n    static ['_#new#tearOff'](opts) {\n      let createAnchorElement = opts && 'createAnchorElement' in opts ? opts.createAnchorElement : null;\n      return new html$0.CrossFileTestOverrides.new({createAnchorElement: createAnchorElement});\n    }\n  };\n  (html$0.CrossFileTestOverrides.new = function(opts) {\n    let createAnchorElement = opts && 'createAnchorElement' in opts ? opts.createAnchorElement : null;\n    this[createAnchorElement$] = createAnchorElement;\n    ;\n  }).prototype = html$0.CrossFileTestOverrides.prototype;\n  dart.addTypeTests(html$0.CrossFileTestOverrides);\n  dart.addTypeCaches(html$0.CrossFileTestOverrides);\n  dart.setLibraryUri(html$0.CrossFileTestOverrides, I[29]);\n  dart.setFieldSignature(html$0.CrossFileTestOverrides, () => ({\n    __proto__: dart.getFields(html$0.CrossFileTestOverrides.__proto__),\n    createAnchorElement: dart.fieldType(dart.fnType(html.Element, [core.String, core.String]))\n  }));\n  dart.defineLazy(html$0, {\n    /*html$0._fourGigabytes*/get _fourGigabytes() {\n      return 4294967296.0;\n    }\n  }, false);\n  http.head = function head(url, opts) {\n    let headers = opts && 'headers' in opts ? opts.headers : null;\n    return http._withClient(response$.Response, dart.fn(client => client.head(url, {headers: headers}), T$.ClientToFutureOfResponse()));\n  };\n  http.get = function get(url, opts) {\n    let headers = opts && 'headers' in opts ? opts.headers : null;\n    return http._withClient(response$.Response, dart.fn(client => client.get(url, {headers: headers}), T$.ClientToFutureOfResponse()));\n  };\n  http.post = function post(url, opts) {\n    let headers = opts && 'headers' in opts ? opts.headers : null;\n    let body = opts && 'body' in opts ? opts.body : null;\n    let encoding = opts && 'encoding' in opts ? opts.encoding : null;\n    return http._withClient(response$.Response, dart.fn(client => client.post(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));\n  };\n  http.put = function put(url, opts) {\n    let headers = opts && 'headers' in opts ? opts.headers : null;\n    let body = opts && 'body' in opts ? opts.body : null;\n    let encoding = opts && 'encoding' in opts ? opts.encoding : null;\n    return http._withClient(response$.Response, dart.fn(client => client.put(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));\n  };\n  http.patch = function patch(url, opts) {\n    let headers = opts && 'headers' in opts ? opts.headers : null;\n    let body = opts && 'body' in opts ? opts.body : null;\n    let encoding = opts && 'encoding' in opts ? opts.encoding : null;\n    return http._withClient(response$.Response, dart.fn(client => client.patch(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));\n  };\n  http.delete = function $delete(url, opts) {\n    let headers = opts && 'headers' in opts ? opts.headers : null;\n    let body = opts && 'body' in opts ? opts.body : null;\n    let encoding = opts && 'encoding' in opts ? opts.encoding : null;\n    return http._withClient(response$.Response, dart.fn(client => client.delete(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));\n  };\n  http.read = function read(url, opts) {\n    let headers = opts && 'headers' in opts ? opts.headers : null;\n    return http._withClient(core.String, dart.fn(client => client.read(url, {headers: headers}), T$.ClientToFutureOfString()));\n  };\n  http.readBytes = function readBytes(url, opts) {\n    let headers = opts && 'headers' in opts ? opts.headers : null;\n    return http._withClient(typed_data.Uint8List, dart.fn(client => client.readBytes(url, {headers: headers}), T$.ClientToFutureOfUint8List()));\n  };\n  http._withClient = function _withClient(T, fn) {\n    return async.async(T, function* _withClient() {\n      let client = client$.Client.new();\n      try {\n        return yield fn(client);\n      } finally {\n        client.close();\n      }\n    });\n  };\n  web_helpers.createAnchorElement = function createAnchorElement(href, suggestedName) {\n    let element = html.AnchorElement.new({href: href});\n    if (suggestedName == null) {\n      element.download = \"download\";\n    } else {\n      element.download = suggestedName;\n    }\n    return element;\n  };\n  web_helpers.addElementToContainerAndClick = function addElementToContainerAndClick(container, element) {\n    container[$children][$add](element);\n    element.click();\n  };\n  web_helpers.ensureInitialized = function ensureInitialized(id) {\n    let t22;\n    let target = html.querySelector(\"#\" + id);\n    if (target == null) {\n      let targetElement = (t22 = html.Element.tag(\"flt-x-file\"), (() => {\n        t22[$id] = id;\n        return t22;\n      })());\n      dart.nullCheck(html.querySelector(\"body\"))[$children][$add](targetElement);\n      target = targetElement;\n    }\n    return target;\n  };\n  web_helpers.isSafari = function isSafari() {\n    return html.window[$navigator][$vendor] === \"Apple Computer, Inc.\";\n  };\n  client$.Client = class Client extends core.Object {\n    static new() {\n      return browser_client.createClient();\n    }\n    static ['_#new#tearOff']() {\n      return client$.Client.new();\n    }\n  };\n  (client$.Client[dart.mixinNew] = function() {\n  }).prototype = client$.Client.prototype;\n  dart.addTypeTests(client$.Client);\n  dart.addTypeCaches(client$.Client);\n  dart.setStaticMethodSignature(client$.Client, () => ['new']);\n  dart.setLibraryUri(client$.Client, I[30]);\n  var message$ = dart.privateName(exception, \"ClientException.message\");\n  var uri$ = dart.privateName(exception, \"ClientException.uri\");\n  exception.ClientException = class ClientException extends core.Object {\n    get message() {\n      return this[message$];\n    }\n    set message(value) {\n      super.message = value;\n    }\n    get uri() {\n      return this[uri$];\n    }\n    set uri(value) {\n      super.uri = value;\n    }\n    static ['_#new#tearOff'](message, uri = null) {\n      return new exception.ClientException.new(message, uri);\n    }\n    toString() {\n      return this.message;\n    }\n  };\n  (exception.ClientException.new = function(message, uri = null) {\n    this[message$] = message;\n    this[uri$] = uri;\n    ;\n  }).prototype = exception.ClientException.prototype;\n  dart.addTypeTests(exception.ClientException);\n  dart.addTypeCaches(exception.ClientException);\n  exception.ClientException[dart.implements] = () => [core.Exception];\n  dart.setLibraryUri(exception.ClientException, I[31]);\n  dart.setFieldSignature(exception.ClientException, () => ({\n    __proto__: dart.getFields(exception.ClientException.__proto__),\n    message: dart.finalFieldType(core.String),\n    uri: dart.finalFieldType(dart.nullable(core.Uri))\n  }));\n  dart.defineExtensionMethods(exception.ClientException, ['toString']);\n  var _defaultEncoding = dart.privateName(request$, \"_defaultEncoding\");\n  var _bodyBytes = dart.privateName(request$, \"_bodyBytes\");\n  var _contentType = dart.privateName(request$, \"_contentType\");\n  var _checkFinalized = dart.privateName(request$, \"_checkFinalized\");\n  var method$ = dart.privateName(base_request, \"BaseRequest.method\");\n  var url$ = dart.privateName(base_request, \"BaseRequest.url\");\n  var headers = dart.privateName(base_request, \"BaseRequest.headers\");\n  var _contentLength = dart.privateName(base_request, \"_contentLength\");\n  var _persistentConnection = dart.privateName(base_request, \"_persistentConnection\");\n  var _followRedirects = dart.privateName(base_request, \"_followRedirects\");\n  var _maxRedirects = dart.privateName(base_request, \"_maxRedirects\");\n  var _finalized = dart.privateName(base_request, \"_finalized\");\n  var _checkFinalized$ = dart.privateName(base_request, \"_checkFinalized\");\n  var StreamView__stream = dart.privateName(async, \"StreamView._stream\");\n  base_request.BaseRequest = class BaseRequest extends core.Object {\n    get method() {\n      return this[method$];\n    }\n    set method(value) {\n      super.method = value;\n    }\n    get url() {\n      return this[url$];\n    }\n    set url(value) {\n      super.url = value;\n    }\n    get headers() {\n      return this[headers];\n    }\n    set headers(value) {\n      super.headers = value;\n    }\n    get contentLength() {\n      return this[_contentLength];\n    }\n    set contentLength(value) {\n      if (value != null && dart.notNull(value) < 0) {\n        dart.throw(new core.ArgumentError.new(\"Invalid content length \" + dart.str(value) + \".\"));\n      }\n      this[_checkFinalized$]();\n      this[_contentLength] = value;\n    }\n    get persistentConnection() {\n      return this[_persistentConnection];\n    }\n    set persistentConnection(value) {\n      this[_checkFinalized$]();\n      this[_persistentConnection] = value;\n    }\n    get followRedirects() {\n      return this[_followRedirects];\n    }\n    set followRedirects(value) {\n      this[_checkFinalized$]();\n      this[_followRedirects] = value;\n    }\n    get maxRedirects() {\n      return this[_maxRedirects];\n    }\n    set maxRedirects(value) {\n      this[_checkFinalized$]();\n      this[_maxRedirects] = value;\n    }\n    get finalized() {\n      return this[_finalized];\n    }\n    static _validateMethod(method) {\n      if (!base_request.BaseRequest._tokenRE.hasMatch(method)) {\n        dart.throw(new core.ArgumentError.value(method, \"method\", \"Not a valid method\"));\n      }\n      return method;\n    }\n    finalize() {\n      if (this.finalized) dart.throw(new core.StateError.new(\"Can't finalize a finalized Request.\"));\n      this[_finalized] = true;\n      return C[30] || CT.C30;\n    }\n    send() {\n      return async.async(streamed_response.StreamedResponse, (function* send() {\n        let client = client$.Client.new();\n        try {\n          let response = (yield client.send(this));\n          let stream = utils$.onDone(T$.ListOfint(), response.stream, dart.bind(client, 'close'));\n          return new streamed_response.StreamedResponse.new(new byte_stream.ByteStream.new(stream), response.statusCode, {contentLength: response.contentLength, request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});\n        } catch (e) {\n          let _ = dart.getThrown(e);\n          if (core.Object.is(_)) {\n            client.close();\n            dart.rethrow(e);\n          } else\n            throw e;\n        }\n      }).bind(this));\n    }\n    [_checkFinalized$]() {\n      if (!this.finalized) return;\n      dart.throw(new core.StateError.new(\"Can't modify a finalized Request.\"));\n    }\n    toString() {\n      return this.method + \" \" + dart.str(this.url);\n    }\n  };\n  (base_request.BaseRequest.new = function(method, url) {\n    this[_contentLength] = null;\n    this[_persistentConnection] = true;\n    this[_followRedirects] = true;\n    this[_maxRedirects] = 5;\n    this[_finalized] = false;\n    this[url$] = url;\n    this[method$] = base_request.BaseRequest._validateMethod(method);\n    this[headers] = T$.LinkedHashMapOfString$String().new({equals: dart.fn((key1, key2) => key1[$toLowerCase]() === key2[$toLowerCase](), T$.StringAndStringTobool()), hashCode: dart.fn(key => key[$toLowerCase]()[$hashCode], T$.StringToint())});\n    ;\n  }).prototype = base_request.BaseRequest.prototype;\n  dart.addTypeTests(base_request.BaseRequest);\n  dart.addTypeCaches(base_request.BaseRequest);\n  dart.setMethodSignature(base_request.BaseRequest, () => ({\n    __proto__: dart.getMethods(base_request.BaseRequest.__proto__),\n    finalize: dart.fnType(byte_stream.ByteStream, []),\n    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), []),\n    [_checkFinalized$]: dart.fnType(dart.void, [])\n  }));\n  dart.setStaticMethodSignature(base_request.BaseRequest, () => ['_validateMethod']);\n  dart.setGetterSignature(base_request.BaseRequest, () => ({\n    __proto__: dart.getGetters(base_request.BaseRequest.__proto__),\n    contentLength: dart.nullable(core.int),\n    persistentConnection: core.bool,\n    followRedirects: core.bool,\n    maxRedirects: core.int,\n    finalized: core.bool\n  }));\n  dart.setSetterSignature(base_request.BaseRequest, () => ({\n    __proto__: dart.getSetters(base_request.BaseRequest.__proto__),\n    contentLength: dart.nullable(core.int),\n    persistentConnection: core.bool,\n    followRedirects: core.bool,\n    maxRedirects: core.int\n  }));\n  dart.setLibraryUri(base_request.BaseRequest, I[32]);\n  dart.setFieldSignature(base_request.BaseRequest, () => ({\n    __proto__: dart.getFields(base_request.BaseRequest.__proto__),\n    method: dart.finalFieldType(core.String),\n    url: dart.finalFieldType(core.Uri),\n    [_contentLength]: dart.fieldType(dart.nullable(core.int)),\n    [_persistentConnection]: dart.fieldType(core.bool),\n    [_followRedirects]: dart.fieldType(core.bool),\n    [_maxRedirects]: dart.fieldType(core.int),\n    headers: dart.finalFieldType(core.Map$(core.String, core.String)),\n    [_finalized]: dart.fieldType(core.bool)\n  }));\n  dart.setStaticFieldSignature(base_request.BaseRequest, () => ['_tokenRE']);\n  dart.defineExtensionMethods(base_request.BaseRequest, ['toString']);\n  dart.defineLazy(base_request.BaseRequest, {\n    /*base_request.BaseRequest._tokenRE*/get _tokenRE() {\n      return core.RegExp.new(\"^[\\\\w!#%&'*+\\\\-.^`|~]+$\");\n    }\n  }, false);\n  request$.Request = class Request extends base_request.BaseRequest {\n    get contentLength() {\n      return this.bodyBytes[$length];\n    }\n    set contentLength(value) {\n      dart.throw(new core.UnsupportedError.new(\"Cannot set the contentLength property of \" + \"non-streaming Request objects.\"));\n    }\n    get encoding() {\n      if (this[_contentType] == null || !dart.nullCheck(this[_contentType]).parameters[$containsKey](\"charset\")) {\n        return this[_defaultEncoding];\n      }\n      return utils$.requiredEncodingForCharset(dart.nullCheck(dart.nullCheck(this[_contentType]).parameters[$_get](\"charset\")));\n    }\n    set encoding(value) {\n      this[_checkFinalized]();\n      this[_defaultEncoding] = value;\n      let contentType = this[_contentType];\n      if (contentType == null) return;\n      this[_contentType] = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from([\"charset\", value.name])});\n    }\n    get bodyBytes() {\n      return this[_bodyBytes];\n    }\n    set bodyBytes(value) {\n      this[_checkFinalized]();\n      this[_bodyBytes] = utils$.toUint8List(value);\n    }\n    get body() {\n      return this.encoding.decode(this.bodyBytes);\n    }\n    set body(value) {\n      this.bodyBytes = this.encoding.encode(value);\n      let contentType = this[_contentType];\n      if (contentType == null) {\n        this[_contentType] = new media_type.MediaType.new(\"text\", \"plain\", new (T$.IdentityMapOfString$String()).from([\"charset\", this.encoding.name]));\n      } else if (!contentType.parameters[$containsKey](\"charset\")) {\n        this[_contentType] = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from([\"charset\", this.encoding.name])});\n      }\n    }\n    get bodyFields() {\n      let contentType = this[_contentType];\n      if (contentType == null || contentType.mimeType !== \"application/x-www-form-urlencoded\") {\n        dart.throw(new core.StateError.new(\"Cannot access the body fields of a Request without \" + \"content-type \\\"application/x-www-form-urlencoded\\\".\"));\n      }\n      return core.Uri.splitQueryString(this.body, {encoding: this.encoding});\n    }\n    set bodyFields(fields) {\n      let contentType = this[_contentType];\n      if (contentType == null) {\n        this[_contentType] = new media_type.MediaType.new(\"application\", \"x-www-form-urlencoded\");\n      } else if (contentType.mimeType !== \"application/x-www-form-urlencoded\") {\n        dart.throw(new core.StateError.new(\"Cannot set the body fields of a Request with \" + \"content-type \\\"\" + contentType.mimeType + \"\\\".\"));\n      }\n      this.body = utils$.mapToQuery(fields, {encoding: this.encoding});\n    }\n    static ['_#new#tearOff'](method, url) {\n      return new request$.Request.new(method, url);\n    }\n    finalize() {\n      super.finalize();\n      return byte_stream.ByteStream.fromBytes(this.bodyBytes);\n    }\n    get [_contentType]() {\n      let contentType = this.headers[$_get](\"content-type\");\n      if (contentType == null) return null;\n      return media_type.MediaType.parse(contentType);\n    }\n    set [_contentType](value) {\n      if (value == null) {\n        this.headers[$remove](\"content-type\");\n      } else {\n        this.headers[$_set](\"content-type\", dart.toString(value));\n      }\n    }\n    [_checkFinalized]() {\n      if (!this.finalized) return;\n      dart.throw(new core.StateError.new(\"Can't modify a finalized Request.\"));\n    }\n  };\n  (request$.Request.new = function(method, url) {\n    this[_defaultEncoding] = convert.utf8;\n    this[_bodyBytes] = _native_typed_data.NativeUint8List.new(0);\n    request$.Request.__proto__.new.call(this, method, url);\n    ;\n  }).prototype = request$.Request.prototype;\n  dart.addTypeTests(request$.Request);\n  dart.addTypeCaches(request$.Request);\n  dart.setMethodSignature(request$.Request, () => ({\n    __proto__: dart.getMethods(request$.Request.__proto__),\n    [_checkFinalized]: dart.fnType(dart.void, [])\n  }));\n  dart.setGetterSignature(request$.Request, () => ({\n    __proto__: dart.getGetters(request$.Request.__proto__),\n    contentLength: core.int,\n    encoding: convert.Encoding,\n    bodyBytes: typed_data.Uint8List,\n    body: core.String,\n    bodyFields: core.Map$(core.String, core.String),\n    [_contentType]: dart.nullable(media_type.MediaType)\n  }));\n  dart.setSetterSignature(request$.Request, () => ({\n    __proto__: dart.getSetters(request$.Request.__proto__),\n    encoding: convert.Encoding,\n    bodyBytes: core.List$(core.int),\n    body: core.String,\n    bodyFields: core.Map$(core.String, core.String),\n    [_contentType]: dart.nullable(media_type.MediaType)\n  }));\n  dart.setLibraryUri(request$.Request, I[33]);\n  dart.setFieldSignature(request$.Request, () => ({\n    __proto__: dart.getFields(request$.Request.__proto__),\n    [_defaultEncoding]: dart.fieldType(convert.Encoding),\n    [_bodyBytes]: dart.fieldType(typed_data.Uint8List)\n  }));\n  var bodyBytes$ = dart.privateName(response$, \"Response.bodyBytes\");\n  var request$0 = dart.privateName(base_response, \"BaseResponse.request\");\n  var statusCode$ = dart.privateName(base_response, \"BaseResponse.statusCode\");\n  var reasonPhrase$ = dart.privateName(base_response, \"BaseResponse.reasonPhrase\");\n  var contentLength$ = dart.privateName(base_response, \"BaseResponse.contentLength\");\n  var headers$ = dart.privateName(base_response, \"BaseResponse.headers\");\n  var isRedirect$ = dart.privateName(base_response, \"BaseResponse.isRedirect\");\n  var persistentConnection$ = dart.privateName(base_response, \"BaseResponse.persistentConnection\");\n  base_response.BaseResponse = class BaseResponse extends core.Object {\n    get request() {\n      return this[request$0];\n    }\n    set request(value) {\n      super.request = value;\n    }\n    get statusCode() {\n      return this[statusCode$];\n    }\n    set statusCode(value) {\n      super.statusCode = value;\n    }\n    get reasonPhrase() {\n      return this[reasonPhrase$];\n    }\n    set reasonPhrase(value) {\n      super.reasonPhrase = value;\n    }\n    get contentLength() {\n      return this[contentLength$];\n    }\n    set contentLength(value) {\n      super.contentLength = value;\n    }\n    get headers() {\n      return this[headers$];\n    }\n    set headers(value) {\n      super.headers = value;\n    }\n    get isRedirect() {\n      return this[isRedirect$];\n    }\n    set isRedirect(value) {\n      super.isRedirect = value;\n    }\n    get persistentConnection() {\n      return this[persistentConnection$];\n    }\n    set persistentConnection(value) {\n      super.persistentConnection = value;\n    }\n  };\n  (base_response.BaseResponse.new = function(statusCode, opts) {\n    let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;\n    let request = opts && 'request' in opts ? opts.request : null;\n    let headers = opts && 'headers' in opts ? opts.headers : C[10] || CT.C10;\n    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;\n    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;\n    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;\n    this[statusCode$] = statusCode;\n    this[contentLength$] = contentLength;\n    this[request$0] = request;\n    this[headers$] = headers;\n    this[isRedirect$] = isRedirect;\n    this[persistentConnection$] = persistentConnection;\n    this[reasonPhrase$] = reasonPhrase;\n    if (this.statusCode < 100) {\n      dart.throw(new core.ArgumentError.new(\"Invalid status code \" + dart.str(this.statusCode) + \".\"));\n    } else if (this.contentLength != null && dart.nullCheck(this.contentLength) < 0) {\n      dart.throw(new core.ArgumentError.new(\"Invalid content length \" + dart.str(this.contentLength) + \".\"));\n    }\n  }).prototype = base_response.BaseResponse.prototype;\n  dart.addTypeTests(base_response.BaseResponse);\n  dart.addTypeCaches(base_response.BaseResponse);\n  dart.setLibraryUri(base_response.BaseResponse, I[34]);\n  dart.setFieldSignature(base_response.BaseResponse, () => ({\n    __proto__: dart.getFields(base_response.BaseResponse.__proto__),\n    request: dart.finalFieldType(dart.nullable(base_request.BaseRequest)),\n    statusCode: dart.finalFieldType(core.int),\n    reasonPhrase: dart.finalFieldType(dart.nullable(core.String)),\n    contentLength: dart.finalFieldType(dart.nullable(core.int)),\n    headers: dart.finalFieldType(core.Map$(core.String, core.String)),\n    isRedirect: dart.finalFieldType(core.bool),\n    persistentConnection: dart.finalFieldType(core.bool)\n  }));\n  response$.Response = class Response extends base_response.BaseResponse {\n    get bodyBytes() {\n      return this[bodyBytes$];\n    }\n    set bodyBytes(value) {\n      super.bodyBytes = value;\n    }\n    get body() {\n      return response$._encodingForHeaders(this.headers).decode(this.bodyBytes);\n    }\n    static ['_#new#tearOff'](body, statusCode, opts) {\n      let request = opts && 'request' in opts ? opts.request : null;\n      let headers = opts && 'headers' in opts ? opts.headers : C[10] || CT.C10;\n      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;\n      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;\n      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;\n      return new response$.Response.new(body, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});\n    }\n    static ['_#bytes#tearOff'](bodyBytes, statusCode, opts) {\n      let request = opts && 'request' in opts ? opts.request : null;\n      let headers = opts && 'headers' in opts ? opts.headers : C[10] || CT.C10;\n      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;\n      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;\n      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;\n      return new response$.Response.bytes(bodyBytes, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});\n    }\n    static fromStream(response) {\n      return async.async(response$.Response, function* fromStream() {\n        let body = (yield response.stream.toBytes());\n        return new response$.Response.bytes(body, response.statusCode, {request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});\n      });\n    }\n  };\n  (response$.Response.new = function(body, statusCode, opts) {\n    let request = opts && 'request' in opts ? opts.request : null;\n    let headers = opts && 'headers' in opts ? opts.headers : C[10] || CT.C10;\n    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;\n    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;\n    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;\n    response$.Response.bytes.call(this, response$._encodingForHeaders(headers).encode(body), statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});\n  }).prototype = response$.Response.prototype;\n  (response$.Response.bytes = function(bodyBytes, statusCode, opts) {\n    let request = opts && 'request' in opts ? opts.request : null;\n    let headers = opts && 'headers' in opts ? opts.headers : C[10] || CT.C10;\n    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;\n    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;\n    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;\n    this[bodyBytes$] = utils$.toUint8List(bodyBytes);\n    response$.Response.__proto__.new.call(this, statusCode, {contentLength: bodyBytes[$length], request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});\n    ;\n  }).prototype = response$.Response.prototype;\n  dart.addTypeTests(response$.Response);\n  dart.addTypeCaches(response$.Response);\n  dart.setStaticMethodSignature(response$.Response, () => ['fromStream']);\n  dart.setGetterSignature(response$.Response, () => ({\n    __proto__: dart.getGetters(response$.Response.__proto__),\n    body: core.String\n  }));\n  dart.setLibraryUri(response$.Response, I[35]);\n  dart.setFieldSignature(response$.Response, () => ({\n    __proto__: dart.getFields(response$.Response.__proto__),\n    bodyBytes: dart.finalFieldType(typed_data.Uint8List)\n  }));\n  response$._encodingForHeaders = function _encodingForHeaders(headers) {\n    return utils$.encodingForCharset(response$._contentTypeForHeaders(headers).parameters[$_get](\"charset\"));\n  };\n  response$._contentTypeForHeaders = function _contentTypeForHeaders(headers) {\n    let contentType = headers[$_get](\"content-type\");\n    if (contentType != null) return media_type.MediaType.parse(contentType);\n    return new media_type.MediaType.new(\"application\", \"octet-stream\");\n  };\n  var _controller$ = dart.privateName(streamed_request, \"_controller\");\n  streamed_request.StreamedRequest = class StreamedRequest extends base_request.BaseRequest {\n    get sink() {\n      return this[_controller$].sink;\n    }\n    static ['_#new#tearOff'](method, url) {\n      return new streamed_request.StreamedRequest.new(method, url);\n    }\n    finalize() {\n      super.finalize();\n      return new byte_stream.ByteStream.new(this[_controller$].stream);\n    }\n  };\n  (streamed_request.StreamedRequest.new = function(method, url) {\n    this[_controller$] = T$.StreamControllerOfListOfint().new({sync: true});\n    streamed_request.StreamedRequest.__proto__.new.call(this, method, url);\n    ;\n  }).prototype = streamed_request.StreamedRequest.prototype;\n  dart.addTypeTests(streamed_request.StreamedRequest);\n  dart.addTypeCaches(streamed_request.StreamedRequest);\n  dart.setGetterSignature(streamed_request.StreamedRequest, () => ({\n    __proto__: dart.getGetters(streamed_request.StreamedRequest.__proto__),\n    sink: async.EventSink$(core.List$(core.int))\n  }));\n  dart.setLibraryUri(streamed_request.StreamedRequest, I[36]);\n  dart.setFieldSignature(streamed_request.StreamedRequest, () => ({\n    __proto__: dart.getFields(streamed_request.StreamedRequest.__proto__),\n    [_controller$]: dart.finalFieldType(async.StreamController$(core.List$(core.int)))\n  }));\n  var _sendUnstreamed = dart.privateName(base_client, \"_sendUnstreamed\");\n  var _checkResponseSuccess = dart.privateName(base_client, \"_checkResponseSuccess\");\n  base_client.BaseClient = class BaseClient extends core.Object {\n    head(url, opts) {\n      let headers = opts && 'headers' in opts ? opts.headers : null;\n      return this[_sendUnstreamed](\"HEAD\", url, headers);\n    }\n    get(url, opts) {\n      let headers = opts && 'headers' in opts ? opts.headers : null;\n      return this[_sendUnstreamed](\"GET\", url, headers);\n    }\n    post(url, opts) {\n      let headers = opts && 'headers' in opts ? opts.headers : null;\n      let body = opts && 'body' in opts ? opts.body : null;\n      let encoding = opts && 'encoding' in opts ? opts.encoding : null;\n      return this[_sendUnstreamed](\"POST\", url, headers, body, encoding);\n    }\n    put(url, opts) {\n      let headers = opts && 'headers' in opts ? opts.headers : null;\n      let body = opts && 'body' in opts ? opts.body : null;\n      let encoding = opts && 'encoding' in opts ? opts.encoding : null;\n      return this[_sendUnstreamed](\"PUT\", url, headers, body, encoding);\n    }\n    patch(url, opts) {\n      let headers = opts && 'headers' in opts ? opts.headers : null;\n      let body = opts && 'body' in opts ? opts.body : null;\n      let encoding = opts && 'encoding' in opts ? opts.encoding : null;\n      return this[_sendUnstreamed](\"PATCH\", url, headers, body, encoding);\n    }\n    delete(url, opts) {\n      let headers = opts && 'headers' in opts ? opts.headers : null;\n      let body = opts && 'body' in opts ? opts.body : null;\n      let encoding = opts && 'encoding' in opts ? opts.encoding : null;\n      return this[_sendUnstreamed](\"DELETE\", url, headers, body, encoding);\n    }\n    read(url, opts) {\n      let headers = opts && 'headers' in opts ? opts.headers : null;\n      return async.async(core.String, (function* read() {\n        let response = (yield this.get(url, {headers: headers}));\n        this[_checkResponseSuccess](url, response);\n        return response.body;\n      }).bind(this));\n    }\n    readBytes(url, opts) {\n      let headers = opts && 'headers' in opts ? opts.headers : null;\n      return async.async(typed_data.Uint8List, (function* readBytes() {\n        let response = (yield this.get(url, {headers: headers}));\n        this[_checkResponseSuccess](url, response);\n        return response.bodyBytes;\n      }).bind(this));\n    }\n    [_sendUnstreamed](method, url, headers, body = null, encoding = null) {\n      return async.async(response$.Response, (function* _sendUnstreamed() {\n        let request = new request$.Request.new(method, url);\n        if (headers != null) request.headers[$addAll](headers);\n        if (encoding != null) request.encoding = encoding;\n        if (body != null) {\n          if (typeof body == 'string') {\n            request.body = body;\n          } else if (core.List.is(body)) {\n            request.bodyBytes = body[$cast](core.int);\n          } else if (core.Map.is(body)) {\n            request.bodyFields = body[$cast](core.String, core.String);\n          } else {\n            dart.throw(new core.ArgumentError.new(\"Invalid request body \\\"\" + dart.str(body) + \"\\\".\"));\n          }\n        }\n        return response$.Response.fromStream(yield this.send(request));\n      }).bind(this));\n    }\n    [_checkResponseSuccess](url, response) {\n      if (response.statusCode < 400) return;\n      let message = \"Request to \" + dart.str(url) + \" failed with status \" + dart.str(response.statusCode);\n      if (response.reasonPhrase != null) {\n        message = message + \": \" + dart.str(response.reasonPhrase);\n      }\n      dart.throw(new exception.ClientException.new(message + \".\", url));\n    }\n    close() {\n    }\n  };\n  (base_client.BaseClient.new = function() {\n    ;\n  }).prototype = base_client.BaseClient.prototype;\n  dart.addTypeTests(base_client.BaseClient);\n  dart.addTypeCaches(base_client.BaseClient);\n  base_client.BaseClient[dart.implements] = () => [client$.Client];\n  dart.setMethodSignature(base_client.BaseClient, () => ({\n    __proto__: dart.getMethods(base_client.BaseClient.__proto__),\n    head: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),\n    get: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),\n    post: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),\n    put: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),\n    patch: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),\n    delete: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),\n    read: dart.fnType(async.Future$(core.String), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),\n    readBytes: dart.fnType(async.Future$(typed_data.Uint8List), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),\n    [_sendUnstreamed]: dart.fnType(async.Future$(response$.Response), [core.String, core.Uri, dart.nullable(core.Map$(core.String, core.String))], [dart.dynamic, dart.nullable(convert.Encoding)]),\n    [_checkResponseSuccess]: dart.fnType(dart.void, [core.Uri, response$.Response]),\n    close: dart.fnType(dart.void, [])\n  }));\n  dart.setLibraryUri(base_client.BaseClient, I[37]);\n  byte_stream.ByteStream = class ByteStream extends async.StreamView$(core.List$(core.int)) {\n    static ['_#new#tearOff'](stream) {\n      return new byte_stream.ByteStream.new(stream);\n    }\n    static fromBytes(bytes) {\n      return new byte_stream.ByteStream.new(T$.StreamOfListOfint().value(bytes));\n    }\n    static ['_#fromBytes#tearOff'](bytes) {\n      return byte_stream.ByteStream.fromBytes(bytes);\n    }\n    toBytes() {\n      let completer = T$.CompleterOfUint8List().new();\n      let sink = new convert._ByteCallbackSink.new(dart.fn(bytes => completer.complete(_native_typed_data.NativeUint8List.fromList(bytes)), T$.ListOfintTovoid()));\n      this.listen(T$.ListOfintTovoid().as(dart.bind(sink, 'add')), {onError: dart.bind(completer, 'completeError'), onDone: dart.bind(sink, 'close'), cancelOnError: true});\n      return completer.future;\n    }\n    bytesToString(encoding = C[29] || CT.C29) {\n      return encoding.decodeStream(this);\n    }\n    toStringStream(encoding = C[29] || CT.C29) {\n      return encoding.decoder.bind(this);\n    }\n  };\n  (byte_stream.ByteStream.new = function(stream) {\n    byte_stream.ByteStream.__proto__.new.call(this, stream);\n    ;\n  }).prototype = byte_stream.ByteStream.prototype;\n  dart.addTypeTests(byte_stream.ByteStream);\n  dart.addTypeCaches(byte_stream.ByteStream);\n  dart.setMethodSignature(byte_stream.ByteStream, () => ({\n    __proto__: dart.getMethods(byte_stream.ByteStream.__proto__),\n    toBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),\n    bytesToString: dart.fnType(async.Future$(core.String), [], [convert.Encoding]),\n    toStringStream: dart.fnType(async.Stream$(core.String), [], [convert.Encoding])\n  }));\n  dart.setStaticMethodSignature(byte_stream.ByteStream, () => ['fromBytes']);\n  dart.setLibraryUri(byte_stream.ByteStream, I[38]);\n  var field$ = dart.privateName(multipart_file, \"MultipartFile.field\");\n  var length$ = dart.privateName(multipart_file, \"MultipartFile.length\");\n  var filename$ = dart.privateName(multipart_file, \"MultipartFile.filename\");\n  var contentType$ = dart.privateName(multipart_file, \"MultipartFile.contentType\");\n  var _isFinalized = dart.privateName(multipart_file, \"_isFinalized\");\n  var _stream = dart.privateName(multipart_file, \"_stream\");\n  multipart_file.MultipartFile = class MultipartFile extends core.Object {\n    get field() {\n      return this[field$];\n    }\n    set field(value) {\n      super.field = value;\n    }\n    get length() {\n      return this[length$];\n    }\n    set length(value) {\n      super.length = value;\n    }\n    get filename() {\n      return this[filename$];\n    }\n    set filename(value) {\n      super.filename = value;\n    }\n    get contentType() {\n      return this[contentType$];\n    }\n    set contentType(value) {\n      super.contentType = value;\n    }\n    get isFinalized() {\n      return this[_isFinalized];\n    }\n    static ['_#new#tearOff'](field, stream, length, opts) {\n      let filename = opts && 'filename' in opts ? opts.filename : null;\n      let contentType = opts && 'contentType' in opts ? opts.contentType : null;\n      return new multipart_file.MultipartFile.new(field, stream, length, {filename: filename, contentType: contentType});\n    }\n    static fromBytes(field, value, opts) {\n      let filename = opts && 'filename' in opts ? opts.filename : null;\n      let contentType = opts && 'contentType' in opts ? opts.contentType : null;\n      let stream = byte_stream.ByteStream.fromBytes(value);\n      return new multipart_file.MultipartFile.new(field, stream, value[$length], {filename: filename, contentType: contentType});\n    }\n    static ['_#fromBytes#tearOff'](field, value, opts) {\n      let filename = opts && 'filename' in opts ? opts.filename : null;\n      let contentType = opts && 'contentType' in opts ? opts.contentType : null;\n      return multipart_file.MultipartFile.fromBytes(field, value, {filename: filename, contentType: contentType});\n    }\n    static fromString(field, value, opts) {\n      let filename = opts && 'filename' in opts ? opts.filename : null;\n      let contentType = opts && 'contentType' in opts ? opts.contentType : null;\n      contentType == null ? contentType = new media_type.MediaType.new(\"text\", \"plain\") : null;\n      let encoding = utils$.encodingForCharset(contentType.parameters[$_get](\"charset\"), convert.utf8);\n      contentType = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from([\"charset\", encoding.name])});\n      return multipart_file.MultipartFile.fromBytes(field, encoding.encode(value), {filename: filename, contentType: contentType});\n    }\n    static ['_#fromString#tearOff'](field, value, opts) {\n      let filename = opts && 'filename' in opts ? opts.filename : null;\n      let contentType = opts && 'contentType' in opts ? opts.contentType : null;\n      return multipart_file.MultipartFile.fromString(field, value, {filename: filename, contentType: contentType});\n    }\n    static fromPath(field, filePath, opts) {\n      let filename = opts && 'filename' in opts ? opts.filename : null;\n      let contentType = opts && 'contentType' in opts ? opts.contentType : null;\n      return multipart_file_stub.multipartFileFromPath(field, filePath, {filename: filename, contentType: contentType});\n    }\n    finalize() {\n      if (this.isFinalized) {\n        dart.throw(new core.StateError.new(\"Can't finalize a finalized MultipartFile.\"));\n      }\n      this[_isFinalized] = true;\n      return this[_stream];\n    }\n  };\n  (multipart_file.MultipartFile.new = function(field, stream, length, opts) {\n    let t23;\n    let filename = opts && 'filename' in opts ? opts.filename : null;\n    let contentType = opts && 'contentType' in opts ? opts.contentType : null;\n    this[_isFinalized] = false;\n    this[field$] = field;\n    this[length$] = length;\n    this[filename$] = filename;\n    this[_stream] = utils$.toByteStream(stream);\n    this[contentType$] = (t23 = contentType, t23 == null ? new media_type.MediaType.new(\"application\", \"octet-stream\") : t23);\n    ;\n  }).prototype = multipart_file.MultipartFile.prototype;\n  dart.addTypeTests(multipart_file.MultipartFile);\n  dart.addTypeCaches(multipart_file.MultipartFile);\n  dart.setMethodSignature(multipart_file.MultipartFile, () => ({\n    __proto__: dart.getMethods(multipart_file.MultipartFile.__proto__),\n    finalize: dart.fnType(byte_stream.ByteStream, [])\n  }));\n  dart.setStaticMethodSignature(multipart_file.MultipartFile, () => ['fromBytes', 'fromString', 'fromPath']);\n  dart.setGetterSignature(multipart_file.MultipartFile, () => ({\n    __proto__: dart.getGetters(multipart_file.MultipartFile.__proto__),\n    isFinalized: core.bool\n  }));\n  dart.setLibraryUri(multipart_file.MultipartFile, I[39]);\n  dart.setFieldSignature(multipart_file.MultipartFile, () => ({\n    __proto__: dart.getFields(multipart_file.MultipartFile.__proto__),\n    field: dart.finalFieldType(core.String),\n    length: dart.finalFieldType(core.int),\n    filename: dart.finalFieldType(dart.nullable(core.String)),\n    contentType: dart.finalFieldType(media_type.MediaType),\n    [_stream]: dart.finalFieldType(byte_stream.ByteStream),\n    [_isFinalized]: dart.fieldType(core.bool)\n  }));\n  var fields = dart.privateName(multipart_request, \"MultipartRequest.fields\");\n  var files = dart.privateName(multipart_request, \"MultipartRequest.files\");\n  var _headerForField = dart.privateName(multipart_request, \"_headerForField\");\n  var _headerForFile = dart.privateName(multipart_request, \"_headerForFile\");\n  var _boundaryString = dart.privateName(multipart_request, \"_boundaryString\");\n  var _finalize = dart.privateName(multipart_request, \"_finalize\");\n  var _browserEncode = dart.privateName(multipart_request, \"_browserEncode\");\n  multipart_request.MultipartRequest = class MultipartRequest extends base_request.BaseRequest {\n    get fields() {\n      return this[fields];\n    }\n    set fields(value) {\n      super.fields = value;\n    }\n    get files() {\n      return this[files];\n    }\n    set files(value) {\n      super.files = value;\n    }\n    static ['_#new#tearOff'](method, url) {\n      return new multipart_request.MultipartRequest.new(method, url);\n    }\n    get contentLength() {\n      let length = 0;\n      this.fields[$forEach](dart.fn((name, value) => {\n        length = length + (\"--\".length + 70 + \"\\r\\n\".length + convert.utf8.encode(this[_headerForField](name, value))[$length] + convert.utf8.encode(value)[$length] + \"\\r\\n\".length);\n      }, T$.StringAndStringTovoid()));\n      for (let file of this.files) {\n        length = length + (\"--\".length + 70 + \"\\r\\n\".length + convert.utf8.encode(this[_headerForFile](file))[$length] + file.length + \"\\r\\n\".length);\n      }\n      return length + \"--\".length + 70 + \"--\\r\\n\".length;\n    }\n    set contentLength(value) {\n      dart.throw(new core.UnsupportedError.new(\"Cannot set the contentLength property of \" + \"multipart requests.\"));\n    }\n    finalize() {\n      let boundary = this[_boundaryString]();\n      this.headers[$_set](\"content-type\", \"multipart/form-data; boundary=\" + boundary);\n      super.finalize();\n      return new byte_stream.ByteStream.new(this[_finalize](boundary));\n    }\n    [_finalize](boundary) {\n      return new (T$._AsyncStarImplOfListOfint()).new((function* _finalize(stream) {\n        let line = C[32] || CT.C32;\n        let separator = convert.utf8.encode(\"--\" + boundary + \"\\r\\n\");\n        let close = convert.utf8.encode(\"--\" + boundary + \"--\\r\\n\");\n        for (let field of this.fields[$entries]) {\n          if (stream.add(separator)) return;\n          yield;\n          if (stream.add(convert.utf8.encode(this[_headerForField](field.key, field.value)))) return;\n          yield;\n          if (stream.add(convert.utf8.encode(field.value))) return;\n          yield;\n          if (stream.add(line)) return;\n          yield;\n        }\n        for (let file of this.files) {\n          if (stream.add(separator)) return;\n          yield;\n          if (stream.add(convert.utf8.encode(this[_headerForFile](file)))) return;\n          yield;\n          if (stream.addStream(file.finalize())) return;\n          yield;\n          if (stream.add(line)) return;\n          yield;\n        }\n        if (stream.add(close)) return;\n        yield;\n      }).bind(this)).stream;\n    }\n    [_headerForField](name, value) {\n      let header = \"content-disposition: form-data; name=\\\"\" + this[_browserEncode](name) + \"\\\"\";\n      if (!utils$.isPlainAscii(value)) {\n        header = header + \"\\r\\n\" + \"content-type: text/plain; charset=utf-8\\r\\n\" + \"content-transfer-encoding: binary\";\n      }\n      return header + \"\\r\\n\\r\\n\";\n    }\n    [_headerForFile](file) {\n      let header = \"content-type: \" + dart.str(file.contentType) + \"\\r\\n\" + \"content-disposition: form-data; name=\\\"\" + this[_browserEncode](file.field) + \"\\\"\";\n      if (file.filename != null) {\n        header = header + \"; filename=\\\"\" + this[_browserEncode](dart.nullCheck(file.filename)) + \"\\\"\";\n      }\n      return header + \"\\r\\n\\r\\n\";\n    }\n    [_browserEncode](value) {\n      return value[$replaceAll](multipart_request._newlineRegExp, \"%0D%0A\")[$replaceAll](\"\\\"\", \"%22\");\n    }\n    [_boundaryString]() {\n      let prefix = \"dart-http-boundary-\";\n      let list = T$.ListOfint().generate(70 - prefix.length, dart.fn(index => boundary_characters.boundaryCharacters[$_get](multipart_request.MultipartRequest._random.nextInt(boundary_characters.boundaryCharacters[$length])), T$.intToint()), {growable: false});\n      return prefix + core.String.fromCharCodes(list);\n    }\n  };\n  (multipart_request.MultipartRequest.new = function(method, url) {\n    this[fields] = new (T$.IdentityMapOfString$String()).new();\n    this[files] = T$.JSArrayOfMultipartFile().of([]);\n    multipart_request.MultipartRequest.__proto__.new.call(this, method, url);\n    ;\n  }).prototype = multipart_request.MultipartRequest.prototype;\n  dart.addTypeTests(multipart_request.MultipartRequest);\n  dart.addTypeCaches(multipart_request.MultipartRequest);\n  dart.setMethodSignature(multipart_request.MultipartRequest, () => ({\n    __proto__: dart.getMethods(multipart_request.MultipartRequest.__proto__),\n    [_finalize]: dart.fnType(async.Stream$(core.List$(core.int)), [core.String]),\n    [_headerForField]: dart.fnType(core.String, [core.String, core.String]),\n    [_headerForFile]: dart.fnType(core.String, [multipart_file.MultipartFile]),\n    [_browserEncode]: dart.fnType(core.String, [core.String]),\n    [_boundaryString]: dart.fnType(core.String, [])\n  }));\n  dart.setGetterSignature(multipart_request.MultipartRequest, () => ({\n    __proto__: dart.getGetters(multipart_request.MultipartRequest.__proto__),\n    contentLength: core.int\n  }));\n  dart.setLibraryUri(multipart_request.MultipartRequest, I[40]);\n  dart.setFieldSignature(multipart_request.MultipartRequest, () => ({\n    __proto__: dart.getFields(multipart_request.MultipartRequest.__proto__),\n    fields: dart.finalFieldType(core.Map$(core.String, core.String)),\n    files: dart.finalFieldType(core.List$(multipart_file.MultipartFile))\n  }));\n  dart.setStaticFieldSignature(multipart_request.MultipartRequest, () => ['_boundaryLength', '_random']);\n  dart.defineLazy(multipart_request.MultipartRequest, {\n    /*multipart_request.MultipartRequest._boundaryLength*/get _boundaryLength() {\n      return 70;\n    },\n    /*multipart_request.MultipartRequest._random*/get _random() {\n      return math.Random.new();\n    }\n  }, false);\n  dart.defineLazy(multipart_request, {\n    /*multipart_request._newlineRegExp*/get _newlineRegExp() {\n      return core.RegExp.new(\"\\\\r\\\\n|\\\\r|\\\\n\");\n    }\n  }, false);\n  var stream$ = dart.privateName(streamed_response, \"StreamedResponse.stream\");\n  streamed_response.StreamedResponse = class StreamedResponse extends base_response.BaseResponse {\n    get stream() {\n      return this[stream$];\n    }\n    set stream(value) {\n      super.stream = value;\n    }\n    static ['_#new#tearOff'](stream, statusCode, opts) {\n      let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;\n      let request = opts && 'request' in opts ? opts.request : null;\n      let headers = opts && 'headers' in opts ? opts.headers : C[10] || CT.C10;\n      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;\n      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;\n      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;\n      return new streamed_response.StreamedResponse.new(stream, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});\n    }\n  };\n  (streamed_response.StreamedResponse.new = function(stream, statusCode, opts) {\n    let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;\n    let request = opts && 'request' in opts ? opts.request : null;\n    let headers = opts && 'headers' in opts ? opts.headers : C[10] || CT.C10;\n    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;\n    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;\n    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;\n    this[stream$] = utils$.toByteStream(stream);\n    streamed_response.StreamedResponse.__proto__.new.call(this, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});\n    ;\n  }).prototype = streamed_response.StreamedResponse.prototype;\n  dart.addTypeTests(streamed_response.StreamedResponse);\n  dart.addTypeCaches(streamed_response.StreamedResponse);\n  dart.setLibraryUri(streamed_response.StreamedResponse, I[41]);\n  dart.setFieldSignature(streamed_response.StreamedResponse, () => ({\n    __proto__: dart.getFields(streamed_response.StreamedResponse.__proto__),\n    stream: dart.finalFieldType(byte_stream.ByteStream)\n  }));\n  var withCredentials = dart.privateName(browser_client, \"BrowserClient.withCredentials\");\n  var _xhrs = dart.privateName(browser_client, \"_xhrs\");\n  browser_client.BrowserClient = class BrowserClient extends base_client.BaseClient {\n    get withCredentials() {\n      return this[withCredentials];\n    }\n    set withCredentials(value) {\n      this[withCredentials] = value;\n    }\n    send(request) {\n      return async.async(streamed_response.StreamedResponse, (function* send() {\n        let t23;\n        let bytes = (yield request.finalize().toBytes());\n        let xhr = html.HttpRequest.new();\n        this[_xhrs].add(xhr);\n        t23 = xhr;\n        (() => {\n          t23.open(request.method, dart.str(request.url), {async: true});\n          t23[$responseType] = \"arraybuffer\";\n          t23.withCredentials = this.withCredentials;\n          return t23;\n        })();\n        request.headers[$forEach](dart.bind(xhr, 'setRequestHeader'));\n        let completer = T$.CompleterOfStreamedResponse().new();\n        async.unawaited(xhr[$onLoad].first.then(dart.void, dart.fn(_ => {\n          let body = typed_data.ByteBuffer.as(xhr[$response])[$asUint8List]();\n          completer.complete(new streamed_response.StreamedResponse.new(byte_stream.ByteStream.fromBytes(body), dart.nullCheck(xhr.status), {contentLength: body[$length], request: request, headers: xhr[$responseHeaders], reasonPhrase: xhr.statusText}));\n        }, T$.ProgressEventToNull())));\n        async.unawaited(xhr[$onError].first.then(dart.void, dart.fn(_ => {\n          completer.completeError(new exception.ClientException.new(\"XMLHttpRequest error.\", request.url), core.StackTrace.current);\n        }, T$.ProgressEventToNull())));\n        xhr.send(bytes);\n        try {\n          return yield completer.future;\n        } finally {\n          this[_xhrs].remove(xhr);\n        }\n      }).bind(this));\n    }\n    close() {\n      for (let xhr of this[_xhrs]) {\n        xhr.abort();\n      }\n    }\n    static ['_#new#tearOff']() {\n      return new browser_client.BrowserClient.new();\n    }\n  };\n  (browser_client.BrowserClient.new = function() {\n    this[_xhrs] = T$.LinkedHashSetOfHttpRequest().new();\n    this[withCredentials] = false;\n    ;\n  }).prototype = browser_client.BrowserClient.prototype;\n  dart.addTypeTests(browser_client.BrowserClient);\n  dart.addTypeCaches(browser_client.BrowserClient);\n  dart.setMethodSignature(browser_client.BrowserClient, () => ({\n    __proto__: dart.getMethods(browser_client.BrowserClient.__proto__),\n    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), [base_request.BaseRequest])\n  }));\n  dart.setLibraryUri(browser_client.BrowserClient, I[42]);\n  dart.setFieldSignature(browser_client.BrowserClient, () => ({\n    __proto__: dart.getFields(browser_client.BrowserClient.__proto__),\n    [_xhrs]: dart.finalFieldType(core.Set$(html.HttpRequest)),\n    withCredentials: dart.fieldType(core.bool)\n  }));\n  browser_client.createClient = function createClient() {\n    return new browser_client.BrowserClient.new();\n  };\n  var Latin1Codec__allowInvalid = dart.privateName(convert, \"Latin1Codec._allowInvalid\");\n  utils$.mapToQuery = function mapToQuery(map, opts) {\n    let encoding = opts && 'encoding' in opts ? opts.encoding : null;\n    let pairs = T$.JSArrayOfListOfString().of([]);\n    map[$forEach](dart.fn((key, value) => {\n      let t23, t23$;\n      return pairs[$add](T$.JSArrayOfString().of([core.Uri.encodeQueryComponent(key, {encoding: (t23 = encoding, t23 == null ? convert.utf8 : t23)}), core.Uri.encodeQueryComponent(value, {encoding: (t23$ = encoding, t23$ == null ? convert.utf8 : t23$)})]));\n    }, T$.StringAndStringTovoid()));\n    return pairs[$map](core.String, dart.fn(pair => pair[$_get](0) + \"=\" + pair[$_get](1), T$.ListOfStringToString()))[$join](\"&\");\n  };\n  utils$.encodingForCharset = function encodingForCharset(charset, fallback = C[33] || CT.C33) {\n    let t23;\n    if (charset == null) return fallback;\n    t23 = convert.Encoding.getByName(charset);\n    return t23 == null ? fallback : t23;\n  };\n  utils$.requiredEncodingForCharset = function requiredEncodingForCharset(charset) {\n    let t23;\n    t23 = convert.Encoding.getByName(charset);\n    return t23 == null ? dart.throw(new core.FormatException.new(\"Unsupported encoding \\\"\" + charset + \"\\\".\")) : t23;\n  };\n  utils$.isPlainAscii = function isPlainAscii(string) {\n    return utils$._asciiOnly.hasMatch(string);\n  };\n  utils$.toUint8List = function toUint8List(input) {\n    if (typed_data.Uint8List.is(input)) return input;\n    if (typed_data.TypedData.is(input)) {\n      return typed_data.Uint8List.view(typed_data.TypedData.as(input)[$buffer]);\n    }\n    return _native_typed_data.NativeUint8List.fromList(input);\n  };\n  utils$.toByteStream = function toByteStream(stream) {\n    if (byte_stream.ByteStream.is(stream)) return stream;\n    return new byte_stream.ByteStream.new(stream);\n  };\n  utils$.onDone = function onDone(T, stream, onDone) {\n    return stream.transform(T, new (async._StreamHandlerTransformer$(T, T)).new({handleDone: dart.fn(sink => {\n        sink.close();\n        onDone();\n      }, dart.fnType(dart.void, [async.EventSink$(T)]))}));\n  };\n  dart.defineLazy(utils$, {\n    /*utils$._asciiOnly*/get _asciiOnly() {\n      return core.RegExp.new(\"^[\\\\x00-\\\\x7F]+$\");\n    }\n  }, false);\n  multipart_file_stub.multipartFileFromPath = function multipartFileFromPath(field, filePath, opts) {\n    let filename = opts && 'filename' in opts ? opts.filename : null;\n    let contentType = opts && 'contentType' in opts ? opts.contentType : null;\n    return dart.throw(new core.UnsupportedError.new(\"MultipartFile is only supported where dart:io is available.\"));\n  };\n  dart.defineLazy(boundary_characters, {\n    /*boundary_characters.boundaryCharacters*/get boundaryCharacters() {\n      return C[34] || CT.C34;\n    }\n  }, false);\n  var scheme$ = dart.privateName(authentication_challenge, \"AuthenticationChallenge.scheme\");\n  var parameters$ = dart.privateName(authentication_challenge, \"AuthenticationChallenge.parameters\");\n  authentication_challenge.AuthenticationChallenge = class AuthenticationChallenge extends core.Object {\n    get scheme() {\n      return this[scheme$];\n    }\n    set scheme(value) {\n      super.scheme = value;\n    }\n    get parameters() {\n      return this[parameters$];\n    }\n    set parameters(value) {\n      super.parameters = value;\n    }\n    static parseHeader(header) {\n      return utils$0.wrapFormatException(T$.ListOfAuthenticationChallenge(), \"authentication header\", header, dart.fn(() => {\n        let scanner = new string_scanner.StringScanner.new(header);\n        scanner.scan(scan.whitespace);\n        let challenges = scan.parseList(authentication_challenge.AuthenticationChallenge, scanner, dart.fn(() => {\n          let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner, {whitespaceName: \"\\\" \\\" or \\\"=\\\"\"});\n          let params = new (T$.IdentityMapOfString$String()).new();\n          while (scanner.scan(\",\")) {\n            scanner.scan(scan.whitespace);\n          }\n          authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params);\n          let beforeComma = scanner.position;\n          while (scanner.scan(\",\")) {\n            scanner.scan(scan.whitespace);\n            if (scanner.matches(\",\") || scanner.isDone) continue;\n            scanner.expect(scan.token, {name: \"a token\"});\n            let name = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));\n            scanner.scan(scan.whitespace);\n            if (!scanner.scan(\"=\")) {\n              scanner.position = beforeComma;\n              break;\n            }\n            scanner.scan(scan.whitespace);\n            if (scanner.scan(scan.token)) {\n              params[$_set](name, dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));\n            } else {\n              params[$_set](name, scan.expectQuotedString(scanner, {name: \"a token or a quoted string\"}));\n            }\n            scanner.scan(scan.whitespace);\n            beforeComma = scanner.position;\n          }\n          return new authentication_challenge.AuthenticationChallenge.new(scheme, params);\n        }, T$.VoidToAuthenticationChallenge()));\n        scanner.expectDone();\n        return challenges;\n      }, T$.VoidToListOfAuthenticationChallenge()));\n    }\n    static parse(challenge) {\n      return utils$0.wrapFormatException(authentication_challenge.AuthenticationChallenge, \"authentication challenge\", challenge, dart.fn(() => {\n        let scanner = new string_scanner.StringScanner.new(challenge);\n        scanner.scan(scan.whitespace);\n        let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner);\n        let params = new (T$.IdentityMapOfString$String()).new();\n        scan.parseList(dart.void, scanner, dart.fn(() => authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params), T$.VoidTovoid()));\n        scanner.expectDone();\n        return new authentication_challenge.AuthenticationChallenge.new(scheme, params);\n      }, T$.VoidToAuthenticationChallenge()));\n    }\n    static ['_#parse#tearOff'](challenge) {\n      return authentication_challenge.AuthenticationChallenge.parse(challenge);\n    }\n    static _scanScheme(scanner, opts) {\n      let whitespaceName = opts && 'whitespaceName' in opts ? opts.whitespaceName : null;\n      scanner.expect(scan.token, {name: \"a token\"});\n      let scheme = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[$toLowerCase]();\n      scanner.scan(scan.whitespace);\n      if (scanner.lastMatch == null || !dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[$contains](\" \")) {\n        scanner.expect(\" \", {name: whitespaceName});\n      }\n      return scheme;\n    }\n    static _scanAuthParam(scanner, params) {\n      scanner.expect(scan.token, {name: \"a token\"});\n      let name = dart.nullCheck(scanner.lastMatch)._get(0);\n      scanner.scan(scan.whitespace);\n      scanner.expect(\"=\");\n      scanner.scan(scan.whitespace);\n      if (scanner.scan(scan.token)) {\n        params[$_set](name, dart.nullCheck(scanner.lastMatch)._get(0));\n      } else {\n        params[$_set](name, scan.expectQuotedString(scanner, {name: \"a token or a quoted string\"}));\n      }\n      scanner.scan(scan.whitespace);\n    }\n    static ['_#new#tearOff'](scheme, parameters) {\n      return new authentication_challenge.AuthenticationChallenge.new(scheme, parameters);\n    }\n  };\n  (authentication_challenge.AuthenticationChallenge.new = function(scheme, parameters) {\n    this[scheme$] = scheme;\n    this[parameters$] = new (T$.UnmodifiableMapViewOfString$String()).new(new (T$.CaseInsensitiveMapOfString()).from(parameters));\n    ;\n  }).prototype = authentication_challenge.AuthenticationChallenge.prototype;\n  dart.addTypeTests(authentication_challenge.AuthenticationChallenge);\n  dart.addTypeCaches(authentication_challenge.AuthenticationChallenge);\n  dart.setStaticMethodSignature(authentication_challenge.AuthenticationChallenge, () => ['parseHeader', 'parse', '_scanScheme', '_scanAuthParam']);\n  dart.setLibraryUri(authentication_challenge.AuthenticationChallenge, I[43]);\n  dart.setFieldSignature(authentication_challenge.AuthenticationChallenge, () => ({\n    __proto__: dart.getFields(authentication_challenge.AuthenticationChallenge.__proto__),\n    scheme: dart.finalFieldType(core.String),\n    parameters: dart.finalFieldType(core.Map$(core.String, core.String))\n  }));\n  const _is_CaseInsensitiveMap_default = Symbol('_is_CaseInsensitiveMap_default');\n  case_insensitive_map.CaseInsensitiveMap$ = dart.generic(V => {\n    class CaseInsensitiveMap extends canonicalized_map.CanonicalizedMap$(core.String, core.String, V) {\n      static ['_#new#tearOff'](V) {\n        return new (case_insensitive_map.CaseInsensitiveMap$(V)).new();\n      }\n      static ['_#from#tearOff'](V, other) {\n        return new (case_insensitive_map.CaseInsensitiveMap$(V)).from(other);\n      }\n    }\n    (CaseInsensitiveMap.new = function() {\n      CaseInsensitiveMap.__proto__.new.call(this, dart.fn(key => key[$toLowerCase](), T$.StringToString()));\n      ;\n    }).prototype = CaseInsensitiveMap.prototype;\n    (CaseInsensitiveMap.from = function(other) {\n      CaseInsensitiveMap.__proto__.from.call(this, other, dart.fn(key => key[$toLowerCase](), T$.StringToString()));\n      ;\n    }).prototype = CaseInsensitiveMap.prototype;\n    dart.addTypeTests(CaseInsensitiveMap);\n    CaseInsensitiveMap.prototype[_is_CaseInsensitiveMap_default] = true;\n    dart.addTypeCaches(CaseInsensitiveMap);\n    dart.setLibraryUri(CaseInsensitiveMap, I[44]);\n    return CaseInsensitiveMap;\n  });\n  case_insensitive_map.CaseInsensitiveMap = case_insensitive_map.CaseInsensitiveMap$();\n  dart.addTypeTests(case_insensitive_map.CaseInsensitiveMap, _is_CaseInsensitiveMap_default);\n  chunked_coding.ChunkedCodingCodec = class ChunkedCodingCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {\n    get encoder() {\n      return encoder.chunkedCodingEncoder;\n    }\n    get decoder() {\n      return decoder.chunkedCodingDecoder;\n    }\n    static ['_#_#tearOff']() {\n      return new chunked_coding.ChunkedCodingCodec.__();\n    }\n  };\n  (chunked_coding.ChunkedCodingCodec.__ = function() {\n    chunked_coding.ChunkedCodingCodec.__proto__.new.call(this);\n    ;\n  }).prototype = chunked_coding.ChunkedCodingCodec.prototype;\n  dart.addTypeTests(chunked_coding.ChunkedCodingCodec);\n  dart.addTypeCaches(chunked_coding.ChunkedCodingCodec);\n  dart.setGetterSignature(chunked_coding.ChunkedCodingCodec, () => ({\n    __proto__: dart.getGetters(chunked_coding.ChunkedCodingCodec.__proto__),\n    encoder: encoder.ChunkedCodingEncoder,\n    decoder: decoder.ChunkedCodingDecoder\n  }));\n  dart.setLibraryUri(chunked_coding.ChunkedCodingCodec, I[45]);\n  dart.defineLazy(chunked_coding, {\n    /*chunked_coding.chunkedCoding*/get chunkedCoding() {\n      return C[35] || CT.C35;\n    }\n  }, false);\n  http_date.formatHttpDate = function formatHttpDate(date) {\n    let t23;\n    date = date.toUtc();\n    let buffer = (t23 = new core.StringBuffer.new(), (() => {\n      t23.write(http_date._weekdays[$_get](date.weekday - 1));\n      t23.write(\", \");\n      t23.write(date.day <= 9 ? \"0\" : \"\");\n      t23.write(date.day[$toString]());\n      t23.write(\" \");\n      t23.write(http_date._months[$_get](date.month - 1));\n      t23.write(\" \");\n      t23.write(date.year[$toString]());\n      t23.write(date.hour <= 9 ? \" 0\" : \" \");\n      t23.write(date.hour[$toString]());\n      t23.write(date.minute <= 9 ? \":0\" : \":\");\n      t23.write(date.minute[$toString]());\n      t23.write(date.second <= 9 ? \":0\" : \":\");\n      t23.write(date.second[$toString]());\n      t23.write(\" GMT\");\n      return t23;\n    })());\n    return buffer.toString();\n  };\n  http_date.parseHttpDate = function parseHttpDate(date) {\n    return utils$0.wrapFormatException(core.DateTime, \"HTTP date\", date, dart.fn(() => {\n      let scanner = new string_scanner.StringScanner.new(date);\n      if (scanner.scan(http_date._longWeekdayRegExp)) {\n        scanner.expect(\", \");\n        let day = http_date._parseInt(scanner, 2);\n        scanner.expect(\"-\");\n        let month = http_date._parseMonth(scanner);\n        scanner.expect(\"-\");\n        let year = 1900 + http_date._parseInt(scanner, 2);\n        scanner.expect(\" \");\n        let time = http_date._parseTime(scanner);\n        scanner.expect(\" GMT\");\n        scanner.expectDone();\n        return http_date._makeDateTime(year, month, day, time);\n      }\n      scanner.expect(http_date._shortWeekdayRegExp);\n      if (scanner.scan(\", \")) {\n        let day = http_date._parseInt(scanner, 2);\n        scanner.expect(\" \");\n        let month = http_date._parseMonth(scanner);\n        scanner.expect(\" \");\n        let year = http_date._parseInt(scanner, 4);\n        scanner.expect(\" \");\n        let time = http_date._parseTime(scanner);\n        scanner.expect(\" GMT\");\n        scanner.expectDone();\n        return http_date._makeDateTime(year, month, day, time);\n      }\n      scanner.expect(\" \");\n      let month = http_date._parseMonth(scanner);\n      scanner.expect(\" \");\n      let day = scanner.scan(\" \") ? http_date._parseInt(scanner, 1) : http_date._parseInt(scanner, 2);\n      scanner.expect(\" \");\n      let time = http_date._parseTime(scanner);\n      scanner.expect(\" \");\n      let year = http_date._parseInt(scanner, 4);\n      scanner.expectDone();\n      return http_date._makeDateTime(year, month, day, time);\n    }, T$.VoidToDateTime()));\n  };\n  http_date._parseMonth = function _parseMonth(scanner) {\n    scanner.expect(http_date._monthRegExp);\n    return http_date._months[$indexOf](dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))) + 1;\n  };\n  http_date._parseInt = function _parseInt(scanner, digits) {\n    scanner.expect(http_date._digitRegExp);\n    if (dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)).length !== digits) {\n      scanner.error(\"expected a \" + dart.str(digits) + \"-digit number.\");\n    }\n    return core.int.parse(dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));\n  };\n  http_date._parseTime = function _parseTime(scanner) {\n    let hours = http_date._parseInt(scanner, 2);\n    if (hours >= 24) scanner.error(\"hours may not be greater than 24.\");\n    scanner.expect(\":\");\n    let minutes = http_date._parseInt(scanner, 2);\n    if (minutes >= 60) scanner.error(\"minutes may not be greater than 60.\");\n    scanner.expect(\":\");\n    let seconds = http_date._parseInt(scanner, 2);\n    if (seconds >= 60) scanner.error(\"seconds may not be greater than 60.\");\n    return new core.DateTime.new(1, 1, 1, hours, minutes, seconds);\n  };\n  http_date._makeDateTime = function _makeDateTime(year, month, day, time) {\n    let dateTime = new core.DateTime.utc(year, month, day, time.hour, time.minute, time.second);\n    if (dateTime.month !== month) {\n      dart.throw(new core.FormatException.new(\"invalid day '\" + dart.str(day) + \"' for month '\" + dart.str(month) + \"'.\"));\n    }\n    return dateTime;\n  };\n  dart.defineLazy(http_date, {\n    /*http_date._weekdays*/get _weekdays() {\n      return C[36] || CT.C36;\n    },\n    /*http_date._months*/get _months() {\n      return C[37] || CT.C37;\n    },\n    /*http_date._shortWeekdayRegExp*/get _shortWeekdayRegExp() {\n      return core.RegExp.new(\"Mon|Tue|Wed|Thu|Fri|Sat|Sun\");\n    },\n    /*http_date._longWeekdayRegExp*/get _longWeekdayRegExp() {\n      return core.RegExp.new(\"Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday\");\n    },\n    /*http_date._monthRegExp*/get _monthRegExp() {\n      return core.RegExp.new(\"Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec\");\n    },\n    /*http_date._digitRegExp*/get _digitRegExp() {\n      return core.RegExp.new(\"\\\\d+\");\n    }\n  }, false);\n  var type$1 = dart.privateName(media_type, \"MediaType.type\");\n  var subtype$ = dart.privateName(media_type, \"MediaType.subtype\");\n  var parameters$0 = dart.privateName(media_type, \"MediaType.parameters\");\n  media_type.MediaType = class MediaType extends core.Object {\n    get type() {\n      return this[type$1];\n    }\n    set type(value) {\n      super.type = value;\n    }\n    get subtype() {\n      return this[subtype$];\n    }\n    set subtype(value) {\n      super.subtype = value;\n    }\n    get parameters() {\n      return this[parameters$0];\n    }\n    set parameters(value) {\n      super.parameters = value;\n    }\n    get mimeType() {\n      return this.type + \"/\" + this.subtype;\n    }\n    static parse(mediaType) {\n      return utils$0.wrapFormatException(media_type.MediaType, \"media type\", mediaType, dart.fn(() => {\n        let scanner = new string_scanner.StringScanner.new(mediaType);\n        scanner.scan(scan.whitespace);\n        scanner.expect(scan.token);\n        let type = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));\n        scanner.expect(\"/\");\n        scanner.expect(scan.token);\n        let subtype = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));\n        scanner.scan(scan.whitespace);\n        let parameters = new (T$.IdentityMapOfString$String()).new();\n        while (scanner.scan(\";\")) {\n          scanner.scan(scan.whitespace);\n          scanner.expect(scan.token);\n          let attribute = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));\n          scanner.expect(\"=\");\n          let value = null;\n          if (scanner.scan(scan.token)) {\n            value = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));\n          } else {\n            value = scan.expectQuotedString(scanner);\n          }\n          scanner.scan(scan.whitespace);\n          parameters[$_set](attribute, value);\n        }\n        scanner.expectDone();\n        return new media_type.MediaType.new(type, subtype, parameters);\n      }, T$.VoidToMediaType()));\n    }\n    static ['_#parse#tearOff'](mediaType) {\n      return media_type.MediaType.parse(mediaType);\n    }\n    static ['_#new#tearOff'](type, subtype, parameters = null) {\n      return new media_type.MediaType.new(type, subtype, parameters);\n    }\n    change(opts) {\n      let type = opts && 'type' in opts ? opts.type : null;\n      let subtype = opts && 'subtype' in opts ? opts.subtype : null;\n      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;\n      let parameters = opts && 'parameters' in opts ? opts.parameters : null;\n      let clearParameters = opts && 'clearParameters' in opts ? opts.clearParameters : false;\n      if (mimeType != null) {\n        if (type != null) {\n          dart.throw(new core.ArgumentError.new(\"You may not pass both [type] and [mimeType].\"));\n        } else if (subtype != null) {\n          dart.throw(new core.ArgumentError.new(\"You may not pass both [subtype] and \" + \"[mimeType].\"));\n        }\n        let segments = mimeType[$split](\"/\");\n        if (segments[$length] !== 2) {\n          dart.throw(new core.FormatException.new(\"Invalid mime type \\\"\" + dart.str(mimeType) + \"\\\".\"));\n        }\n        type = segments[$_get](0);\n        subtype = segments[$_get](1);\n      }\n      type == null ? type = this.type : null;\n      subtype == null ? subtype = this.subtype : null;\n      parameters == null ? parameters = new (T$.IdentityMapOfString$String()).new() : null;\n      if (!clearParameters) {\n        let newParameters = parameters;\n        parameters = T$.LinkedHashMapOfString$String().from(this.parameters);\n        parameters[$addAll](newParameters);\n      }\n      return new media_type.MediaType.new(type, subtype, parameters);\n    }\n    toString() {\n      let t23;\n      let buffer = (t23 = new core.StringBuffer.new(), (() => {\n        t23.write(this.type);\n        t23.write(\"/\");\n        t23.write(this.subtype);\n        return t23;\n      })());\n      this.parameters[$forEach](dart.fn((attribute, value) => {\n        let t23;\n        buffer.write(\"; \" + attribute + \"=\");\n        if (scan.nonToken.hasMatch(value)) {\n          t23 = buffer;\n          (() => {\n            t23.write(\"\\\"\");\n            t23.write(value[$replaceAllMapped](media_type._escapedChar, dart.fn(match => \"\\\\\" + dart.str(match._get(0)), T$.MatchToString())));\n            t23.write(\"\\\"\");\n            return t23;\n          })();\n        } else {\n          buffer.write(value);\n        }\n      }, T$.StringAndStringTovoid()));\n      return buffer.toString();\n    }\n  };\n  (media_type.MediaType.new = function(type, subtype, parameters = null) {\n    this[type$1] = type[$toLowerCase]();\n    this[subtype$] = subtype[$toLowerCase]();\n    this[parameters$0] = new (T$.UnmodifiableMapViewOfString$String()).new(parameters == null ? new (T$.IdentityMapOfString$String()).new() : new (T$.CaseInsensitiveMapOfString()).from(parameters));\n    ;\n  }).prototype = media_type.MediaType.prototype;\n  dart.addTypeTests(media_type.MediaType);\n  dart.addTypeCaches(media_type.MediaType);\n  dart.setMethodSignature(media_type.MediaType, () => ({\n    __proto__: dart.getMethods(media_type.MediaType.__proto__),\n    change: dart.fnType(media_type.MediaType, [], {clearParameters: core.bool, mimeType: dart.nullable(core.String), parameters: dart.nullable(core.Map$(core.String, core.String)), subtype: dart.nullable(core.String), type: dart.nullable(core.String)}, {})\n  }));\n  dart.setStaticMethodSignature(media_type.MediaType, () => ['parse']);\n  dart.setGetterSignature(media_type.MediaType, () => ({\n    __proto__: dart.getGetters(media_type.MediaType.__proto__),\n    mimeType: core.String\n  }));\n  dart.setLibraryUri(media_type.MediaType, I[46]);\n  dart.setFieldSignature(media_type.MediaType, () => ({\n    __proto__: dart.getFields(media_type.MediaType.__proto__),\n    type: dart.finalFieldType(core.String),\n    subtype: dart.finalFieldType(core.String),\n    parameters: dart.finalFieldType(core.Map$(core.String, core.String))\n  }));\n  dart.defineExtensionMethods(media_type.MediaType, ['toString']);\n  dart.defineLazy(media_type, {\n    /*media_type._escapedChar*/get _escapedChar() {\n      return core.RegExp.new(\"[\\\"\\\\x00-\\\\x1F\\\\x7F]\");\n    }\n  }, false);\n  scan.parseList = function parseList(T, scanner, parseElement) {\n    let result = _interceptors.JSArray$(T).of([]);\n    while (scanner.scan(\",\")) {\n      scanner.scan(scan.whitespace);\n    }\n    result[$add](parseElement());\n    scanner.scan(scan.whitespace);\n    while (scanner.scan(\",\")) {\n      scanner.scan(scan.whitespace);\n      if (scanner.matches(\",\") || scanner.isDone) continue;\n      result[$add](parseElement());\n      scanner.scan(scan.whitespace);\n    }\n    return result;\n  };\n  scan.expectQuotedString = function expectQuotedString(scanner, opts) {\n    let name = opts && 'name' in opts ? opts.name : \"quoted string\";\n    scanner.expect(scan._quotedString, {name: name});\n    let string = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));\n    return string[$substring](1, string.length - 1)[$replaceAllMapped](scan._quotedPair, dart.fn(match => dart.nullCheck(match._get(1)), T$.MatchToString()));\n  };\n  dart.defineLazy(scan, {\n    /*scan.token*/get token() {\n      return core.RegExp.new(\"[^()<>@,;:\\\"\\\\\\\\/[\\\\]?={} \\\\t\\\\x00-\\\\x1F\\\\x7F]+\");\n    },\n    /*scan._lws*/get _lws() {\n      return core.RegExp.new(\"(?:\\\\r\\\\n)?[ \\\\t]+\");\n    },\n    /*scan._quotedString*/get _quotedString() {\n      return core.RegExp.new(\"\\\"(?:[^\\\"\\\\x00-\\\\x1F\\\\x7F]|\\\\\\\\.)*\\\"\");\n    },\n    /*scan._quotedPair*/get _quotedPair() {\n      return core.RegExp.new(\"\\\\\\\\(.)\");\n    },\n    /*scan.nonToken*/get nonToken() {\n      return core.RegExp.new(\"[()<>@,;:\\\"\\\\\\\\/\\\\[\\\\]?={} \\\\t\\\\x00-\\\\x1F\\\\x7F]\");\n    },\n    /*scan.whitespace*/get whitespace() {\n      return core.RegExp.new(\"(?:\" + scan._lws.pattern + \")*\");\n    }\n  }, false);\n  utils$0.wrapFormatException = function wrapFormatException(T, name, value, body) {\n    try {\n      return body();\n    } catch (e) {\n      let ex = dart.getThrown(e);\n      if (span_exception.SourceSpanFormatException.is(ex)) {\n        let error = ex;\n        dart.throw(new span_exception.SourceSpanFormatException.new(\"Invalid \" + name + \": \" + error.message, error.span, error.source));\n      } else if (core.FormatException.is(ex)) {\n        let error = ex;\n        dart.throw(new core.FormatException.new(\"Invalid \" + name + \" \\\"\" + value + \"\\\": \" + error.message, error.source, error.offset));\n      } else\n        throw e;\n    }\n  };\n  var _decode = dart.privateName(decoder, \"_decode\");\n  var _state = dart.privateName(decoder, \"_state\");\n  decoder.ChunkedCodingDecoder = class ChunkedCodingDecoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {\n    static ['_#_#tearOff']() {\n      return new decoder.ChunkedCodingDecoder.__();\n    }\n    convert(input) {\n      T$.ListOfint().as(input);\n      let sink = new decoder._Sink.new(T$.StreamControllerOfListOfint().new());\n      let output = sink[_decode](input, 0, input[$length]);\n      if (sink[_state][$_equals](decoder._State.end)) return output;\n      dart.throw(new core.FormatException.new(\"Input ended unexpectedly.\", input, input[$length]));\n    }\n    startChunkedConversion(sink) {\n      T$.SinkOfListOfint().as(sink);\n      return new decoder._Sink.new(sink);\n    }\n  };\n  (decoder.ChunkedCodingDecoder.__ = function() {\n    decoder.ChunkedCodingDecoder.__proto__.new.call(this);\n    ;\n  }).prototype = decoder.ChunkedCodingDecoder.prototype;\n  dart.addTypeTests(decoder.ChunkedCodingDecoder);\n  dart.addTypeCaches(decoder.ChunkedCodingDecoder);\n  dart.setMethodSignature(decoder.ChunkedCodingDecoder, () => ({\n    __proto__: dart.getMethods(decoder.ChunkedCodingDecoder.__proto__),\n    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),\n    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])\n  }));\n  dart.setLibraryUri(decoder.ChunkedCodingDecoder, I[47]);\n  var ___Sink__size = dart.privateName(decoder, \"_#_Sink#_size\");\n  var _sink$ = dart.privateName(decoder, \"_sink\");\n  var _size = dart.privateName(decoder, \"_size\");\n  var _close = dart.privateName(decoder, \"_close\");\n  var _digitForByte = dart.privateName(decoder, \"_digitForByte\");\n  var _State__name = dart.privateName(decoder, \"_State._name\");\n  decoder._Sink = class _Sink extends convert.ByteConversionSinkBase {\n    get [_size]() {\n      let t25;\n      t25 = this[___Sink__size];\n      return t25 == null ? dart.throw(new _internal.LateError.fieldNI(\"_size\")) : t25;\n    }\n    set [_size](t25) {\n      this[___Sink__size] = t25;\n    }\n    static ['_#new#tearOff'](_sink) {\n      return new decoder._Sink.new(_sink);\n    }\n    add(chunk) {\n      T$.ListOfint().as(chunk);\n      return this.addSlice(chunk, 0, chunk[$length], false);\n    }\n    addSlice(chunk, start, end, isLast) {\n      core.RangeError.checkValidRange(start, end, chunk[$length]);\n      let output = this[_decode](chunk, start, end);\n      if (output[$isNotEmpty]) this[_sink$].add(output);\n      if (isLast) this[_close](chunk, end);\n    }\n    close() {\n      return this[_close]();\n    }\n    [_close](chunk = null, index = null) {\n      if (!this[_state][$_equals](decoder._State.end)) {\n        dart.throw(new core.FormatException.new(\"Input ended unexpectedly.\", chunk, index));\n      }\n      this[_sink$].close();\n    }\n    [_decode](bytes, start, end) {\n      function assertCurrentChar(char, name) {\n        if (bytes[$_get](start) !== char) {\n          dart.throw(new core.FormatException.new(\"Expected \" + name + \".\", bytes, start));\n        }\n      }\n      dart.fn(assertCurrentChar, T$.intAndStringTovoid());\n      let buffer = new typed_buffer.Uint8Buffer.new();\n      while (start !== end) {\n        switch (this[_state]) {\n          case C[38] || CT.C38:\n          {\n            this[_size] = this[_digitForByte](bytes, start);\n            this[_state] = decoder._State.size;\n            start = start + 1;\n            break;\n          }\n          case C[39] || CT.C39:\n          {\n            if (bytes[$_get](start) === 13) {\n              this[_state] = decoder._State.sizeBeforeLF;\n            } else {\n              this[_size] = (this[_size] << 4 >>> 0) + this[_digitForByte](bytes, start);\n            }\n            start = start + 1;\n            break;\n          }\n          case C[40] || CT.C40:\n          {\n            assertCurrentChar(10, \"LF\");\n            this[_state] = this[_size] === 0 ? decoder._State.endBeforeCR : decoder._State.body;\n            start = start + 1;\n            break;\n          }\n          case C[41] || CT.C41:\n          {\n            let chunkEnd = math.min(core.int, end, start + this[_size]);\n            buffer.addAll(bytes, start, chunkEnd);\n            this[_size] = this[_size] - (chunkEnd - start);\n            start = chunkEnd;\n            if (this[_size] === 0) this[_state] = decoder._State.bodyBeforeCR;\n            break;\n          }\n          case C[42] || CT.C42:\n          {\n            assertCurrentChar(13, \"CR\");\n            this[_state] = decoder._State.bodyBeforeLF;\n            start = start + 1;\n            break;\n          }\n          case C[43] || CT.C43:\n          {\n            assertCurrentChar(10, \"LF\");\n            this[_state] = decoder._State.boundary;\n            start = start + 1;\n            break;\n          }\n          case C[44] || CT.C44:\n          {\n            assertCurrentChar(13, \"CR\");\n            this[_state] = decoder._State.endBeforeLF;\n            start = start + 1;\n            break;\n          }\n          case C[45] || CT.C45:\n          {\n            assertCurrentChar(10, \"LF\");\n            this[_state] = decoder._State.end;\n            start = start + 1;\n            break;\n          }\n          case C[46] || CT.C46:\n          {\n            dart.throw(new core.FormatException.new(\"Expected no more data.\", bytes, start));\n          }\n        }\n      }\n      return buffer.buffer[$asUint8List](0, buffer.length);\n    }\n    [_digitForByte](bytes, index) {\n      let byte = bytes[$_get](index);\n      let digit = (48 ^ byte) >>> 0;\n      if (digit <= 9) {\n        if (digit >= 0) return digit;\n      } else {\n        let letter = (32 | byte) >>> 0;\n        if (97 <= letter && letter <= 102) return letter - 97 + 10;\n      }\n      dart.throw(new core.FormatException.new(\"Invalid hexadecimal byte 0x\" + byte[$toRadixString](16)[$toUpperCase]() + \".\", bytes, index));\n    }\n  };\n  (decoder._Sink.new = function(_sink) {\n    this[_state] = decoder._State.boundary;\n    this[___Sink__size] = null;\n    this[_sink$] = _sink;\n    decoder._Sink.__proto__.new.call(this);\n    ;\n  }).prototype = decoder._Sink.prototype;\n  dart.addTypeTests(decoder._Sink);\n  dart.addTypeCaches(decoder._Sink);\n  dart.setMethodSignature(decoder._Sink, () => ({\n    __proto__: dart.getMethods(decoder._Sink.__proto__),\n    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),\n    close: dart.fnType(dart.void, []),\n    [_close]: dart.fnType(dart.void, [], [dart.nullable(core.List$(core.int)), dart.nullable(core.int)]),\n    [_decode]: dart.fnType(typed_data.Uint8List, [core.List$(core.int), core.int, core.int]),\n    [_digitForByte]: dart.fnType(core.int, [core.List$(core.int), core.int])\n  }));\n  dart.setGetterSignature(decoder._Sink, () => ({\n    __proto__: dart.getGetters(decoder._Sink.__proto__),\n    [_size]: core.int\n  }));\n  dart.setSetterSignature(decoder._Sink, () => ({\n    __proto__: dart.getSetters(decoder._Sink.__proto__),\n    [_size]: core.int\n  }));\n  dart.setLibraryUri(decoder._Sink, I[47]);\n  dart.setFieldSignature(decoder._Sink, () => ({\n    __proto__: dart.getFields(decoder._Sink.__proto__),\n    [_sink$]: dart.finalFieldType(core.Sink$(core.List$(core.int))),\n    [_state]: dart.fieldType(decoder._State),\n    [___Sink__size]: dart.fieldType(dart.nullable(core.int))\n  }));\n  var _name$0 = dart.privateName(decoder, \"_name\");\n  const _name$1 = _State__name;\n  decoder._State = class _State extends core.Object {\n    get [_name$0]() {\n      return this[_name$1];\n    }\n    set [_name$0](value) {\n      super[_name$0] = value;\n    }\n    static ['_#_#tearOff'](_name) {\n      return new decoder._State.__(_name);\n    }\n    toString() {\n      return this[_name$0];\n    }\n  };\n  (decoder._State.__ = function(_name) {\n    this[_name$1] = _name;\n    ;\n  }).prototype = decoder._State.prototype;\n  dart.addTypeTests(decoder._State);\n  dart.addTypeCaches(decoder._State);\n  dart.setLibraryUri(decoder._State, I[47]);\n  dart.setFieldSignature(decoder._State, () => ({\n    __proto__: dart.getFields(decoder._State.__proto__),\n    [_name$0]: dart.finalFieldType(core.String)\n  }));\n  dart.setStaticFieldSignature(decoder._State, () => ['boundary', 'size', 'sizeBeforeLF', 'body', 'bodyBeforeCR', 'bodyBeforeLF', 'endBeforeCR', 'endBeforeLF', 'end']);\n  dart.defineExtensionMethods(decoder._State, ['toString']);\n  dart.defineLazy(decoder._State, {\n    /*decoder._State.boundary*/get boundary() {\n      return C[38] || CT.C38;\n    },\n    /*decoder._State.size*/get size() {\n      return C[39] || CT.C39;\n    },\n    /*decoder._State.sizeBeforeLF*/get sizeBeforeLF() {\n      return C[40] || CT.C40;\n    },\n    /*decoder._State.body*/get body() {\n      return C[41] || CT.C41;\n    },\n    /*decoder._State.bodyBeforeCR*/get bodyBeforeCR() {\n      return C[42] || CT.C42;\n    },\n    /*decoder._State.bodyBeforeLF*/get bodyBeforeLF() {\n      return C[43] || CT.C43;\n    },\n    /*decoder._State.endBeforeCR*/get endBeforeCR() {\n      return C[44] || CT.C44;\n    },\n    /*decoder._State.endBeforeLF*/get endBeforeLF() {\n      return C[45] || CT.C45;\n    },\n    /*decoder._State.end*/get end() {\n      return C[46] || CT.C46;\n    }\n  }, false);\n  dart.defineLazy(decoder, {\n    /*decoder.chunkedCodingDecoder*/get chunkedCodingDecoder() {\n      return C[47] || CT.C47;\n    }\n  }, false);\n  encoder.ChunkedCodingEncoder = class ChunkedCodingEncoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {\n    static ['_#_#tearOff']() {\n      return new encoder.ChunkedCodingEncoder.__();\n    }\n    convert(input) {\n      T$.ListOfint().as(input);\n      return encoder._convert(input, 0, input[$length], {isLast: true});\n    }\n    startChunkedConversion(sink) {\n      T$.SinkOfListOfint().as(sink);\n      return new encoder._Sink.new(sink);\n    }\n  };\n  (encoder.ChunkedCodingEncoder.__ = function() {\n    encoder.ChunkedCodingEncoder.__proto__.new.call(this);\n    ;\n  }).prototype = encoder.ChunkedCodingEncoder.prototype;\n  dart.addTypeTests(encoder.ChunkedCodingEncoder);\n  dart.addTypeCaches(encoder.ChunkedCodingEncoder);\n  dart.setMethodSignature(encoder.ChunkedCodingEncoder, () => ({\n    __proto__: dart.getMethods(encoder.ChunkedCodingEncoder.__proto__),\n    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),\n    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])\n  }));\n  dart.setLibraryUri(encoder.ChunkedCodingEncoder, I[48]);\n  var _sink$0 = dart.privateName(encoder, \"_sink\");\n  encoder._Sink = class _Sink extends convert.ByteConversionSinkBase {\n    static ['_#new#tearOff'](_sink) {\n      return new encoder._Sink.new(_sink);\n    }\n    add(chunk) {\n      T$.ListOfint().as(chunk);\n      this[_sink$0].add(encoder._convert(chunk, 0, chunk[$length]));\n    }\n    addSlice(chunk, start, end, isLast) {\n      core.RangeError.checkValidRange(start, end, chunk[$length]);\n      this[_sink$0].add(encoder._convert(chunk, start, end, {isLast: isLast}));\n      if (isLast) this[_sink$0].close();\n    }\n    close() {\n      this[_sink$0].add(encoder._doneChunk);\n      this[_sink$0].close();\n    }\n  };\n  (encoder._Sink.new = function(_sink) {\n    this[_sink$0] = _sink;\n    encoder._Sink.__proto__.new.call(this);\n    ;\n  }).prototype = encoder._Sink.prototype;\n  dart.addTypeTests(encoder._Sink);\n  dart.addTypeCaches(encoder._Sink);\n  dart.setMethodSignature(encoder._Sink, () => ({\n    __proto__: dart.getMethods(encoder._Sink.__proto__),\n    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),\n    close: dart.fnType(dart.void, [])\n  }));\n  dart.setLibraryUri(encoder._Sink, I[48]);\n  dart.setFieldSignature(encoder._Sink, () => ({\n    __proto__: dart.getFields(encoder._Sink.__proto__),\n    [_sink$0]: dart.finalFieldType(core.Sink$(core.List$(core.int)))\n  }));\n  encoder._convert = function _convert(bytes, start, end, opts) {\n    let t26, t26$, t26$0, t26$1;\n    let isLast = opts && 'isLast' in opts ? opts.isLast : false;\n    if (end === start) return isLast ? encoder._doneChunk : C[48] || CT.C48;\n    let size = end - start;\n    let sizeInHex = size[$toRadixString](16);\n    let footerSize = isLast ? encoder._doneChunk[$length] : 0;\n    let list = _native_typed_data.NativeUint8List.new(sizeInHex.length + 4 + size + footerSize);\n    list[$setRange](0, sizeInHex.length, sizeInHex[$codeUnits]);\n    let cursor = sizeInHex.length;\n    list[$_set]((t26 = cursor, cursor = t26 + 1, t26), 13);\n    list[$_set]((t26$ = cursor, cursor = t26$ + 1, t26$), 10);\n    list[$setRange](cursor, cursor + end - start, bytes, start);\n    cursor = cursor + (end - start);\n    list[$_set]((t26$0 = cursor, cursor = t26$0 + 1, t26$0), 13);\n    list[$_set]((t26$1 = cursor, cursor = t26$1 + 1, t26$1), 10);\n    if (isLast) {\n      list[$setRange](list[$length] - footerSize, list[$length], encoder._doneChunk);\n    }\n    return list;\n  };\n  dart.defineLazy(encoder, {\n    /*encoder.chunkedCodingEncoder*/get chunkedCodingEncoder() {\n      return C[49] || CT.C49;\n    },\n    /*encoder._doneChunk*/get _doneChunk() {\n      return _native_typed_data.NativeUint8List.fromList(T$.JSArrayOfint().of([48, 13, 10, 13, 10]));\n    }\n  }, false);\n  var _table = dart.privateName(typed_queue, \"_TypedQueue._table\");\n  var _head = dart.privateName(typed_queue, \"_TypedQueue._head\");\n  var _tail = dart.privateName(typed_queue, \"_TypedQueue._tail\");\n  var _table$ = dart.privateName(typed_queue, \"_table\");\n  var _head$ = dart.privateName(typed_queue, \"_head\");\n  var _tail$ = dart.privateName(typed_queue, \"_tail\");\n  var _createBuffer = dart.privateName(typed_queue, \"_createBuffer\");\n  var _createList = dart.privateName(typed_queue, \"_createList\");\n  var _writeToList = dart.privateName(typed_queue, \"_writeToList\");\n  var _growAtCapacity = dart.privateName(typed_queue, \"_growAtCapacity\");\n  var _growTo = dart.privateName(typed_queue, \"_growTo\");\n  var _defaultValue = dart.privateName(typed_queue, \"_defaultValue\");\n  const _is__TypedQueue_default = Symbol('_is__TypedQueue_default');\n  typed_queue._TypedQueue$ = dart.generic((E, L) => {\n    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();\n    var __t$ListOfE = () => (__t$ListOfE = dart.constFn(core.List$(E)))();\n    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();\n    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};\n    (Object_ListMixin$36.new = function() {\n    }).prototype = Object_ListMixin$36.prototype;\n    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));\n    class _TypedQueue extends Object_ListMixin$36 {\n      get [_table$]() {\n        return this[_table];\n      }\n      set [_table$](value) {\n        this[_table] = value;\n      }\n      get [_head$]() {\n        return this[_head];\n      }\n      set [_head$](value) {\n        this[_head] = value;\n      }\n      get [_tail$]() {\n        return this[_tail];\n      }\n      set [_tail$](value) {\n        this[_tail] = value;\n      }\n      get length() {\n        return (this[_tail$] - this[_head$] & this[_table$][$length] - 1) >>> 0;\n      }\n      toList(opts) {\n        let growable = opts && 'growable' in opts ? opts.growable : true;\n        let list = growable ? this[_createBuffer](this.length) : this[_createList](this.length);\n        this[_writeToList](list);\n        return list;\n      }\n      cast(T) {\n        if (queue_list.QueueList$(T).is(this)) return queue_list.QueueList$(T).as(this);\n        dart.throw(new core.UnsupportedError.new(dart.str(this) + \" cannot be cast to the desired type.\"));\n      }\n      retype(T) {\n        return this.cast(T);\n      }\n      addLast(value) {\n        E.as(value);\n        this[_table$][$_set](this[_tail$], value);\n        this[_tail$] = (this[_tail$] + 1 & this[_table$][$length] - 1) >>> 0;\n        if (this[_head$] === this[_tail$]) this[_growAtCapacity]();\n      }\n      addFirst(value) {\n        E.as(value);\n        this[_head$] = (this[_head$] - 1 & this[_table$][$length] - 1) >>> 0;\n        this[_table$][$_set](this[_head$], value);\n        if (this[_head$] === this[_tail$]) this[_growAtCapacity]();\n      }\n      removeFirst() {\n        if (this[_head$] === this[_tail$]) dart.throw(new core.StateError.new(\"No element\"));\n        let result = this[_table$][$_get](this[_head$]);\n        this[_head$] = (this[_head$] + 1 & this[_table$][$length] - 1) >>> 0;\n        return result;\n      }\n      removeLast() {\n        if (this[_head$] === this[_tail$]) dart.throw(new core.StateError.new(\"No element\"));\n        this[_tail$] = (this[_tail$] - 1 & this[_table$][$length] - 1) >>> 0;\n        return this[_table$][$_get](this[_tail$]);\n      }\n      add(value) {\n        E.as(value);\n        return this.addLast(value);\n      }\n      set length(value) {\n        core.RangeError.checkNotNegative(value, \"length\");\n        let delta = value - this.length;\n        if (delta >= 0) {\n          let needsToGrow = this[_table$][$length] <= value;\n          if (needsToGrow) this[_growTo](value);\n          this[_tail$] = (this[_tail$] + delta & this[_table$][$length] - 1) >>> 0;\n          if (!needsToGrow) this.fillRange(value - delta, value, this[_defaultValue]);\n        } else {\n          this.removeRange(value, this.length);\n        }\n      }\n      _get(index) {\n        core.RangeError.checkValidIndex(index, this, null, this.length);\n        return this[_table$][$_get]((this[_head$] + index & this[_table$][$length] - 1) >>> 0);\n      }\n      _set(index, value$) {\n        let value = value$;\n        E.as(value);\n        core.RangeError.checkValidIndex(index, this);\n        this[_table$][$_set]((this[_head$] + index & this[_table$][$length] - 1) >>> 0, value);\n        return value$;\n      }\n      removeRange(start, end) {\n        let length = this.length;\n        core.RangeError.checkValidRange(start, end, length);\n        if (start === 0) {\n          this[_head$] = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;\n          return;\n        }\n        let elementsAfter = length - end;\n        if (elementsAfter === 0) {\n          this[_tail$] = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;\n          return;\n        }\n        let removedElements = end - start;\n        if (start < elementsAfter) {\n          this.setRange(removedElements, end, this);\n          this[_head$] = (this[_head$] + removedElements & this[_table$][$length] - 1) >>> 0;\n        } else {\n          this.setRange(start, length - removedElements, this, end);\n          this[_tail$] = (this[_tail$] - removedElements & this[_table$][$length] - 1) >>> 0;\n        }\n      }\n      setRange(start, end, iterable, skipCount = 0) {\n        __t$IterableOfE().as(iterable);\n        core.RangeError.checkValidRange(start, end, this.length);\n        if (start === end) return;\n        let targetStart = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;\n        let targetEnd = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;\n        let targetIsContiguous = targetStart < targetEnd;\n        if (iterable === this) {\n          let sourceStart = (this[_head$] + skipCount & this[_table$][$length] - 1) >>> 0;\n          let sourceEnd = (sourceStart + (end - start) & this[_table$][$length] - 1) >>> 0;\n          if (sourceStart === targetStart) return;\n          let sourceIsContiguous = sourceStart < sourceEnd;\n          if (targetIsContiguous && sourceIsContiguous) {\n            this[_table$][$setRange](targetStart, targetEnd, this[_table$], sourceStart);\n          } else if (!targetIsContiguous && !sourceIsContiguous) {\n            if (sourceStart > targetStart) {\n              let startGap = sourceStart - targetStart;\n              let firstEnd = this[_table$][$length] - startGap;\n              this[_table$][$setRange](targetStart, firstEnd, this[_table$], sourceStart);\n              this[_table$][$setRange](firstEnd, this[_table$][$length], this[_table$]);\n              this[_table$][$setRange](0, targetEnd, this[_table$], startGap);\n            } else if (sourceEnd < targetEnd) {\n              let firstStart = targetEnd - sourceEnd;\n              this[_table$][$setRange](firstStart, targetEnd, this[_table$]);\n              this[_table$][$setRange](0, firstStart, this[_table$], this[_table$][$length] - firstStart);\n              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);\n            }\n          } else if (sourceStart < targetEnd) {\n            if (sourceIsContiguous) {\n              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);\n              this[_table$][$setRange](0, targetEnd, this[_table$], sourceStart + (this[_table$][$length] - targetStart));\n            } else {\n              let firstEnd = this[_table$][$length] - sourceStart;\n              this[_table$][$setRange](targetStart, firstEnd, this[_table$], sourceStart);\n              this[_table$][$setRange](firstEnd, targetEnd, this[_table$]);\n            }\n          } else {\n            if (sourceIsContiguous) {\n              this[_table$][$setRange](0, targetEnd, this[_table$], sourceStart + (this[_table$][$length] - targetStart));\n              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);\n            } else {\n              let firstStart = targetEnd - sourceEnd;\n              this[_table$][$setRange](firstStart, targetEnd, this[_table$]);\n              this[_table$][$setRange](targetStart, firstStart, this[_table$], sourceStart);\n            }\n          }\n        } else if (targetIsContiguous) {\n          this[_table$][$setRange](targetStart, targetEnd, iterable, skipCount);\n        } else if (__t$ListOfE().is(iterable)) {\n          this[_table$][$setRange](targetStart, this[_table$][$length], iterable, skipCount);\n          this[_table$][$setRange](0, targetEnd, iterable, skipCount + (this[_table$][$length] - targetStart));\n        } else {\n          super.setRange(start, end, iterable, skipCount);\n        }\n      }\n      fillRange(start, end, value = null) {\n        __t$EN().as(value);\n        let startInTable = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;\n        let endInTable = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;\n        if (startInTable <= endInTable) {\n          this[_table$][$fillRange](startInTable, endInTable, value);\n        } else {\n          this[_table$][$fillRange](startInTable, this[_table$][$length], value);\n          this[_table$][$fillRange](0, endInTable, value);\n        }\n      }\n      sublist(start, end = null) {\n        let length = this.length;\n        let nonNullEnd = core.RangeError.checkValidRange(start, end, length);\n        let list = this[_createList](nonNullEnd - start);\n        this[_writeToList](list, start, nonNullEnd);\n        return list;\n      }\n      [_writeToList](target, start = null, end = null) {\n        start == null ? start = 0 : null;\n        end == null ? end = this.length : null;\n        if (!(target[$length] >= dart.notNull(end) - dart.notNull(start))) dart.assertFailed(null, I[49], 266, 12, \"target.length >= end - start\");\n        if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, I[49], 267, 12, \"start <= end\");\n        let elementsToWrite = dart.notNull(end) - dart.notNull(start);\n        let startInTable = (this[_head$] + dart.notNull(start) & this[_table$][$length] - 1) >>> 0;\n        let endInTable = (this[_head$] + dart.notNull(end) & this[_table$][$length] - 1) >>> 0;\n        if (startInTable <= endInTable) {\n          target[$setRange](0, elementsToWrite, this[_table$], startInTable);\n        } else {\n          let firstPartSize = this[_table$][$length] - startInTable;\n          target[$setRange](0, firstPartSize, this[_table$], startInTable);\n          target[$setRange](firstPartSize, firstPartSize + endInTable, this[_table$], 0);\n        }\n        return elementsToWrite;\n      }\n      [_growAtCapacity]() {\n        if (!(this[_head$] === this[_tail$])) dart.assertFailed(null, I[49], 285, 12, \"_head == _tail\");\n        let newTable = this[_createList](this[_table$][$length] * 2);\n        let partitionPoint = this[_table$][$length] - this[_head$];\n        newTable[$setRange](0, partitionPoint, this[_table$], this[_head$]);\n        if (partitionPoint !== this[_table$][$length]) {\n          newTable[$setRange](partitionPoint, this[_table$][$length], this[_table$]);\n        }\n        this[_head$] = 0;\n        this[_tail$] = this[_table$][$length];\n        this[_table$] = newTable;\n      }\n      [_growTo](newElementCount) {\n        if (!(newElementCount >= this.length)) dart.assertFailed(null, I[49], 304, 12, \"newElementCount >= length\");\n        newElementCount = newElementCount + newElementCount[$rightShift](1);\n        let newTable = this[_createList](typed_queue._nextPowerOf2(newElementCount));\n        this[_tail$] = this[_writeToList](newTable);\n        this[_table$] = newTable;\n        this[_head$] = 0;\n      }\n    }\n    (_TypedQueue.new = function(table) {\n      this[_table] = L.as(table);\n      this[_head] = 0;\n      this[_tail] = 0;\n      ;\n    }).prototype = _TypedQueue.prototype;\n    dart.addTypeTests(_TypedQueue);\n    _TypedQueue.prototype[_is__TypedQueue_default] = true;\n    dart.addTypeCaches(_TypedQueue);\n    dart.setMethodSignature(_TypedQueue, () => ({\n      __proto__: dart.getMethods(_TypedQueue.__proto__),\n      cast: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),\n      [$cast]: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),\n      retype: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),\n      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),\n      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),\n      removeFirst: dart.fnType(E, []),\n      _get: dart.fnType(E, [core.int]),\n      [$_get]: dart.fnType(E, [core.int]),\n      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),\n      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),\n      sublist: dart.fnType(L, [core.int], [dart.nullable(core.int)]),\n      [$sublist]: dart.fnType(L, [core.int], [dart.nullable(core.int)]),\n      [_writeToList]: dart.fnType(core.int, [core.List$(E)], [dart.nullable(core.int), dart.nullable(core.int)]),\n      [_growAtCapacity]: dart.fnType(dart.void, []),\n      [_growTo]: dart.fnType(dart.void, [core.int])\n    }));\n    dart.setGetterSignature(_TypedQueue, () => ({\n      __proto__: dart.getGetters(_TypedQueue.__proto__),\n      length: core.int,\n      [$length]: core.int\n    }));\n    dart.setSetterSignature(_TypedQueue, () => ({\n      __proto__: dart.getSetters(_TypedQueue.__proto__),\n      length: core.int,\n      [$length]: core.int\n    }));\n    dart.setLibraryUri(_TypedQueue, I[50]);\n    dart.setFieldSignature(_TypedQueue, () => ({\n      __proto__: dart.getFields(_TypedQueue.__proto__),\n      [_table$]: dart.fieldType(L),\n      [_head$]: dart.fieldType(core.int),\n      [_tail$]: dart.fieldType(core.int)\n    }));\n    dart.defineExtensionMethods(_TypedQueue, [\n      'toList',\n      'cast',\n      'removeLast',\n      'add',\n      '_get',\n      '_set',\n      'removeRange',\n      'setRange',\n      'fillRange',\n      'sublist'\n    ]);\n    dart.defineExtensionAccessors(_TypedQueue, ['length']);\n    return _TypedQueue;\n  });\n  typed_queue._TypedQueue = typed_queue._TypedQueue$();\n  dart.addTypeTests(typed_queue._TypedQueue, _is__TypedQueue_default);\n  const _is__IntQueue_default = Symbol('_is__IntQueue_default');\n  typed_queue._IntQueue$ = dart.generic(L => {\n    class _IntQueue extends typed_queue._TypedQueue$(core.int, L) {\n      get [_defaultValue]() {\n        return 0;\n      }\n    }\n    (_IntQueue.new = function(queue) {\n      _IntQueue.__proto__.new.call(this, queue);\n      ;\n    }).prototype = _IntQueue.prototype;\n    dart.addTypeTests(_IntQueue);\n    _IntQueue.prototype[_is__IntQueue_default] = true;\n    dart.addTypeCaches(_IntQueue);\n    dart.setGetterSignature(_IntQueue, () => ({\n      __proto__: dart.getGetters(_IntQueue.__proto__),\n      [_defaultValue]: core.int\n    }));\n    dart.setLibraryUri(_IntQueue, I[50]);\n    return _IntQueue;\n  });\n  typed_queue._IntQueue = typed_queue._IntQueue$();\n  dart.addTypeTests(typed_queue._IntQueue, _is__IntQueue_default);\n  const _is__FloatQueue_default = Symbol('_is__FloatQueue_default');\n  typed_queue._FloatQueue$ = dart.generic(L => {\n    class _FloatQueue extends typed_queue._TypedQueue$(core.double, L) {\n      get [_defaultValue]() {\n        return 0.0;\n      }\n    }\n    (_FloatQueue.new = function(queue) {\n      _FloatQueue.__proto__.new.call(this, queue);\n      ;\n    }).prototype = _FloatQueue.prototype;\n    dart.addTypeTests(_FloatQueue);\n    _FloatQueue.prototype[_is__FloatQueue_default] = true;\n    dart.addTypeCaches(_FloatQueue);\n    dart.setGetterSignature(_FloatQueue, () => ({\n      __proto__: dart.getGetters(_FloatQueue.__proto__),\n      [_defaultValue]: core.double\n    }));\n    dart.setLibraryUri(_FloatQueue, I[50]);\n    return _FloatQueue;\n  });\n  typed_queue._FloatQueue = typed_queue._FloatQueue$();\n  dart.addTypeTests(typed_queue._FloatQueue, _is__FloatQueue_default);\n  var _head$0 = dart.privateName(queue_list, \"_head\");\n  var _writeToList$ = dart.privateName(queue_list, \"_writeToList\");\n  var _add = dart.privateName(typed_queue, \"_add\");\n  var _add$ = dart.privateName(queue_list, \"_add\");\n  var _grow = dart.privateName(typed_queue, \"_grow\");\n  var _grow$ = dart.privateName(queue_list, \"_grow\");\n  var _table$0 = dart.privateName(queue_list, \"_table\");\n  var _tail$0 = dart.privateName(queue_list, \"_tail\");\n  var _preGrow = dart.privateName(typed_queue, \"_preGrow\");\n  var _preGrow$ = dart.privateName(queue_list, \"_preGrow\");\n  var _head_ = dart.privateName(typed_queue, \"_head=\");\n  var _table_ = dart.privateName(typed_queue, \"_table=\");\n  var _tail_ = dart.privateName(typed_queue, \"_tail=\");\n  typed_queue.Uint8Queue = class Uint8Queue extends typed_queue._IntQueue$(typed_data.Uint8List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Uint8Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Uint8Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Uint8Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return _native_typed_data.NativeUint8List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Uint8Buffer.new(size);\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfintN().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Uint8Queue.new = function(initialCapacity = null) {\n    typed_queue.Uint8Queue.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Uint8Queue.prototype;\n  dart.addTypeTests(typed_queue.Uint8Queue);\n  dart.addTypeCaches(typed_queue.Uint8Queue);\n  typed_queue.Uint8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];\n  dart.setMethodSignature(typed_queue.Uint8Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Uint8Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Uint8List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Uint8Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),\n    [_add$]: dart.fnType(dart.void, [core.int]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Uint8Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Uint8Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Uint8Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Uint8Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Uint8Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Uint8Queue, I[50]);\n  typed_queue.Int8Queue = class Int8Queue extends typed_queue._IntQueue$(typed_data.Int8List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Int8Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Int8Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Int8Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return _native_typed_data.NativeInt8List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Int8Buffer.new(size);\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfintN().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Int8Queue.new = function(initialCapacity = null) {\n    typed_queue.Int8Queue.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Int8Queue.prototype;\n  dart.addTypeTests(typed_queue.Int8Queue);\n  dart.addTypeCaches(typed_queue.Int8Queue);\n  typed_queue.Int8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];\n  dart.setMethodSignature(typed_queue.Int8Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Int8Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Int8List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Int8Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),\n    [_add$]: dart.fnType(dart.void, [core.int]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Int8Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Int8Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Int8Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Int8Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Int8Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Int8Queue, I[50]);\n  typed_queue.Uint8ClampedQueue = class Uint8ClampedQueue extends typed_queue._IntQueue$(typed_data.Uint8ClampedList) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Uint8ClampedQueue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Uint8ClampedQueue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Uint8ClampedQueue.fromList(elements);\n    }\n    [_createList](size) {\n      return _native_typed_data.NativeUint8ClampedList.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Uint8ClampedBuffer.new(size);\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfintN().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Uint8ClampedQueue.new = function(initialCapacity = null) {\n    typed_queue.Uint8ClampedQueue.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Uint8ClampedQueue.prototype;\n  dart.addTypeTests(typed_queue.Uint8ClampedQueue);\n  dart.addTypeCaches(typed_queue.Uint8ClampedQueue);\n  typed_queue.Uint8ClampedQueue[dart.implements] = () => [queue_list.QueueList$(core.int)];\n  dart.setMethodSignature(typed_queue.Uint8ClampedQueue, () => ({\n    __proto__: dart.getMethods(typed_queue.Uint8ClampedQueue.__proto__),\n    [_createList]: dart.fnType(typed_data.Uint8ClampedList, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Uint8ClampedBuffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),\n    [_add$]: dart.fnType(dart.void, [core.int]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Uint8ClampedQueue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Uint8ClampedQueue, () => ({\n    __proto__: dart.getGetters(typed_queue.Uint8ClampedQueue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Uint8ClampedQueue, () => ({\n    __proto__: dart.getSetters(typed_queue.Uint8ClampedQueue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Uint8ClampedQueue, I[50]);\n  typed_queue.Uint16Queue = class Uint16Queue extends typed_queue._IntQueue$(typed_data.Uint16List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Uint16Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Uint16Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Uint16Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return _native_typed_data.NativeUint16List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Uint16Buffer.new(size);\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfintN().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Uint16Queue.new = function(initialCapacity = null) {\n    typed_queue.Uint16Queue.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Uint16Queue.prototype;\n  dart.addTypeTests(typed_queue.Uint16Queue);\n  dart.addTypeCaches(typed_queue.Uint16Queue);\n  typed_queue.Uint16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];\n  dart.setMethodSignature(typed_queue.Uint16Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Uint16Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Uint16List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Uint16Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),\n    [_add$]: dart.fnType(dart.void, [core.int]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Uint16Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Uint16Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Uint16Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Uint16Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Uint16Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Uint16Queue, I[50]);\n  typed_queue.Int16Queue = class Int16Queue extends typed_queue._IntQueue$(typed_data.Int16List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Int16Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Int16Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Int16Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return _native_typed_data.NativeInt16List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Int16Buffer.new(size);\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfintN().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Int16Queue.new = function(initialCapacity = null) {\n    typed_queue.Int16Queue.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Int16Queue.prototype;\n  dart.addTypeTests(typed_queue.Int16Queue);\n  dart.addTypeCaches(typed_queue.Int16Queue);\n  typed_queue.Int16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];\n  dart.setMethodSignature(typed_queue.Int16Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Int16Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Int16List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Int16Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),\n    [_add$]: dart.fnType(dart.void, [core.int]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Int16Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Int16Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Int16Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Int16Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Int16Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Int16Queue, I[50]);\n  typed_queue.Uint32Queue = class Uint32Queue extends typed_queue._IntQueue$(typed_data.Uint32List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Uint32Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Uint32Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Uint32Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return _native_typed_data.NativeUint32List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Uint32Buffer.new(size);\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfintN().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Uint32Queue.new = function(initialCapacity = null) {\n    typed_queue.Uint32Queue.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Uint32Queue.prototype;\n  dart.addTypeTests(typed_queue.Uint32Queue);\n  dart.addTypeCaches(typed_queue.Uint32Queue);\n  typed_queue.Uint32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];\n  dart.setMethodSignature(typed_queue.Uint32Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Uint32Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Uint32List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Uint32Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),\n    [_add$]: dart.fnType(dart.void, [core.int]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Uint32Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Uint32Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Uint32Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Uint32Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Uint32Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Uint32Queue, I[50]);\n  typed_queue.Int32Queue = class Int32Queue extends typed_queue._IntQueue$(typed_data.Int32List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Int32Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Int32Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Int32Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return _native_typed_data.NativeInt32List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Int32Buffer.new(size);\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfintN().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Int32Queue.new = function(initialCapacity = null) {\n    typed_queue.Int32Queue.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Int32Queue.prototype;\n  dart.addTypeTests(typed_queue.Int32Queue);\n  dart.addTypeCaches(typed_queue.Int32Queue);\n  typed_queue.Int32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];\n  dart.setMethodSignature(typed_queue.Int32Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Int32Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Int32List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Int32Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),\n    [_add$]: dart.fnType(dart.void, [core.int]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Int32Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Int32Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Int32Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Int32Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Int32Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Int32Queue, I[50]);\n  typed_queue.Uint64Queue = class Uint64Queue extends typed_queue._IntQueue$(typed_data.Uint64List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Uint64Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Uint64Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Uint64Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return typed_data.Uint64List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Uint64Buffer.new(size);\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfintN().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Uint64Queue.new = function(initialCapacity = null) {\n    typed_queue.Uint64Queue.__proto__.new.call(this, typed_data.Uint64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Uint64Queue.prototype;\n  dart.addTypeTests(typed_queue.Uint64Queue);\n  dart.addTypeCaches(typed_queue.Uint64Queue);\n  typed_queue.Uint64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];\n  dart.setMethodSignature(typed_queue.Uint64Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Uint64Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Uint64List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Uint64Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),\n    [_add$]: dart.fnType(dart.void, [core.int]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Uint64Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Uint64Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Uint64Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Uint64Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Uint64Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Uint64Queue, I[50]);\n  typed_queue.Int64Queue = class Int64Queue extends typed_queue._IntQueue$(typed_data.Int64List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Int64Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Int64Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Int64Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return typed_data.Int64List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Int64Buffer.new(size);\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfintN().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Int64Queue.new = function(initialCapacity = null) {\n    typed_queue.Int64Queue.__proto__.new.call(this, typed_data.Int64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Int64Queue.prototype;\n  dart.addTypeTests(typed_queue.Int64Queue);\n  dart.addTypeCaches(typed_queue.Int64Queue);\n  typed_queue.Int64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];\n  dart.setMethodSignature(typed_queue.Int64Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Int64Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Int64List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Int64Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),\n    [_add$]: dart.fnType(dart.void, [core.int]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Int64Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Int64Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Int64Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Int64Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Int64Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.int)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Int64Queue, I[50]);\n  typed_queue.Float32Queue = class Float32Queue extends typed_queue._FloatQueue$(typed_data.Float32List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Float32Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Float32Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Float32Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return _native_typed_data.NativeFloat32List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Float32Buffer.new(size);\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfdoubleN().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Float32Queue.new = function(initialCapacity = null) {\n    typed_queue.Float32Queue.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Float32Queue.prototype;\n  dart.addTypeTests(typed_queue.Float32Queue);\n  dart.addTypeCaches(typed_queue.Float32Queue);\n  typed_queue.Float32Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];\n  dart.setMethodSignature(typed_queue.Float32Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Float32Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Float32List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Float32Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),\n    [_add$]: dart.fnType(dart.void, [core.double]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Float32Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Float32Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Float32Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.double)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Float32Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Float32Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.double)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Float32Queue, I[50]);\n  typed_queue.Float64Queue = class Float64Queue extends typed_queue._FloatQueue$(typed_data.Float64List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Float64Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Float64Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Float64Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return _native_typed_data.NativeFloat64List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Float64Buffer.new(size);\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfdoubleN().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Float64Queue.new = function(initialCapacity = null) {\n    typed_queue.Float64Queue.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Float64Queue.prototype;\n  dart.addTypeTests(typed_queue.Float64Queue);\n  dart.addTypeCaches(typed_queue.Float64Queue);\n  typed_queue.Float64Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];\n  dart.setMethodSignature(typed_queue.Float64Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Float64Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Float64List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Float64Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),\n    [_add$]: dart.fnType(dart.void, [core.double]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Float64Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Float64Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Float64Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.double)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Float64Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Float64Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(core.double)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Float64Queue, I[50]);\n  typed_queue.Int32x4Queue = class Int32x4Queue extends typed_queue._TypedQueue$(typed_data.Int32x4, typed_data.Int32x4List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Int32x4Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Int32x4Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Int32x4Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return new _native_typed_data.NativeInt32x4List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Int32x4Buffer.new(size);\n    }\n    get [_defaultValue]() {\n      return typed_queue.Int32x4Queue._zero;\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfInt32x4N().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Int32x4Queue.new = function(initialCapacity = null) {\n    typed_queue.Int32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Int32x4Queue.prototype;\n  dart.addTypeTests(typed_queue.Int32x4Queue);\n  dart.addTypeCaches(typed_queue.Int32x4Queue);\n  typed_queue.Int32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Int32x4)];\n  dart.setMethodSignature(typed_queue.Int32x4Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Int32x4Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Int32x4List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Int32x4Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Int32x4))]),\n    [_add$]: dart.fnType(dart.void, [typed_data.Int32x4]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Int32x4Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Int32x4Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Int32x4Queue.__proto__),\n    [_defaultValue]: typed_data.Int32x4,\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(typed_data.Int32x4)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Int32x4Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Int32x4Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(typed_data.Int32x4)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Int32x4Queue, I[50]);\n  dart.setStaticFieldSignature(typed_queue.Int32x4Queue, () => ['_zero']);\n  dart.defineLazy(typed_queue.Int32x4Queue, {\n    /*typed_queue.Int32x4Queue._zero*/get _zero() {\n      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);\n    }\n  }, false);\n  typed_queue.Float32x4Queue = class Float32x4Queue extends typed_queue._TypedQueue$(typed_data.Float32x4, typed_data.Float32x4List) {\n    static ['_#new#tearOff'](initialCapacity = null) {\n      return new typed_queue.Float32x4Queue.new(initialCapacity);\n    }\n    static fromList(elements) {\n      let t26;\n      t26 = new typed_queue.Float32x4Queue.new(elements[$length]);\n      return (() => {\n        t26.addAll(elements);\n        return t26;\n      })();\n    }\n    static ['_#fromList#tearOff'](elements) {\n      return typed_queue.Float32x4Queue.fromList(elements);\n    }\n    [_createList](size) {\n      return new _native_typed_data.NativeFloat32x4List.new(size);\n    }\n    [_createBuffer](size) {\n      return new typed_buffer.Float32x4Buffer.new(size);\n    }\n    get [_defaultValue]() {\n      return new _native_typed_data.NativeFloat32x4.zero();\n    }\n    get [_head$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[50] || CT.C50)));\n    }\n    [_writeToList$](target) {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.method(C[51] || CT.C51, null, [target])));\n    }\n    [_add$](element) {\n      return this[$noSuchMethod](new core._Invocation.method(C[52] || CT.C52, null, [element]));\n    }\n    [_grow$]() {\n      return this[$noSuchMethod](new core._Invocation.method(C[53] || CT.C53, null, []));\n    }\n    get [_table$0]() {\n      return T$.ListOfFloat32x4N().as(this[$noSuchMethod](new core._Invocation.getter(C[54] || CT.C54)));\n    }\n    get [_tail$0]() {\n      return core.int.as(this[$noSuchMethod](new core._Invocation.getter(C[55] || CT.C55)));\n    }\n    [_preGrow$](newElementCount) {\n      return this[$noSuchMethod](new core._Invocation.method(C[56] || CT.C56, null, [newElementCount]));\n    }\n    set [_head$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[57] || CT.C57, value));\n    }\n    set [_table$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[58] || CT.C58, value));\n    }\n    set [_tail$0](value) {\n      return this[$noSuchMethod](new core._Invocation.setter(C[59] || CT.C59, value));\n    }\n  };\n  (typed_queue.Float32x4Queue.new = function(initialCapacity = null) {\n    typed_queue.Float32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));\n    ;\n  }).prototype = typed_queue.Float32x4Queue.prototype;\n  dart.addTypeTests(typed_queue.Float32x4Queue);\n  dart.addTypeCaches(typed_queue.Float32x4Queue);\n  typed_queue.Float32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Float32x4)];\n  dart.setMethodSignature(typed_queue.Float32x4Queue, () => ({\n    __proto__: dart.getMethods(typed_queue.Float32x4Queue.__proto__),\n    [_createList]: dart.fnType(typed_data.Float32x4List, [core.int]),\n    [_createBuffer]: dart.fnType(typed_buffer.Float32x4Buffer, [core.int]),\n    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Float32x4))]),\n    [_add$]: dart.fnType(dart.void, [typed_data.Float32x4]),\n    [_grow$]: dart.fnType(dart.void, []),\n    [_preGrow$]: dart.fnType(dart.void, [core.int])\n  }));\n  dart.setStaticMethodSignature(typed_queue.Float32x4Queue, () => ['fromList']);\n  dart.setGetterSignature(typed_queue.Float32x4Queue, () => ({\n    __proto__: dart.getGetters(typed_queue.Float32x4Queue.__proto__),\n    [_defaultValue]: typed_data.Float32x4,\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(typed_data.Float32x4)),\n    [_tail$0]: core.int\n  }));\n  dart.setSetterSignature(typed_queue.Float32x4Queue, () => ({\n    __proto__: dart.getSetters(typed_queue.Float32x4Queue.__proto__),\n    [_head$0]: core.int,\n    [_table$0]: core.List$(dart.nullable(typed_data.Float32x4)),\n    [_tail$0]: core.int\n  }));\n  dart.setLibraryUri(typed_queue.Float32x4Queue, I[50]);\n  typed_queue._chooseRealInitialCapacity = function _chooseRealInitialCapacity(initialCapacity) {\n    if (initialCapacity == null || dart.notNull(initialCapacity) < 16) {\n      return 16;\n    } else if (!typed_queue._isPowerOf2(initialCapacity)) {\n      return typed_queue._nextPowerOf2(initialCapacity);\n    } else {\n      return initialCapacity;\n    }\n  };\n  typed_queue._isPowerOf2 = function _isPowerOf2(number) {\n    return (number & number - 1) === 0;\n  };\n  typed_queue._nextPowerOf2 = function _nextPowerOf2(number) {\n    if (!(number > 0)) dart.assertFailed(null, I[49], 648, 10, \"number > 0\");\n    number = (number << 1 >>> 0) - 1;\n    for (;;) {\n      let nextNumber = (number & number - 1) >>> 0;\n      if (nextNumber === 0) return number;\n      number = nextNumber;\n    }\n  };\n  dart.defineLazy(typed_queue, {\n    /*typed_queue._defaultInitialCapacity*/get _defaultInitialCapacity() {\n      return 16;\n    }\n  }, false);\n  dart.trackLibraries(\"dartpad_main\", {\n    \"package:dartpad_sample/bootstrap.dart\": bootstrap,\n    \"package:flutter_web_plugins/flutter_web_plugins.dart\": flutter_web_plugins,\n    \"package:dartpad_sample/generated_plugin_registrant.dart\": generated_plugin_registrant,\n    \"package:dartpad_sample/main.dart\": main,\n    \"package:flutter_web_plugins/src/navigation/js_url_strategy.dart\": js_url_strategy,\n    \"package:flutter_web_plugins/src/navigation/url_strategy.dart\": url_strategy,\n    \"package:flutter_web_plugins/src/navigation/utils.dart\": utils,\n    \"package:flutter_web_plugins/src/plugin_event_channel.dart\": plugin_event_channel,\n    \"package:flutter_web_plugins/src/plugin_registry.dart\": plugin_registry,\n    \"package:image_picker_for_web/image_picker_for_web.dart\": image_picker_for_web,\n    \"package:url_launcher_web/url_launcher_web.dart\": url_launcher_web,\n    \"package:js/js.dart\": js$,\n    \"package:image_picker_for_web/src/image_resizer.dart\": image_resizer,\n    \"package:image_picker_platform_interface/image_picker_platform_interface.dart\": image_picker_platform_interface,\n    \"package:url_launcher_platform_interface/link.dart\": link,\n    \"package:url_launcher_platform_interface/url_launcher_platform_interface.dart\": url_launcher_platform_interface,\n    \"package:url_launcher_web/src/link.dart\": link$,\n    \"package:url_launcher_web/src/shims/dart_ui.dart\": dart_ui,\n    \"package:url_launcher_web/src/third_party/platform_detect/browser.dart\": browser,\n    \"package:image_picker_for_web/src/image_resizer_utils.dart\": image_resizer_utils,\n    \"package:image_picker_platform_interface/src/platform_interface/image_picker_platform.dart\": image_picker_platform,\n    \"package:image_picker_platform_interface/src/types/types.dart\": types,\n    \"package:cross_file/cross_file.dart\": cross_file,\n    \"package:plugin_platform_interface/plugin_platform_interface.dart\": plugin_platform_interface,\n    \"package:url_launcher_platform_interface/method_channel_url_launcher.dart\": method_channel_url_launcher,\n    \"package:url_launcher_web/src/shims/dart_ui_real.dart\": dart_ui_real,\n    \"package:image_picker_platform_interface/src/method_channel/method_channel_image_picker.dart\": method_channel_image_picker,\n    \"package:image_picker_platform_interface/src/types/camera_device.dart\": camera_device,\n    \"package:image_picker_platform_interface/src/types/image_source.dart\": image_source,\n    \"package:image_picker_platform_interface/src/types/retrieve_type.dart\": retrieve_type,\n    \"package:image_picker_platform_interface/src/types/picked_file/picked_file.dart\": picked_file,\n    \"package:image_picker_platform_interface/src/types/lost_data_response.dart\": lost_data_response,\n    \"package:cross_file/src/x_file.dart\": x_file,\n    \"package:image_picker_platform_interface/src/types/picked_file/lost_data.dart\": lost_data,\n    \"package:image_picker_platform_interface/src/types/picked_file/html.dart\": html$,\n    \"package:cross_file/src/types/html.dart\": html$0,\n    \"package:http/http.dart\": http,\n    \"package:image_picker_platform_interface/src/types/picked_file/base.dart\": base,\n    \"package:cross_file/src/types/base.dart\": base$,\n    \"package:cross_file/src/web_helpers/web_helpers.dart\": web_helpers,\n    \"package:http/src/client.dart\": client$,\n    \"package:http/src/exception.dart\": exception,\n    \"package:http/src/request.dart\": request$,\n    \"package:http/src/response.dart\": response$,\n    \"package:http/src/streamed_request.dart\": streamed_request,\n    \"package:http/src/base_client.dart\": base_client,\n    \"package:http/src/base_request.dart\": base_request,\n    \"package:http/src/base_response.dart\": base_response,\n    \"package:http/src/byte_stream.dart\": byte_stream,\n    \"package:http/src/multipart_file.dart\": multipart_file,\n    \"package:http/src/multipart_request.dart\": multipart_request,\n    \"package:http/src/streamed_response.dart\": streamed_response,\n    \"package:http/src/browser_client.dart\": browser_client,\n    \"package:http_parser/http_parser.dart\": http_parser,\n    \"package:http/src/utils.dart\": utils$,\n    \"package:http/src/multipart_file_stub.dart\": multipart_file_stub,\n    \"package:http/src/boundary_characters.dart\": boundary_characters,\n    \"package:http_parser/src/authentication_challenge.dart\": authentication_challenge,\n    \"package:http_parser/src/case_insensitive_map.dart\": case_insensitive_map,\n    \"package:http_parser/src/chunked_coding.dart\": chunked_coding,\n    \"package:http_parser/src/http_date.dart\": http_date,\n    \"package:http_parser/src/media_type.dart\": media_type,\n    \"package:http_parser/src/scan.dart\": scan,\n    \"package:http_parser/src/utils.dart\": utils$0,\n    \"package:http_parser/src/chunked_coding/decoder.dart\": decoder,\n    \"package:http_parser/src/chunked_coding/encoder.dart\": encoder,\n    \"package:typed_data/typed_data.dart\": typed_data$,\n    \"package:typed_data/src/typed_queue.dart\": typed_queue\n  }, {\n  }, null);\n  // Exports:\n  return {\n    bootstrap: bootstrap,\n    flutter_web_plugins: flutter_web_plugins,\n    generated_plugin_registrant: generated_plugin_registrant,\n    main: main,\n    src__navigation__js_url_strategy: js_url_strategy,\n    src__navigation__url_strategy: url_strategy,\n    src__navigation__utils: utils,\n    src__plugin_event_channel: plugin_event_channel,\n    src__plugin_registry: plugin_registry,\n    image_picker_for_web: image_picker_for_web,\n    url_launcher_web: url_launcher_web,\n    js: js$,\n    src__image_resizer: image_resizer,\n    image_picker_platform_interface: image_picker_platform_interface,\n    link: link,\n    url_launcher_platform_interface: url_launcher_platform_interface,\n    src__link: link$,\n    src__shims__dart_ui: dart_ui,\n    src__third_party__platform_detect__browser: browser,\n    src__image_resizer_utils: image_resizer_utils,\n    src__platform_interface__image_picker_platform: image_picker_platform,\n    src__types__types: types,\n    cross_file: cross_file,\n    plugin_platform_interface: plugin_platform_interface,\n    method_channel_url_launcher: method_channel_url_launcher,\n    src__shims__dart_ui_real: dart_ui_real,\n    src__method_channel__method_channel_image_picker: method_channel_image_picker,\n    src__types__camera_device: camera_device,\n    src__types__image_source: image_source,\n    src__types__retrieve_type: retrieve_type,\n    src__types__picked_file__picked_file: picked_file,\n    src__types__lost_data_response: lost_data_response,\n    src__x_file: x_file,\n    src__types__picked_file__lost_data: lost_data,\n    src__types__picked_file__html: html$,\n    src__types__html: html$0,\n    http: http,\n    src__types__picked_file__base: base,\n    src__types__base: base$,\n    src__web_helpers__web_helpers: web_helpers,\n    src__client: client$,\n    src__exception: exception,\n    src__request: request$,\n    src__response: response$,\n    src__streamed_request: streamed_request,\n    src__base_client: base_client,\n    src__base_request: base_request,\n    src__base_response: base_response,\n    src__byte_stream: byte_stream,\n    src__multipart_file: multipart_file,\n    src__multipart_request: multipart_request,\n    src__streamed_response: streamed_response,\n    src__browser_client: browser_client,\n    http_parser: http_parser,\n    src__utils: utils$,\n    src__multipart_file_stub: multipart_file_stub,\n    src__boundary_characters: boundary_characters,\n    src__authentication_challenge: authentication_challenge,\n    src__case_insensitive_map: case_insensitive_map,\n    src__chunked_coding: chunked_coding,\n    src__http_date: http_date,\n    src__media_type: media_type,\n    src__scan: scan,\n    src__utils: utils$0,\n    src__chunked_coding__decoder: decoder,\n    src__chunked_coding__encoder: encoder,\n    typed_data: typed_data$,\n    src__typed_queue: typed_queue\n  };\n}));\n\n//# sourceMappingURL=main.dart.js.map\n",
 "modulesBaseUrl": "https://storage.googleapis.com/nnbd_artifacts/2.15.1/"
}